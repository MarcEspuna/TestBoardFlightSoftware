
TestBoardCplusplus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800d498  0800d498  0001d498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5cc  0800d5cc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5cc  0800d5cc  0001d5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5d4  0800d5d4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5d4  0800d5d4  0001d5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5d8  0800d5d8  0001d5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00008d74  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008e08  20008e08  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b90c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c76  00000000  00000000  0004b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002350  00000000  00000000  00051648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002110  00000000  00000000  00053998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb2d  00000000  00000000  00055aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002baa5  00000000  00000000  000825d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f630c  00000000  00000000  000ae07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a4386  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009e00  00000000  00000000  001a43d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d480 	.word	0x0800d480

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800d480 	.word	0x0800d480

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <vApplicationGetIdleTaskMemory+0x30>)
 80005de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000b0 	.word	0x200000b0
 80005f8:	20000108 	.word	0x20000108

080005fc <__io_putchar>:
osThreadId defaultTaskHandle;
osThreadId ledTaskHandle;

/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800060a:	2201      	movs	r2, #1
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <__io_putchar+0x20>)
 800060e:	f005 fb44 	bl	8005c9a <HAL_UART_Transmit>

    return ch;
 8000612:	687b      	ldr	r3, [r7, #4]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200004ec 	.word	0x200004ec

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f001 f8d9 	bl	80017dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f825 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 fa93 	bl	8000b58 <MX_GPIO_Init>
  MX_CRC_Init();
 8000632:	f000 f88b 	bl	800074c <MX_CRC_Init>
  MX_DMA2D_Init();
 8000636:	f000 f89d 	bl	8000774 <MX_DMA2D_Init>
  MX_FMC_Init();
 800063a:	f000 fa3d 	bl	8000ab8 <MX_FMC_Init>
  MX_I2C3_Init();
 800063e:	f000 f8cb 	bl	80007d8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000642:	f000 f909 	bl	8000858 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000646:	f000 f987 	bl	8000958 <MX_SPI5_Init>
  MX_TIM1_Init();
 800064a:	f000 f9bb 	bl	80009c4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800064e:	f000 fa09 	bl	8000a64 <MX_USART1_UART_Init>
  //osThreadCreate(osThread(thOne), NULL);

  //osThreadDef(thTwo, threadTwo, osPriorityRealtime, 0, 1800);
  //osThreadCreate(osThread(thTwo), NULL);

  osThreadDef(defaultTaskHandle, StartDefaultTask, osPriorityRealtime, 0, 300);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <main+0x54>)
 8000654:	1d3c      	adds	r4, r7, #4
 8000656:	461d      	mov	r5, r3
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(defaultTaskHandle), NULL);
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f009 f9b2 	bl	80099d2 <osThreadCreate>
  /* USER CODE BEGIN RTOS_THREADS */

    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
  osKernelStart();
 800066e:	f009 f9a9 	bl	80099c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0x52>
 8000674:	0800d4ac 	.word	0x0800d4ac

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f00b ff64 	bl	800c554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a20      	ldr	r2, [pc, #128]	; (8000748 <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006f0:	2348      	movs	r3, #72	; 0x48
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006f8:	2303      	movs	r3, #3
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f003 feb3 	bl	800446c <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800070c:	f000 fb68 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2102      	movs	r1, #2
 800072c:	4618      	mov	r0, r3
 800072e:	f004 f917 	bl	8004960 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000738:	f000 fb52 	bl	8000de0 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	; 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_CRC_Init+0x20>)
 8000752:	4a07      	ldr	r2, [pc, #28]	; (8000770 <MX_CRC_Init+0x24>)
 8000754:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_CRC_Init+0x20>)
 8000758:	f001 f988 	bl	8001a6c <HAL_CRC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000762:	f000 fb3d 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000308 	.word	0x20000308
 8000770:	40023000 	.word	0x40023000

08000774 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <MX_DMA2D_Init+0x60>)
 800077c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000792:	2200      	movs	r2, #0
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007aa:	f001 f97b 	bl	8001aa4 <HAL_DMA2D_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007b4:	f000 fb14 	bl	8000de0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007b8:	2101      	movs	r1, #1
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007bc:	f001 facc 	bl	8001d58 <HAL_DMA2D_ConfigLayer>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007c6:	f000 fb0b 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000310 	.word	0x20000310
 80007d4:	4002b000 	.word	0x4002b000

080007d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_I2C3_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_I2C3_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_I2C3_Init+0x74>)
 80007e4:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <MX_I2C3_Init+0x7c>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_I2C3_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_I2C3_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_I2C3_Init+0x74>)
 80007f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_I2C3_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2C3_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_I2C3_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_I2C3_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_I2C3_Init+0x74>)
 8000816:	f003 f901 	bl	8003a1c <HAL_I2C_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 fade 	bl	8000de0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000824:	2100      	movs	r1, #0
 8000826:	4809      	ldr	r0, [pc, #36]	; (800084c <MX_I2C3_Init+0x74>)
 8000828:	f003 fa3c 	bl	8003ca4 <HAL_I2CEx_ConfigAnalogFilter>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000832:	f000 fad5 	bl	8000de0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_I2C3_Init+0x74>)
 800083a:	f003 fa6f 	bl	8003d1c <HAL_I2CEx_ConfigDigitalFilter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000844:	f000 facc 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000350 	.word	0x20000350
 8000850:	40005c00 	.word	0x40005c00
 8000854:	000186a0 	.word	0x000186a0

08000858 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2234      	movs	r2, #52	; 0x34
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f00b fe75 	bl	800c554 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800086a:	4b39      	ldr	r3, [pc, #228]	; (8000950 <MX_LTDC_Init+0xf8>)
 800086c:	4a39      	ldr	r2, [pc, #228]	; (8000954 <MX_LTDC_Init+0xfc>)
 800086e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000870:	4b37      	ldr	r3, [pc, #220]	; (8000950 <MX_LTDC_Init+0xf8>)
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000876:	4b36      	ldr	r3, [pc, #216]	; (8000950 <MX_LTDC_Init+0xf8>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800087c:	4b34      	ldr	r3, [pc, #208]	; (8000950 <MX_LTDC_Init+0xf8>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000882:	4b33      	ldr	r3, [pc, #204]	; (8000950 <MX_LTDC_Init+0xf8>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000888:	4b31      	ldr	r3, [pc, #196]	; (8000950 <MX_LTDC_Init+0xf8>)
 800088a:	2209      	movs	r2, #9
 800088c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <MX_LTDC_Init+0xf8>)
 8000890:	2201      	movs	r2, #1
 8000892:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <MX_LTDC_Init+0xf8>)
 8000896:	221d      	movs	r2, #29
 8000898:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <MX_LTDC_Init+0xf8>)
 800089c:	2203      	movs	r2, #3
 800089e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80008a0:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_LTDC_Init+0xf8>)
 80008a2:	f240 120d 	movw	r2, #269	; 0x10d
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <MX_LTDC_Init+0xf8>)
 80008aa:	f240 1243 	movw	r2, #323	; 0x143
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80008b0:	4b27      	ldr	r3, [pc, #156]	; (8000950 <MX_LTDC_Init+0xf8>)
 80008b2:	f240 1217 	movw	r2, #279	; 0x117
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_LTDC_Init+0xf8>)
 80008ba:	f240 1247 	movw	r2, #327	; 0x147
 80008be:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <MX_LTDC_Init+0xf8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <MX_LTDC_Init+0xf8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_LTDC_Init+0xf8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008d8:	481d      	ldr	r0, [pc, #116]	; (8000950 <MX_LTDC_Init+0xf8>)
 80008da:	f003 fa5f 	bl	8003d9c <HAL_LTDC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008e4:	f000 fa7c 	bl	8000de0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80008ec:	23f0      	movs	r3, #240	; 0xf0
 80008ee:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008f8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008fa:	2302      	movs	r3, #2
 80008fc:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008fe:	23ff      	movs	r3, #255	; 0xff
 8000900:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000906:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800090a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800090c:	2307      	movs	r3, #7
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000910:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000916:	23f0      	movs	r3, #240	; 0xf0
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800091a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_LTDC_Init+0xf8>)
 800093a:	f003 fbc1 	bl	80040c0 <HAL_LTDC_ConfigLayer>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000944:	f000 fa4c 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3738      	adds	r7, #56	; 0x38
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200003a4 	.word	0x200003a4
 8000954:	40016800 	.word	0x40016800

08000958 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_SPI5_Init+0x64>)
 800095e:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <MX_SPI5_Init+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_SPI5_Init+0x64>)
 8000964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000968:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_SPI5_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_SPI5_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_SPI5_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_SPI5_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_SPI5_Init+0x64>)
 8000984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000988:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_SPI5_Init+0x64>)
 800098c:	2218      	movs	r2, #24
 800098e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_SPI5_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_SPI5_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_SPI5_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_SPI5_Init+0x64>)
 80009a4:	220a      	movs	r2, #10
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_SPI5_Init+0x64>)
 80009aa:	f004 fc1f 	bl	80051ec <HAL_SPI_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009b4:	f000 fa14 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000044c 	.word	0x2000044c
 80009c0:	40015000 	.word	0x40015000

080009c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_TIM1_Init+0x98>)
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <MX_TIM1_Init+0x9c>)
 80009e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM1_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM1_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM1_Init+0x98>)
 80009f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_TIM1_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_TIM1_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_TIM1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MX_TIM1_Init+0x98>)
 8000a0e:	f004 fc76 	bl	80052fe <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a18:	f000 f9e2 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM1_Init+0x98>)
 8000a2a:	f004 fe2f 	bl	800568c <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a34:	f000 f9d4 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM1_Init+0x98>)
 8000a46:	f005 f84b 	bl	8005ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a50:	f000 f9c6 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200004a4 	.word	0x200004a4
 8000a60:	40010000 	.word	0x40010000

08000a64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_USART1_UART_Init+0x50>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	f005 f8b0 	bl	8005c00 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aa6:	f000 f99b 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200004ec 	.word	0x200004ec
 8000ab4:	40011000 	.word	0x40011000

08000ab8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_FMC_Init+0x98>)
 8000ad2:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <MX_FMC_Init+0x9c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_FMC_Init+0x98>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_FMC_Init+0x98>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_FMC_Init+0x98>)
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_FMC_Init+0x98>)
 8000aea:	2210      	movs	r2, #16
 8000aec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_FMC_Init+0x98>)
 8000af0:	2240      	movs	r2, #64	; 0x40
 8000af2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_FMC_Init+0x98>)
 8000af6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000afa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_FMC_Init+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_FMC_Init+0x98>)
 8000b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b08:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_FMC_Init+0x98>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_FMC_Init+0x98>)
 8000b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b24:	2307      	movs	r3, #7
 8000b26:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_FMC_Init+0x98>)
 8000b3a:	f004 fb23 	bl	8005184 <HAL_SDRAM_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b44:	f000 f94c 	bl	8000de0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000530 	.word	0x20000530
 8000b54:	a0000140 	.word	0xa0000140

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	; 0x38
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
 8000b72:	4b7b      	ldr	r3, [pc, #492]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a7a      	ldr	r2, [pc, #488]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b78      	ldr	r3, [pc, #480]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	623b      	str	r3, [r7, #32]
 8000b88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	4b74      	ldr	r3, [pc, #464]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a73      	ldr	r2, [pc, #460]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000b94:	f043 0320 	orr.w	r3, r3, #32
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b71      	ldr	r3, [pc, #452]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0320 	and.w	r3, r3, #32
 8000ba2:	61fb      	str	r3, [r7, #28]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	4b6d      	ldr	r3, [pc, #436]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a6c      	ldr	r2, [pc, #432]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b6a      	ldr	r3, [pc, #424]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	4b66      	ldr	r3, [pc, #408]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a65      	ldr	r2, [pc, #404]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b63      	ldr	r3, [pc, #396]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b5f      	ldr	r3, [pc, #380]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a5e      	ldr	r2, [pc, #376]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b5c      	ldr	r3, [pc, #368]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b58      	ldr	r3, [pc, #352]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a57      	ldr	r2, [pc, #348]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b55      	ldr	r3, [pc, #340]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b51      	ldr	r3, [pc, #324]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a50      	ldr	r2, [pc, #320]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000c20:	f043 0310 	orr.w	r3, r3, #16
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b4e      	ldr	r3, [pc, #312]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a49      	ldr	r2, [pc, #292]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <MX_GPIO_Init+0x208>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0308 	and.w	r3, r3, #8
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2116      	movs	r1, #22
 8000c52:	4844      	ldr	r0, [pc, #272]	; (8000d64 <MX_GPIO_Init+0x20c>)
 8000c54:	f001 fabe 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2180      	movs	r1, #128	; 0x80
 8000c5c:	4842      	ldr	r0, [pc, #264]	; (8000d68 <MX_GPIO_Init+0x210>)
 8000c5e:	f001 fab9 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c68:	4840      	ldr	r0, [pc, #256]	; (8000d6c <MX_GPIO_Init+0x214>)
 8000c6a:	f001 fab3 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c74:	483e      	ldr	r0, [pc, #248]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000c76:	f001 faad 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c7a:	2316      	movs	r3, #22
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4834      	ldr	r0, [pc, #208]	; (8000d64 <MX_GPIO_Init+0x20c>)
 8000c92:	f001 f8f3 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c96:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c9c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	482e      	ldr	r0, [pc, #184]	; (8000d68 <MX_GPIO_Init+0x210>)
 8000cae:	f001 f8e5 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4827      	ldr	r0, [pc, #156]	; (8000d68 <MX_GPIO_Init+0x210>)
 8000cca:	f001 f8d7 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4820      	ldr	r0, [pc, #128]	; (8000d64 <MX_GPIO_Init+0x20c>)
 8000ce4:	f001 f8ca 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	481e      	ldr	r0, [pc, #120]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000cfc:	f001 f8be 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4815      	ldr	r0, [pc, #84]	; (8000d6c <MX_GPIO_Init+0x214>)
 8000d16:	f001 f8b1 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <MX_GPIO_Init+0x214>)
 8000d34:	f001 f8a2 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d38:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000d52:	f001 f893 	bl	8001e7c <HAL_GPIO_Init>

}
 8000d56:	bf00      	nop
 8000d58:	3738      	adds	r7, #56	; 0x38
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40020c00 	.word	0x40020c00
 8000d70:	40021800 	.word	0x40021800
 8000d74:	40020400 	.word	0x40020400

08000d78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d80:	f00b f898 	bl	800beb4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  while(1)
  {
      configPRINTF(("Hello World\n"));
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <StartDefaultTask+0x1c>)
 8000d86:	f000 f807 	bl	8000d98 <myPrintFunction>
      osDelay(1000);
 8000d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d8e:	f008 fe6c 	bl	8009a6a <osDelay>
      configPRINTF(("Hello World\n"));
 8000d92:	e7f7      	b.n	8000d84 <StartDefaultTask+0xc>
 8000d94:	0800d4c8 	.word	0x0800d4c8

08000d98 <myPrintFunction>:
        osDelay(1000);
    }
    /* USER CODE END 5 */
}

void myPrintFunction(const char *str, ...) {
 8000d98:	b40f      	push	{r0, r1, r2, r3}
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, str);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	607b      	str	r3, [r7, #4]
    vprintf(str, args);
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	6938      	ldr	r0, [r7, #16]
 8000daa:	f00b fccb 	bl	800c744 <viprintf>
    va_end(args);
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dce:	f000 fd27 	bl	8001820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40001000 	.word	0x40001000

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_MspInit+0x54>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <HAL_MspInit+0x54>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x54>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_MspInit+0x54>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_MspInit+0x54>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_MspInit+0x54>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	210f      	movs	r1, #15
 8000e2e:	f06f 0001 	mvn.w	r0, #1
 8000e32:	f000 fdf1 	bl	8001a18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_CRC_MspInit+0x3c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10d      	bne.n	8000e72 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_CRC_MspInit+0x40>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <HAL_CRC_MspInit+0x40>)
 8000e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_CRC_MspInit+0x40>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023000 	.word	0x40023000
 8000e84:	40023800 	.word	0x40023800

08000e88 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_DMA2D_MspInit+0x48>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d115      	bne.n	8000ec6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_DMA2D_MspInit+0x4c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <HAL_DMA2D_MspInit+0x4c>)
 8000ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_DMA2D_MspInit+0x4c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2105      	movs	r1, #5
 8000eba:	205a      	movs	r0, #90	; 0x5a
 8000ebc:	f000 fdac 	bl	8001a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ec0:	205a      	movs	r0, #90	; 0x5a
 8000ec2:	f000 fdc5 	bl	8001a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	4002b000 	.word	0x4002b000
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a29      	ldr	r2, [pc, #164]	; (8000f9c <HAL_I2C_MspInit+0xc4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d14b      	bne.n	8000f92 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f44:	2304      	movs	r3, #4
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <HAL_I2C_MspInit+0xcc>)
 8000f50:	f000 ff94 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5a:	2312      	movs	r3, #18
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f66:	2304      	movs	r3, #4
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <HAL_I2C_MspInit+0xd0>)
 8000f72:	f000 ff83 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40005c00 	.word	0x40005c00
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020000 	.word	0x40020000

08000fac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b09a      	sub	sp, #104	; 0x68
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	2230      	movs	r2, #48	; 0x30
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00b fac1 	bl	800c554 <memset>
  if(hltdc->Instance==LTDC)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a85      	ldr	r2, [pc, #532]	; (80011ec <HAL_LTDC_MspInit+0x240>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	f040 8102 	bne.w	80011e2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fe2:	2332      	movs	r3, #50	; 0x32
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000fea:	2300      	movs	r3, #0
 8000fec:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 ff06 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000ffe:	f7ff feef 	bl	8000de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
 8001006:	4b7a      	ldr	r3, [pc, #488]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a79      	ldr	r2, [pc, #484]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 800100c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b77      	ldr	r3, [pc, #476]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800101a:	623b      	str	r3, [r7, #32]
 800101c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	4b73      	ldr	r3, [pc, #460]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a72      	ldr	r2, [pc, #456]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b70      	ldr	r3, [pc, #448]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	4b6c      	ldr	r3, [pc, #432]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a6b      	ldr	r2, [pc, #428]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b69      	ldr	r3, [pc, #420]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	4b65      	ldr	r3, [pc, #404]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a64      	ldr	r2, [pc, #400]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b62      	ldr	r3, [pc, #392]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b5e      	ldr	r3, [pc, #376]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a5d      	ldr	r2, [pc, #372]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 800107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b5b      	ldr	r3, [pc, #364]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a56      	ldr	r2, [pc, #344]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b4d      	ldr	r3, [pc, #308]	; (80011f0 <HAL_LTDC_MspInit+0x244>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d8:	230e      	movs	r3, #14
 80010da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010e0:	4619      	mov	r1, r3
 80010e2:	4844      	ldr	r0, [pc, #272]	; (80011f4 <HAL_LTDC_MspInit+0x248>)
 80010e4:	f000 feca 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010e8:	f641 0358 	movw	r3, #6232	; 0x1858
 80010ec:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010fa:	230e      	movs	r3, #14
 80010fc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001102:	4619      	mov	r1, r3
 8001104:	483c      	ldr	r0, [pc, #240]	; (80011f8 <HAL_LTDC_MspInit+0x24c>)
 8001106:	f000 feb9 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800110a:	2303      	movs	r3, #3
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800111a:	2309      	movs	r3, #9
 800111c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001122:	4619      	mov	r1, r3
 8001124:	4835      	ldr	r0, [pc, #212]	; (80011fc <HAL_LTDC_MspInit+0x250>)
 8001126:	f000 fea9 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800112a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800112e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800113c:	230e      	movs	r3, #14
 800113e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001144:	4619      	mov	r1, r3
 8001146:	482d      	ldr	r0, [pc, #180]	; (80011fc <HAL_LTDC_MspInit+0x250>)
 8001148:	f000 fe98 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800114c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001150:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800115e:	230e      	movs	r3, #14
 8001160:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001162:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001166:	4619      	mov	r1, r3
 8001168:	4825      	ldr	r0, [pc, #148]	; (8001200 <HAL_LTDC_MspInit+0x254>)
 800116a:	f000 fe87 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800116e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001172:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001180:	230e      	movs	r3, #14
 8001182:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001188:	4619      	mov	r1, r3
 800118a:	481e      	ldr	r0, [pc, #120]	; (8001204 <HAL_LTDC_MspInit+0x258>)
 800118c:	f000 fe76 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001190:	2348      	movs	r3, #72	; 0x48
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a0:	230e      	movs	r3, #14
 80011a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a8:	4619      	mov	r1, r3
 80011aa:	4817      	ldr	r0, [pc, #92]	; (8001208 <HAL_LTDC_MspInit+0x25c>)
 80011ac:	f000 fe66 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011c2:	2309      	movs	r3, #9
 80011c4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <HAL_LTDC_MspInit+0x254>)
 80011ce:	f000 fe55 	bl	8001e7c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2105      	movs	r1, #5
 80011d6:	2058      	movs	r0, #88	; 0x58
 80011d8:	f000 fc1e 	bl	8001a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011dc:	2058      	movs	r0, #88	; 0x58
 80011de:	f000 fc37 	bl	8001a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3768      	adds	r7, #104	; 0x68
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40016800 	.word	0x40016800
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40021800 	.word	0x40021800
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00

0800120c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <HAL_SPI_MspInit+0x84>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d12c      	bne.n	8001288 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_SPI_MspInit+0x88>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_SPI_MspInit+0x88>)
 8001238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_SPI_MspInit+0x88>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_SPI_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <HAL_SPI_MspInit+0x88>)
 8001254:	f043 0320 	orr.w	r3, r3, #32
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_SPI_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001266:	f44f 7360 	mov.w	r3, #896	; 0x380
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001278:	2305      	movs	r3, #5
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_SPI_MspInit+0x8c>)
 8001284:	f000 fdfa 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40015000 	.word	0x40015000
 8001294:	40023800 	.word	0x40023800
 8001298:	40021400 	.word	0x40021400

0800129c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <HAL_TIM_Base_MspInit+0x3c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10d      	bne.n	80012ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40010000 	.word	0x40010000
 80012dc:	40023800 	.word	0x40023800

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <HAL_UART_MspInit+0x84>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d12c      	bne.n	800135c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_UART_MspInit+0x88>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <HAL_UART_MspInit+0x88>)
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_UART_MspInit+0x88>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_UART_MspInit+0x88>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_UART_MspInit+0x88>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_UART_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800133a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800134c:	2307      	movs	r3, #7
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_UART_MspInit+0x8c>)
 8001358:	f000 fd90 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40011000 	.word	0x40011000
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000

08001370 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001384:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_FMC_MspInit+0x104>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d16f      	bne.n	800146c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800138c:	4b39      	ldr	r3, [pc, #228]	; (8001474 <HAL_FMC_MspInit+0x104>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <HAL_FMC_MspInit+0x108>)
 8001398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139a:	4a37      	ldr	r2, [pc, #220]	; (8001478 <HAL_FMC_MspInit+0x108>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6393      	str	r3, [r2, #56]	; 0x38
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <HAL_FMC_MspInit+0x108>)
 80013a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80013ae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80013b2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013c0:	230c      	movs	r3, #12
 80013c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	482c      	ldr	r0, [pc, #176]	; (800147c <HAL_FMC_MspInit+0x10c>)
 80013ca:	f000 fd57 	bl	8001e7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80013ce:	2301      	movs	r3, #1
 80013d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013de:	230c      	movs	r3, #12
 80013e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4826      	ldr	r0, [pc, #152]	; (8001480 <HAL_FMC_MspInit+0x110>)
 80013e8:	f000 fd48 	bl	8001e7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80013ec:	f248 1333 	movw	r3, #33075	; 0x8133
 80013f0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013fe:	230c      	movs	r3, #12
 8001400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4619      	mov	r1, r3
 8001406:	481f      	ldr	r0, [pc, #124]	; (8001484 <HAL_FMC_MspInit+0x114>)
 8001408:	f000 fd38 	bl	8001e7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800140c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001410:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800141e:	230c      	movs	r3, #12
 8001420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4818      	ldr	r0, [pc, #96]	; (8001488 <HAL_FMC_MspInit+0x118>)
 8001428:	f000 fd28 	bl	8001e7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800142c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001430:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800143e:	230c      	movs	r3, #12
 8001440:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4811      	ldr	r0, [pc, #68]	; (800148c <HAL_FMC_MspInit+0x11c>)
 8001448:	f000 fd18 	bl	8001e7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800145c:	230c      	movs	r3, #12
 800145e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	480a      	ldr	r0, [pc, #40]	; (8001490 <HAL_FMC_MspInit+0x120>)
 8001466:	f000 fd09 	bl	8001e7c <HAL_GPIO_Init>
 800146a:	e000      	b.n	800146e <HAL_FMC_MspInit+0xfe>
    return;
 800146c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000564 	.word	0x20000564
 8001478:	40023800 	.word	0x40023800
 800147c:	40021400 	.word	0x40021400
 8001480:	40020800 	.word	0x40020800
 8001484:	40021800 	.word	0x40021800
 8001488:	40021000 	.word	0x40021000
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40020400 	.word	0x40020400

08001494 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800149c:	f7ff ff68 	bl	8001370 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <HAL_InitTick+0xe4>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a32      	ldr	r2, [pc, #200]	; (800158c <HAL_InitTick+0xe4>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_InitTick+0xe4>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d4:	f107 0210 	add.w	r2, r7, #16
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 fc5e 	bl	8004da0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014ee:	f003 fc2f 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 80014f2:	6378      	str	r0, [r7, #52]	; 0x34
 80014f4:	e004      	b.n	8001500 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014f6:	f003 fc2b 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 80014fa:	4603      	mov	r3, r0
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001502:	4a23      	ldr	r2, [pc, #140]	; (8001590 <HAL_InitTick+0xe8>)
 8001504:	fba2 2303 	umull	r2, r3, r2, r3
 8001508:	0c9b      	lsrs	r3, r3, #18
 800150a:	3b01      	subs	r3, #1
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <HAL_InitTick+0xec>)
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <HAL_InitTick+0xf0>)
 8001512:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_InitTick+0xec>)
 8001516:	f240 32e7 	movw	r2, #999	; 0x3e7
 800151a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800151c:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_InitTick+0xec>)
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_InitTick+0xec>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_InitTick+0xec>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_InitTick+0xec>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001534:	4817      	ldr	r0, [pc, #92]	; (8001594 <HAL_InitTick+0xec>)
 8001536:	f003 fee2 	bl	80052fe <HAL_TIM_Base_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001540:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11b      	bne.n	8001580 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001548:	4812      	ldr	r0, [pc, #72]	; (8001594 <HAL_InitTick+0xec>)
 800154a:	f003 ff27 	bl	800539c <HAL_TIM_Base_Start_IT>
 800154e:	4603      	mov	r3, r0
 8001550:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001554:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001558:	2b00      	cmp	r3, #0
 800155a:	d111      	bne.n	8001580 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800155c:	2036      	movs	r0, #54	; 0x36
 800155e:	f000 fa77 	bl	8001a50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d808      	bhi.n	800157a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	2036      	movs	r0, #54	; 0x36
 800156e:	f000 fa53 	bl	8001a18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <HAL_InitTick+0xf4>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e002      	b.n	8001580 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001580:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001584:	4618      	mov	r0, r3
 8001586:	3738      	adds	r7, #56	; 0x38
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	431bde83 	.word	0x431bde83
 8001594:	20000568 	.word	0x20000568
 8001598:	40001000 	.word	0x40001000
 800159c:	20000004 	.word	0x20000004

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <TIM6_DAC_IRQHandler+0x10>)
 80015d2:	f003 ff53 	bl	800547c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000568 	.word	0x20000568

080015e0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <OTG_HS_IRQHandler+0x10>)
 80015e6:	f001 f879 	bl	80026dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20008af4 	.word	0x20008af4

080015f4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <LTDC_IRQHandler+0x10>)
 80015fa:	f002 fc9f 	bl	8003f3c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200003a4 	.word	0x200003a4

08001608 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA2D_IRQHandler+0x10>)
 800160e:	f000 fa92 	bl	8001b36 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000310 	.word	0x20000310

0800161c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	e00a      	b.n	8001644 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800162e:	f3af 8000 	nop.w
 8001632:	4601      	mov	r1, r0
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	60ba      	str	r2, [r7, #8]
 800163a:	b2ca      	uxtb	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf0      	blt.n	800162e <_read+0x12>
  }

  return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e009      	b.n	800167c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ffc3 	bl	80005fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbf1      	blt.n	8001668 <_write+0x12>
  }
  return len;
 8001684:	687b      	ldr	r3, [r7, #4]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_close>:

int _close(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b6:	605a      	str	r2, [r3, #4]
  return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_isatty>:

int _isatty(int file)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <_sbrk+0x5c>)
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <_sbrk+0x60>)
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <_sbrk+0x64>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <_sbrk+0x68>)
 8001718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	429a      	cmp	r2, r3
 8001726:	d207      	bcs.n	8001738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001728:	f00a fecc 	bl	800c4c4 <__errno>
 800172c:	4603      	mov	r3, r0
 800172e:	220c      	movs	r2, #12
 8001730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	e009      	b.n	800174c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <_sbrk+0x64>)
 8001748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20030000 	.word	0x20030000
 8001758:	00000400 	.word	0x00000400
 800175c:	200005b0 	.word	0x200005b0
 8001760:	20008e08 	.word	0x20008e08

08001764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <SystemInit+0x20>)
 800176a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <SystemInit+0x20>)
 8001770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800178e:	490e      	ldr	r1, [pc, #56]	; (80017c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a4:	4c0b      	ldr	r4, [pc, #44]	; (80017d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b2:	f7ff ffd7 	bl	8001764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f00a fe8b 	bl	800c4d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ba:	f7fe ff31 	bl	8000620 <main>
  bx  lr    
 80017be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80017cc:	0800d5dc 	.word	0x0800d5dc
  ldr r2, =_sbss
 80017d0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80017d4:	20008e08 	.word	0x20008e08

080017d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC_IRQHandler>
	...

080017dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <HAL_Init+0x40>)
 80017e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_Init+0x40>)
 80017f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_Init+0x40>)
 80017fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f8fc 	bl	8001a02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fe4c 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001810:	f7ff faec 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023c00 	.word	0x40023c00

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	200005b4 	.word	0x200005b4

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200005b4 	.word	0x200005b4

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ffee 	bl	8001848 <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffde 	bl	8001848 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ff4c 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2a:	f7ff ff61 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	6978      	ldr	r0, [r7, #20]
 8001a36:	f7ff ffb1 	bl	800199c <NVIC_EncodePriority>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff80 	bl	8001948 <__NVIC_SetPriority>
}
 8001a48:	bf00      	nop
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff54 	bl	800190c <__NVIC_EnableIRQ>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	795b      	ldrb	r3, [r3, #5]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff f9d8 	bl	8000e44 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e03b      	b.n	8001b2e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff f9dc 	bl	8000e88 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af4:	f023 0107 	bic.w	r1, r3, #7
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68d1      	ldr	r1, [r2, #12]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	430b      	orrs	r3, r1
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d026      	beq.n	8001ba6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d021      	beq.n	8001ba6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b70:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d026      	beq.n	8001bfe <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d021      	beq.n	8001bfe <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	f043 0202 	orr.w	r2, r3, #2
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2204      	movs	r2, #4
 8001be2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d026      	beq.n	8001c56 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d021      	beq.n	8001c56 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c20:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2208      	movs	r2, #8
 8001c28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	f043 0204 	orr.w	r2, r3, #4
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00e      	beq.n	8001c88 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c78:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f853 	bl	8001d2e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d024      	beq.n	8001cdc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01f      	beq.n	8001cdc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001caa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d01f      	beq.n	8001d26 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01a      	beq.n	8001d26 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2210      	movs	r2, #16
 8001d06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f80e 	bl	8001d42 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_DMA2D_ConfigLayer+0x20>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e079      	b.n	8001e6c <HAL_DMA2D_ConfigLayer+0x114>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001da2:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_DMA2D_ConfigLayer+0x120>)
 8001da4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d003      	beq.n	8001db6 <HAL_DMA2D_ConfigLayer+0x5e>
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b09      	cmp	r3, #9
 8001db4:	d107      	bne.n	8001dc6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e005      	b.n	8001dd2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	061b      	lsls	r3, r3, #24
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d120      	bne.n	8001e1a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	ea02 0103 	and.w	r1, r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b0a      	cmp	r3, #10
 8001e00:	d003      	beq.n	8001e0a <HAL_DMA2D_ConfigLayer+0xb2>
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b09      	cmp	r3, #9
 8001e08:	d127      	bne.n	8001e5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
 8001e18:	e01f      	b.n	8001e5a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	ea02 0103 	and.w	r1, r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b0a      	cmp	r3, #10
 8001e42:	d003      	beq.n	8001e4c <HAL_DMA2D_ConfigLayer+0xf4>
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b09      	cmp	r3, #9
 8001e4a:	d106      	bne.n	8001e5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e58:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	ff03000f 	.word	0xff03000f

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e177      	b.n	8002188 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8166 	bne.w	8002182 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80c0 	beq.w	8002182 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a65      	ldr	r2, [pc, #404]	; (80021a0 <HAL_GPIO_Init+0x324>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201e:	4a61      	ldr	r2, [pc, #388]	; (80021a4 <HAL_GPIO_Init+0x328>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_GPIO_Init+0x32c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d037      	beq.n	80020ba <HAL_GPIO_Init+0x23e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a57      	ldr	r2, [pc, #348]	; (80021ac <HAL_GPIO_Init+0x330>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d031      	beq.n	80020b6 <HAL_GPIO_Init+0x23a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a56      	ldr	r2, [pc, #344]	; (80021b0 <HAL_GPIO_Init+0x334>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02b      	beq.n	80020b2 <HAL_GPIO_Init+0x236>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a55      	ldr	r2, [pc, #340]	; (80021b4 <HAL_GPIO_Init+0x338>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d025      	beq.n	80020ae <HAL_GPIO_Init+0x232>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a54      	ldr	r2, [pc, #336]	; (80021b8 <HAL_GPIO_Init+0x33c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01f      	beq.n	80020aa <HAL_GPIO_Init+0x22e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a53      	ldr	r2, [pc, #332]	; (80021bc <HAL_GPIO_Init+0x340>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d019      	beq.n	80020a6 <HAL_GPIO_Init+0x22a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a52      	ldr	r2, [pc, #328]	; (80021c0 <HAL_GPIO_Init+0x344>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_GPIO_Init+0x226>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a51      	ldr	r2, [pc, #324]	; (80021c4 <HAL_GPIO_Init+0x348>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00d      	beq.n	800209e <HAL_GPIO_Init+0x222>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a50      	ldr	r2, [pc, #320]	; (80021c8 <HAL_GPIO_Init+0x34c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x21e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4f      	ldr	r2, [pc, #316]	; (80021cc <HAL_GPIO_Init+0x350>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_GPIO_Init+0x21a>
 8002092:	2309      	movs	r3, #9
 8002094:	e012      	b.n	80020bc <HAL_GPIO_Init+0x240>
 8002096:	230a      	movs	r3, #10
 8002098:	e010      	b.n	80020bc <HAL_GPIO_Init+0x240>
 800209a:	2308      	movs	r3, #8
 800209c:	e00e      	b.n	80020bc <HAL_GPIO_Init+0x240>
 800209e:	2307      	movs	r3, #7
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020a2:	2306      	movs	r3, #6
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020ba:	2300      	movs	r3, #0
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020cc:	4935      	ldr	r1, [pc, #212]	; (80021a4 <HAL_GPIO_Init+0x328>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_GPIO_Init+0x354>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fe:	4a34      	ldr	r2, [pc, #208]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002128:	4a29      	ldr	r2, [pc, #164]	; (80021d0 <HAL_GPIO_Init+0x354>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800212e:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_GPIO_Init+0x354>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_GPIO_Init+0x354>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	f67f ae84 	bls.w	8001e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40021400 	.word	0x40021400
 80021c0:	40021800 	.word	0x40021800
 80021c4:	40021c00 	.word	0x40021c00
 80021c8:	40022000 	.word	0x40022000
 80021cc:	40022400 	.word	0x40022400
 80021d0:	40013c00 	.word	0x40013c00

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f0:	e003      	b.n	80021fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	041a      	lsls	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	619a      	str	r2, [r3, #24]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002208:	b08f      	sub	sp, #60	; 0x3c
 800220a:	af0a      	add	r7, sp, #40	; 0x28
 800220c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e054      	b.n	80022c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f009 fe92 	bl	800bf5c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2203      	movs	r2, #3
 800223c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f004 f9cc 	bl	80065f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	687e      	ldr	r6, [r7, #4]
 8002264:	466d      	mov	r5, sp
 8002266:	f106 0410 	add.w	r4, r6, #16
 800226a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002276:	e885 0003 	stmia.w	r5, {r0, r1}
 800227a:	1d33      	adds	r3, r6, #4
 800227c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227e:	6838      	ldr	r0, [r7, #0]
 8002280:	f004 f946 	bl	8006510 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f004 f9c3 	bl	8006616 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	687e      	ldr	r6, [r7, #4]
 8002298:	466d      	mov	r5, sp
 800229a:	f106 0410 	add.w	r4, r6, #16
 800229e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ae:	1d33      	adds	r3, r6, #4
 80022b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b2:	6838      	ldr	r0, [r7, #0]
 80022b4:	f004 fb4c 	bl	8006950 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80022ca:	b590      	push	{r4, r7, lr}
 80022cc:	b089      	sub	sp, #36	; 0x24
 80022ce:	af04      	add	r7, sp, #16
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	4608      	mov	r0, r1
 80022d4:	4611      	mov	r1, r2
 80022d6:	461a      	mov	r2, r3
 80022d8:	4603      	mov	r3, r0
 80022da:	70fb      	strb	r3, [r7, #3]
 80022dc:	460b      	mov	r3, r1
 80022de:	70bb      	strb	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_HCD_HC_Init+0x28>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e076      	b.n	80023e0 <HAL_HCD_HC_Init+0x116>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333d      	adds	r3, #61	; 0x3d
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3338      	adds	r3, #56	; 0x38
 800231a:	787a      	ldrb	r2, [r7, #1]
 800231c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3340      	adds	r3, #64	; 0x40
 800232c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800232e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3339      	adds	r3, #57	; 0x39
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	333f      	adds	r3, #63	; 0x3f
 8002350:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002354:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	78ba      	ldrb	r2, [r7, #2]
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	b2d0      	uxtb	r0, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	333a      	adds	r3, #58	; 0x3a
 800236c:	4602      	mov	r2, r0
 800236e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002370:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002374:	2b00      	cmp	r3, #0
 8002376:	da09      	bge.n	800238c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	333b      	adds	r3, #59	; 0x3b
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e008      	b.n	800239e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	333b      	adds	r3, #59	; 0x3b
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	333c      	adds	r3, #60	; 0x3c
 80023ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023b0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	787c      	ldrb	r4, [r7, #1]
 80023b8:	78ba      	ldrb	r2, [r7, #2]
 80023ba:	78f9      	ldrb	r1, [r7, #3]
 80023bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	4623      	mov	r3, r4
 80023ce:	f004 fc45 	bl	8006c5c <USB_HC_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80023de:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}

080023e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_HCD_HC_Halt+0x1e>
 8002402:	2302      	movs	r3, #2
 8002404:	e00f      	b.n	8002426 <HAL_HCD_HC_Halt+0x3e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f004 fe95 	bl	8007146 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	4608      	mov	r0, r1
 800243a:	4611      	mov	r1, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4603      	mov	r3, r0
 8002440:	70fb      	strb	r3, [r7, #3]
 8002442:	460b      	mov	r3, r1
 8002444:	70bb      	strb	r3, [r7, #2]
 8002446:	4613      	mov	r3, r2
 8002448:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	333b      	adds	r3, #59	; 0x3b
 8002458:	78ba      	ldrb	r2, [r7, #2]
 800245a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	333f      	adds	r3, #63	; 0x3f
 800246a:	787a      	ldrb	r2, [r7, #1]
 800246c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800246e:	7c3b      	ldrb	r3, [r7, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d112      	bne.n	800249a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3342      	adds	r3, #66	; 0x42
 8002482:	2203      	movs	r2, #3
 8002484:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	333d      	adds	r3, #61	; 0x3d
 8002494:	7f3a      	ldrb	r2, [r7, #28]
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	e008      	b.n	80024ac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3342      	adds	r3, #66	; 0x42
 80024a8:	2202      	movs	r2, #2
 80024aa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	f200 80c6 	bhi.w	8002640 <HAL_HCD_HC_SubmitRequest+0x210>
 80024b4:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	080024cd 	.word	0x080024cd
 80024c0:	0800262d 	.word	0x0800262d
 80024c4:	08002531 	.word	0x08002531
 80024c8:	080025af 	.word	0x080025af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80024cc:	7c3b      	ldrb	r3, [r7, #16]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	f040 80b8 	bne.w	8002644 <HAL_HCD_HC_SubmitRequest+0x214>
 80024d4:	78bb      	ldrb	r3, [r7, #2]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 80b4 	bne.w	8002644 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80024dc:	8b3b      	ldrh	r3, [r7, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d108      	bne.n	80024f4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	3355      	adds	r3, #85	; 0x55
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3355      	adds	r3, #85	; 0x55
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3342      	adds	r3, #66	; 0x42
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800251a:	e093      	b.n	8002644 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3342      	adds	r3, #66	; 0x42
 800252a:	2202      	movs	r2, #2
 800252c:	701a      	strb	r2, [r3, #0]
      break;
 800252e:	e089      	b.n	8002644 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002530:	78bb      	ldrb	r3, [r7, #2]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11d      	bne.n	8002572 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	3355      	adds	r3, #85	; 0x55
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3342      	adds	r3, #66	; 0x42
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800255c:	e073      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	3342      	adds	r3, #66	; 0x42
 800256c:	2202      	movs	r2, #2
 800256e:	701a      	strb	r2, [r3, #0]
      break;
 8002570:	e069      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	3354      	adds	r3, #84	; 0x54
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	3342      	adds	r3, #66	; 0x42
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
      break;
 8002598:	e055      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3342      	adds	r3, #66	; 0x42
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
      break;
 80025ac:	e04b      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025ae:	78bb      	ldrb	r3, [r7, #2]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11d      	bne.n	80025f0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3355      	adds	r3, #85	; 0x55
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3342      	adds	r3, #66	; 0x42
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025da:	e034      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3342      	adds	r3, #66	; 0x42
 80025ea:	2202      	movs	r2, #2
 80025ec:	701a      	strb	r2, [r3, #0]
      break;
 80025ee:	e02a      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3354      	adds	r3, #84	; 0x54
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3342      	adds	r3, #66	; 0x42
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
      break;
 8002616:	e016      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3342      	adds	r3, #66	; 0x42
 8002626:	2202      	movs	r2, #2
 8002628:	701a      	strb	r2, [r3, #0]
      break;
 800262a:	e00c      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3342      	adds	r3, #66	; 0x42
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
      break;
 800263e:	e002      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002640:	bf00      	nop
 8002642:	e000      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002644:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	3344      	adds	r3, #68	; 0x44
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	8b3a      	ldrh	r2, [r7, #24]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	202c      	movs	r0, #44	; 0x2c
 8002660:	fb00 f303 	mul.w	r3, r0, r3
 8002664:	440b      	add	r3, r1
 8002666:	334c      	adds	r3, #76	; 0x4c
 8002668:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3360      	adds	r3, #96	; 0x60
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3350      	adds	r3, #80	; 0x50
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3339      	adds	r3, #57	; 0x39
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3361      	adds	r3, #97	; 0x61
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	222c      	movs	r2, #44	; 0x2c
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	3338      	adds	r3, #56	; 0x38
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	18d1      	adds	r1, r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	f004 fbe8 	bl	8006ea0 <USB_HC_StartXfer>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop

080026dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 f8e9 	bl	80068ca <USB_GetMode>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 80f6 	bne.w	80028ec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f004 f8cd 	bl	80068a4 <USB_ReadInterrupts>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80ec 	beq.w	80028ea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f004 f8c4 	bl	80068a4 <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002726:	d104      	bne.n	8002732 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002730:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f004 f8b4 	bl	80068a4 <USB_ReadInterrupts>
 800273c:	4603      	mov	r3, r0
 800273e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002746:	d104      	bne.n	8002752 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002750:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f004 f8a4 	bl	80068a4 <USB_ReadInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002766:	d104      	bne.n	8002772 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002770:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f004 f894 	bl	80068a4 <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d103      	bne.n	800278e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2202      	movs	r2, #2
 800278c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f004 f886 	bl	80068a4 <USB_ReadInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800279e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a2:	d11c      	bne.n	80027de <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80027be:	2110      	movs	r1, #16
 80027c0:	6938      	ldr	r0, [r7, #16]
 80027c2:	f003 ff75 	bl	80066b0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80027c6:	6938      	ldr	r0, [r7, #16]
 80027c8:	f003 ffa6 	bl	8006718 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 f97c 	bl	8006ad0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f009 fc39 	bl	800c050 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 f85e 	bl	80068a4 <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f2:	d102      	bne.n	80027fa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f001 f89e 	bl	8003936 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 f850 	bl	80068a4 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b08      	cmp	r3, #8
 800280c:	d106      	bne.n	800281c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f009 fc02 	bl	800c018 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2208      	movs	r2, #8
 800281a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f004 f83f 	bl	80068a4 <USB_ReadInterrupts>
 8002826:	4603      	mov	r3, r0
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b10      	cmp	r3, #16
 800282e:	d101      	bne.n	8002834 <HAL_HCD_IRQHandler+0x158>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_HCD_IRQHandler+0x15a>
 8002834:	2300      	movs	r3, #0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0210 	bic.w	r2, r2, #16
 8002848:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 ffa1 	bl	8003792 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0210 	orr.w	r2, r2, #16
 800285e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f004 f81d 	bl	80068a4 <USB_ReadInterrupts>
 800286a:	4603      	mov	r3, r0
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002874:	d13a      	bne.n	80028ec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f004 fc52 	bl	8007124 <USB_HC_ReadInterrupt>
 8002880:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e025      	b.n	80028d4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d018      	beq.n	80028ce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b2:	d106      	bne.n	80028c2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8ab 	bl	8002a16 <HCD_HC_IN_IRQHandler>
 80028c0:	e005      	b.n	80028ce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	4619      	mov	r1, r3
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fbf9 	bl	80030c0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d3d4      	bcc.n	8002888 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e6:	615a      	str	r2, [r3, #20]
 80028e8:	e000      	b.n	80028ec <HAL_HCD_IRQHandler+0x210>
      return;
 80028ea:	bf00      	nop
    }
  }
}
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_HCD_Start+0x16>
 8002904:	2302      	movs	r3, #2
 8002906:	e013      	b.n	8002930 <HAL_HCD_Start+0x3e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f004 f93e 	bl	8006b98 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f003 fe56 	bl	80065d2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_HCD_Stop+0x16>
 800294a:	2302      	movs	r3, #2
 800294c:	e00d      	b.n	800296a <HAL_HCD_Stop+0x32>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fd2c 	bl	80073b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f004 f8e0 	bl	8006b44 <USB_ResetPort>
 8002984:	4603      	mov	r3, r0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3360      	adds	r3, #96	; 0x60
 80029a8:	781b      	ldrb	r3, [r3, #0]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3350      	adds	r3, #80	; 0x50
 80029d0:	681b      	ldr	r3, [r3, #0]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 f924 	bl	8006c38 <USB_GetCurrentFrame>
 80029f0:	4603      	mov	r3, r0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f004 f8ff 	bl	8006c0a <USB_GetHostSpeed>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d11a      	bne.n	8002a7c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	461a      	mov	r2, r3
 8002a54:	2304      	movs	r3, #4
 8002a56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3361      	adds	r3, #97	; 0x61
 8002a66:	2206      	movs	r2, #6
 8002a68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 fb66 	bl	8007146 <USB_HC_Halt>
 8002a7a:	e0af      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a92:	d11b      	bne.n	8002acc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3361      	adds	r3, #97	; 0x61
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 fb3e 	bl	8007146 <USB_HC_Halt>
 8002aca:	e087      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d109      	bne.n	8002af6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	461a      	mov	r2, r3
 8002af0:	2320      	movs	r3, #32
 8002af2:	6093      	str	r3, [r2, #8]
 8002af4:	e072      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d11a      	bne.n	8002b42 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3361      	adds	r3, #97	; 0x61
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 fb03 	bl	8007146 <USB_HC_Halt>
 8002b40:	e04c      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b58:	d11b      	bne.n	8002b92 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	461a      	mov	r2, r3
 8002b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3361      	adds	r3, #97	; 0x61
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 fadb 	bl	8007146 <USB_HC_Halt>
 8002b90:	e024      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b80      	cmp	r3, #128	; 0x80
 8002ba6:	d119      	bne.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3361      	adds	r3, #97	; 0x61
 8002bc8:	2206      	movs	r2, #6
 8002bca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f004 fab5 	bl	8007146 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf2:	d112      	bne.n	8002c1a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 faa1 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c16:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c18:	e24e      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 80df 	bne.w	8002df0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3348      	adds	r3, #72	; 0x48
 8002c48:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	0159      	lsls	r1, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c5c:	1ad2      	subs	r2, r2, r3
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	202c      	movs	r0, #44	; 0x2c
 8002c64:	fb00 f303 	mul.w	r3, r0, r3
 8002c68:	440b      	add	r3, r1
 8002c6a:	3350      	adds	r3, #80	; 0x50
 8002c6c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3361      	adds	r3, #97	; 0x61
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	335c      	adds	r3, #92	; 0x5c
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	333f      	adds	r3, #63	; 0x3f
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	333f      	adds	r3, #63	; 0x3f
 8002cc6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d111      	bne.n	8002cf0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 fa35 	bl	8007146 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2310      	movs	r3, #16
 8002cec:	6093      	str	r3, [r2, #8]
 8002cee:	e03a      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	333f      	adds	r3, #63	; 0x3f
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d009      	beq.n	8002d18 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	333f      	adds	r3, #63	; 0x3f
 8002d12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d126      	bne.n	8002d66 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	0151      	lsls	r1, r2, #5
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	440a      	add	r2, r1
 8002d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d36:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3360      	adds	r3, #96	; 0x60
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	b2d9      	uxtb	r1, r3
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	202c      	movs	r0, #44	; 0x2c
 8002d54:	fb00 f303 	mul.w	r3, r0, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3360      	adds	r3, #96	; 0x60
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f009 f983 	bl	800c06c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d12b      	bne.n	8002dc6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3348      	adds	r3, #72	; 0x48
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	202c      	movs	r0, #44	; 0x2c
 8002d84:	fb00 f202 	mul.w	r2, r0, r2
 8002d88:	440a      	add	r2, r1
 8002d8a:	3240      	adds	r2, #64	; 0x40
 8002d8c:	8812      	ldrh	r2, [r2, #0]
 8002d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 818e 	beq.w	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3354      	adds	r3, #84	; 0x54
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	f083 0301 	eor.w	r3, r3, #1
 8002db0:	b2d8      	uxtb	r0, r3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3354      	adds	r3, #84	; 0x54
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	701a      	strb	r2, [r3, #0]
}
 8002dc4:	e178      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3354      	adds	r3, #84	; 0x54
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	f083 0301 	eor.w	r3, r3, #1
 8002dda:	b2d8      	uxtb	r0, r3
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3354      	adds	r3, #84	; 0x54
 8002dea:	4602      	mov	r2, r0
 8002dec:	701a      	strb	r2, [r3, #0]
}
 8002dee:	e163      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	f040 80f6 	bne.w	8002ff4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3361      	adds	r3, #97	; 0x61
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d109      	bne.n	8002e30 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	3360      	adds	r3, #96	; 0x60
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e0c9      	b.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3361      	adds	r3, #97	; 0x61
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b05      	cmp	r3, #5
 8002e42:	d109      	bne.n	8002e58 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3360      	adds	r3, #96	; 0x60
 8002e52:	2205      	movs	r2, #5
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e0b5      	b.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3361      	adds	r3, #97	; 0x61
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b06      	cmp	r3, #6
 8002e6a:	d009      	beq.n	8002e80 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3361      	adds	r3, #97	; 0x61
 8002e7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d150      	bne.n	8002f22 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	335c      	adds	r3, #92	; 0x5c
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	202c      	movs	r0, #44	; 0x2c
 8002e98:	fb00 f303 	mul.w	r3, r0, r3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	335c      	adds	r3, #92	; 0x5c
 8002ea0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	335c      	adds	r3, #92	; 0x5c
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d912      	bls.n	8002edc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	335c      	adds	r3, #92	; 0x5c
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3360      	adds	r3, #96	; 0x60
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eda:	e073      	b.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3360      	adds	r3, #96	; 0x60
 8002eea:	2202      	movs	r2, #2
 8002eec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f04:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f0c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f20:	e050      	b.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3361      	adds	r3, #97	; 0x61
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d122      	bne.n	8002f7c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	3360      	adds	r3, #96	; 0x60
 8002f44:	2202      	movs	r2, #2
 8002f46:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f5e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f66:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e023      	b.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3361      	adds	r3, #97	; 0x61
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b07      	cmp	r3, #7
 8002f8e:	d119      	bne.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	335c      	adds	r3, #92	; 0x5c
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	202c      	movs	r0, #44	; 0x2c
 8002fa8:	fb00 f303 	mul.w	r3, r0, r3
 8002fac:	440b      	add	r3, r1
 8002fae:	335c      	adds	r3, #92	; 0x5c
 8002fb0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3360      	adds	r3, #96	; 0x60
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	b2d9      	uxtb	r1, r3
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	202c      	movs	r0, #44	; 0x2c
 8002fe0:	fb00 f303 	mul.w	r3, r0, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3360      	adds	r3, #96	; 0x60
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f009 f83d 	bl	800c06c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ff2:	e061      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b10      	cmp	r3, #16
 8003008:	d156      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	333f      	adds	r3, #63	; 0x3f
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d111      	bne.n	8003042 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	335c      	adds	r3, #92	; 0x5c
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f004 f883 	bl	8007146 <USB_HC_Halt>
 8003040:	e031      	b.n	80030a6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	333f      	adds	r3, #63	; 0x3f
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	333f      	adds	r3, #63	; 0x3f
 8003064:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003066:	2b02      	cmp	r3, #2
 8003068:	d11d      	bne.n	80030a6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	335c      	adds	r3, #92	; 0x5c
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d110      	bne.n	80030a6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	3361      	adds	r3, #97	; 0x61
 8003092:	2203      	movs	r2, #3
 8003094:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f004 f850 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b2:	461a      	mov	r2, r3
 80030b4:	2310      	movs	r3, #16
 80030b6:	6093      	str	r3, [r2, #8]
}
 80030b8:	bf00      	nop
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d11a      	bne.n	8003126 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	461a      	mov	r2, r3
 80030fe:	2304      	movs	r3, #4
 8003100:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3361      	adds	r3, #97	; 0x61
 8003110:	2206      	movs	r2, #6
 8003112:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f004 f811 	bl	8007146 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003124:	e331      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b20      	cmp	r3, #32
 800313a:	d12e      	bne.n	800319a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	2320      	movs	r3, #32
 800314c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	333d      	adds	r3, #61	; 0x3d
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b01      	cmp	r3, #1
 8003160:	f040 8313 	bne.w	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	333d      	adds	r3, #61	; 0x3d
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	3360      	adds	r3, #96	; 0x60
 8003184:	2202      	movs	r2, #2
 8003186:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f003 ffd7 	bl	8007146 <USB_HC_Halt>
}
 8003198:	e2f7      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b0:	d112      	bne.n	80031d8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031be:	461a      	mov	r2, r3
 80031c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031c4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 ffb8 	bl	8007146 <USB_HC_Halt>
}
 80031d6:	e2d8      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d140      	bne.n	8003270 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	335c      	adds	r3, #92	; 0x5c
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d111      	bne.n	800323a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	333d      	adds	r3, #61	; 0x3d
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003234:	461a      	mov	r2, r3
 8003236:	2340      	movs	r3, #64	; 0x40
 8003238:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003246:	461a      	mov	r2, r3
 8003248:	2301      	movs	r3, #1
 800324a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3361      	adds	r3, #97	; 0x61
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f003 ff6c 	bl	8007146 <USB_HC_Halt>
}
 800326e:	e28c      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d12c      	bne.n	80032e0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3361      	adds	r3, #97	; 0x61
 8003294:	2204      	movs	r2, #4
 8003296:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	333d      	adds	r3, #61	; 0x3d
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	335c      	adds	r3, #92	; 0x5c
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 ff3d 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	461a      	mov	r2, r3
 80032da:	2340      	movs	r3, #64	; 0x40
 80032dc:	6093      	str	r3, [r2, #8]
}
 80032de:	e254      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d11a      	bne.n	800332c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	461a      	mov	r2, r3
 8003304:	2308      	movs	r3, #8
 8003306:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3361      	adds	r3, #97	; 0x61
 8003316:	2205      	movs	r2, #5
 8003318:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f003 ff0e 	bl	8007146 <USB_HC_Halt>
}
 800332a:	e22e      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b10      	cmp	r3, #16
 8003340:	d140      	bne.n	80033c4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	335c      	adds	r3, #92	; 0x5c
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3361      	adds	r3, #97	; 0x61
 8003362:	2203      	movs	r2, #3
 8003364:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	333d      	adds	r3, #61	; 0x3d
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d112      	bne.n	80033a0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	333c      	adds	r3, #60	; 0x3c
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d108      	bne.n	80033a0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	333d      	adds	r3, #61	; 0x3d
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fecb 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	2310      	movs	r3, #16
 80033c0:	6093      	str	r3, [r2, #8]
}
 80033c2:	e1e2      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d164      	bne.n	80034a4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d111      	bne.n	8003406 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	3361      	adds	r3, #97	; 0x61
 80033f0:	2206      	movs	r2, #6
 80033f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 fea1 	bl	8007146 <USB_HC_Halt>
 8003404:	e044      	b.n	8003490 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	335c      	adds	r3, #92	; 0x5c
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	202c      	movs	r0, #44	; 0x2c
 800341e:	fb00 f303 	mul.w	r3, r0, r3
 8003422:	440b      	add	r3, r1
 8003424:	335c      	adds	r3, #92	; 0x5c
 8003426:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	335c      	adds	r3, #92	; 0x5c
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d920      	bls.n	800347e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	335c      	adds	r3, #92	; 0x5c
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3360      	adds	r3, #96	; 0x60
 800345c:	2204      	movs	r2, #4
 800345e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	b2d9      	uxtb	r1, r3
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	202c      	movs	r0, #44	; 0x2c
 800346a:	fb00 f303 	mul.w	r3, r0, r3
 800346e:	4413      	add	r3, r2
 8003470:	3360      	adds	r3, #96	; 0x60
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f008 fdf8 	bl	800c06c <HAL_HCD_HC_NotifyURBChange_Callback>
 800347c:	e008      	b.n	8003490 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	3360      	adds	r3, #96	; 0x60
 800348c:	2202      	movs	r2, #2
 800348e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	461a      	mov	r2, r3
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	6093      	str	r3, [r2, #8]
}
 80034a2:	e172      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ba:	d11b      	bne.n	80034f4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3361      	adds	r3, #97	; 0x61
 80034ca:	2208      	movs	r2, #8
 80034cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 fe34 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ea:	461a      	mov	r2, r3
 80034ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f0:	6093      	str	r3, [r2, #8]
}
 80034f2:	e14a      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	f040 813f 	bne.w	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	3361      	adds	r3, #97	; 0x61
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d17d      	bne.n	800361c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	3360      	adds	r3, #96	; 0x60
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	333f      	adds	r3, #63	; 0x3f
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d00a      	beq.n	800355c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	333f      	adds	r3, #63	; 0x3f
 8003554:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003556:	2b03      	cmp	r3, #3
 8003558:	f040 8100 	bne.w	800375c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d113      	bne.n	800358c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	3355      	adds	r3, #85	; 0x55
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f083 0301 	eor.w	r3, r3, #1
 8003578:	b2d8      	uxtb	r0, r3
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	212c      	movs	r1, #44	; 0x2c
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	3355      	adds	r3, #85	; 0x55
 8003588:	4602      	mov	r2, r0
 800358a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b01      	cmp	r3, #1
 8003592:	f040 80e3 	bne.w	800375c <HCD_HC_OUT_IRQHandler+0x69c>
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	334c      	adds	r3, #76	; 0x4c
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80d8 	beq.w	800375c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	334c      	adds	r3, #76	; 0x4c
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	202c      	movs	r0, #44	; 0x2c
 80035c2:	fb00 f202 	mul.w	r2, r0, r2
 80035c6:	440a      	add	r2, r1
 80035c8:	3240      	adds	r2, #64	; 0x40
 80035ca:	8812      	ldrh	r2, [r2, #0]
 80035cc:	4413      	add	r3, r2
 80035ce:	3b01      	subs	r3, #1
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	202c      	movs	r0, #44	; 0x2c
 80035d6:	fb00 f202 	mul.w	r2, r0, r2
 80035da:	440a      	add	r2, r1
 80035dc:	3240      	adds	r2, #64	; 0x40
 80035de:	8812      	ldrh	r2, [r2, #0]
 80035e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80b5 	beq.w	800375c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	212c      	movs	r1, #44	; 0x2c
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	3355      	adds	r3, #85	; 0x55
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	f083 0301 	eor.w	r3, r3, #1
 8003606:	b2d8      	uxtb	r0, r3
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	3355      	adds	r3, #85	; 0x55
 8003616:	4602      	mov	r2, r0
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e09f      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	3361      	adds	r3, #97	; 0x61
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d109      	bne.n	8003644 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3360      	adds	r3, #96	; 0x60
 800363e:	2202      	movs	r2, #2
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e08b      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	212c      	movs	r1, #44	; 0x2c
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	3361      	adds	r3, #97	; 0x61
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d109      	bne.n	800366c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3360      	adds	r3, #96	; 0x60
 8003666:	2202      	movs	r2, #2
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e077      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3361      	adds	r3, #97	; 0x61
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d109      	bne.n	8003694 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	212c      	movs	r1, #44	; 0x2c
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	3360      	adds	r3, #96	; 0x60
 800368e:	2205      	movs	r2, #5
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e063      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	212c      	movs	r1, #44	; 0x2c
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3361      	adds	r3, #97	; 0x61
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b06      	cmp	r3, #6
 80036a6:	d009      	beq.n	80036bc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3361      	adds	r3, #97	; 0x61
 80036b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d14f      	bne.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	335c      	adds	r3, #92	; 0x5c
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	202c      	movs	r0, #44	; 0x2c
 80036d4:	fb00 f303 	mul.w	r3, r0, r3
 80036d8:	440b      	add	r3, r1
 80036da:	335c      	adds	r3, #92	; 0x5c
 80036dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	335c      	adds	r3, #92	; 0x5c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d912      	bls.n	8003718 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	335c      	adds	r3, #92	; 0x5c
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	212c      	movs	r1, #44	; 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	3360      	adds	r3, #96	; 0x60
 8003712:	2204      	movs	r2, #4
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e021      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	212c      	movs	r1, #44	; 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	3360      	adds	r3, #96	; 0x60
 8003726:	2202      	movs	r2, #2
 8003728:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003740:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003748:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	4413      	add	r3, r2
 8003752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003756:	461a      	mov	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003768:	461a      	mov	r2, r3
 800376a:	2302      	movs	r3, #2
 800376c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	b2d9      	uxtb	r1, r3
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	202c      	movs	r0, #44	; 0x2c
 8003778:	fb00 f303 	mul.w	r3, r0, r3
 800377c:	4413      	add	r3, r2
 800377e:	3360      	adds	r3, #96	; 0x60
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f008 fc71 	bl	800c06c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800378a:	bf00      	nop
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b08a      	sub	sp, #40	; 0x28
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	0c5b      	lsrs	r3, r3, #17
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d004      	beq.n	80037d8 <HCD_RXQLVL_IRQHandler+0x46>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	f000 80a9 	beq.w	8003928 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037d6:	e0aa      	b.n	800392e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80a6 	beq.w	800392c <HCD_RXQLVL_IRQHandler+0x19a>
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3344      	adds	r3, #68	; 0x44
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 809b 	beq.w	800392c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	3350      	adds	r3, #80	; 0x50
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	441a      	add	r2, r3
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	202c      	movs	r0, #44	; 0x2c
 8003810:	fb00 f303 	mul.w	r3, r0, r3
 8003814:	440b      	add	r3, r1
 8003816:	334c      	adds	r3, #76	; 0x4c
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d87a      	bhi.n	8003914 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	212c      	movs	r1, #44	; 0x2c
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	4413      	add	r3, r2
 800382e:	3344      	adds	r3, #68	; 0x44
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	b292      	uxth	r2, r2
 8003836:	4619      	mov	r1, r3
 8003838:	f002 ffdc 	bl	80067f4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3344      	adds	r3, #68	; 0x44
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	441a      	add	r2, r3
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	202c      	movs	r0, #44	; 0x2c
 8003856:	fb00 f303 	mul.w	r3, r0, r3
 800385a:	440b      	add	r3, r1
 800385c:	3344      	adds	r3, #68	; 0x44
 800385e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	3350      	adds	r3, #80	; 0x50
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	441a      	add	r2, r3
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	202c      	movs	r0, #44	; 0x2c
 800387a:	fb00 f303 	mul.w	r3, r0, r3
 800387e:	440b      	add	r3, r1
 8003880:	3350      	adds	r3, #80	; 0x50
 8003882:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	0cdb      	lsrs	r3, r3, #19
 8003894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003898:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	3340      	adds	r3, #64	; 0x40
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d13c      	bne.n	800392c <HCD_RXQLVL_IRQHandler+0x19a>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d039      	beq.n	800392c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038d6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	212c      	movs	r1, #44	; 0x2c
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	3354      	adds	r3, #84	; 0x54
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	f083 0301 	eor.w	r3, r3, #1
 80038fe:	b2d8      	uxtb	r0, r3
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	3354      	adds	r3, #84	; 0x54
 800390e:	4602      	mov	r2, r0
 8003910:	701a      	strb	r2, [r3, #0]
      break;
 8003912:	e00b      	b.n	800392c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	3360      	adds	r3, #96	; 0x60
 8003922:	2204      	movs	r2, #4
 8003924:	701a      	strb	r2, [r3, #0]
      break;
 8003926:	e001      	b.n	800392c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003928:	bf00      	nop
 800392a:	e000      	b.n	800392e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800392c:	bf00      	nop
  }
}
 800392e:	bf00      	nop
 8003930:	3728      	adds	r7, #40	; 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003962:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d10b      	bne.n	8003986 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d102      	bne.n	800397e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f008 fb5b 	bl	800c034 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b08      	cmp	r3, #8
 800398e:	d132      	bne.n	80039f6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f043 0308 	orr.w	r3, r3, #8
 8003996:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d126      	bne.n	80039f0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d113      	bne.n	80039d2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039b4:	d106      	bne.n	80039c4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2102      	movs	r1, #2
 80039bc:	4618      	mov	r0, r3
 80039be:	f003 f887 	bl	8006ad0 <USB_InitFSLSPClkSel>
 80039c2:	e011      	b.n	80039e8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f003 f880 	bl	8006ad0 <USB_InitFSLSPClkSel>
 80039d0:	e00a      	b.n	80039e8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d106      	bne.n	80039e8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039e0:	461a      	mov	r2, r3
 80039e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039e6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f008 fb51 	bl	800c090 <HAL_HCD_PortEnabled_Callback>
 80039ee:	e002      	b.n	80039f6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f008 fb5b 	bl	800c0ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d103      	bne.n	8003a08 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f043 0320 	orr.w	r3, r3, #32
 8003a06:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	bf00      	nop
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e12b      	b.n	8003c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd fa48 	bl	8000ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2224      	movs	r2, #36	; 0x24
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a80:	f001 f966 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 8003a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4a81      	ldr	r2, [pc, #516]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d807      	bhi.n	8003aa0 <HAL_I2C_Init+0x84>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a80      	ldr	r2, [pc, #512]	; (8003c94 <HAL_I2C_Init+0x278>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bf94      	ite	ls
 8003a98:	2301      	movls	r3, #1
 8003a9a:	2300      	movhi	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e006      	b.n	8003aae <HAL_I2C_Init+0x92>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a7d      	ldr	r2, [pc, #500]	; (8003c98 <HAL_I2C_Init+0x27c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	bf94      	ite	ls
 8003aa8:	2301      	movls	r3, #1
 8003aaa:	2300      	movhi	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0e7      	b.n	8003c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a78      	ldr	r2, [pc, #480]	; (8003c9c <HAL_I2C_Init+0x280>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	0c9b      	lsrs	r3, r3, #18
 8003ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a6a      	ldr	r2, [pc, #424]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d802      	bhi.n	8003af0 <HAL_I2C_Init+0xd4>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	e009      	b.n	8003b04 <HAL_I2C_Init+0xe8>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	4a69      	ldr	r2, [pc, #420]	; (8003ca0 <HAL_I2C_Init+0x284>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	3301      	adds	r3, #1
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	495c      	ldr	r1, [pc, #368]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003b20:	428b      	cmp	r3, r1
 8003b22:	d819      	bhi.n	8003b58 <HAL_I2C_Init+0x13c>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e59      	subs	r1, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b32:	1c59      	adds	r1, r3, #1
 8003b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b38:	400b      	ands	r3, r1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_I2C_Init+0x138>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1e59      	subs	r1, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b52:	e051      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003b54:	2304      	movs	r3, #4
 8003b56:	e04f      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d111      	bne.n	8003b84 <HAL_I2C_Init+0x168>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e58      	subs	r0, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	440b      	add	r3, r1
 8003b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b72:	3301      	adds	r3, #1
 8003b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e012      	b.n	8003baa <HAL_I2C_Init+0x18e>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e58      	subs	r0, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	0099      	lsls	r1, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_Init+0x196>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e022      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_I2C_Init+0x1bc>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1e58      	subs	r0, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	440b      	add	r3, r1
 8003bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd6:	e00f      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1e58      	subs	r0, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	0099      	lsls	r1, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	6809      	ldr	r1, [r1, #0]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6911      	ldr	r1, [r2, #16]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68d2      	ldr	r2, [r2, #12]
 8003c32:	4311      	orrs	r1, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	000186a0 	.word	0x000186a0
 8003c94:	001e847f 	.word	0x001e847f
 8003c98:	003d08ff 	.word	0x003d08ff
 8003c9c:	431bde83 	.word	0x431bde83
 8003ca0:	10624dd3 	.word	0x10624dd3

08003ca4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d129      	bne.n	8003d0e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2224      	movs	r2, #36	; 0x24
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0210 	bic.w	r2, r2, #16
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e000      	b.n	8003d10 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
  }
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d12a      	bne.n	8003d8c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2224      	movs	r2, #36	; 0x24
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003d56:	89fb      	ldrh	r3, [r7, #14]
 8003d58:	f023 030f 	bic.w	r3, r3, #15
 8003d5c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	89fb      	ldrh	r3, [r7, #14]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	89fa      	ldrh	r2, [r7, #14]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0bf      	b.n	8003f2e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd f8f2 	bl	8000fac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003dde:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6999      	ldr	r1, [r3, #24]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003df4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6899      	ldr	r1, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <HAL_LTDC_Init+0x19c>)
 8003e10:	400b      	ands	r3, r1
 8003e12:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68d9      	ldr	r1, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b3e      	ldr	r3, [pc, #248]	; (8003f38 <HAL_LTDC_Init+0x19c>)
 8003e3e:	400b      	ands	r3, r1
 8003e40:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68d9      	ldr	r1, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6919      	ldr	r1, [r3, #16]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b33      	ldr	r3, [pc, #204]	; (8003f38 <HAL_LTDC_Init+0x19c>)
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6919      	ldr	r1, [r3, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6959      	ldr	r1, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <HAL_LTDC_Init+0x19c>)
 8003e9a:	400b      	ands	r3, r1
 8003e9c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6959      	ldr	r1, [r3, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ecc:	041b      	lsls	r3, r3, #16
 8003ece:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0206 	orr.w	r2, r2, #6
 8003f0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	f000f800 	.word	0xf000f800

08003f3c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d023      	beq.n	8003fa6 <HAL_LTDC_IRQHandler+0x6a>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01e      	beq.n	8003fa6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0204 	bic.w	r2, r2, #4
 8003f76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2204      	movs	r2, #4
 8003f94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f86f 	bl	8004084 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d023      	beq.n	8003ff8 <HAL_LTDC_IRQHandler+0xbc>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01e      	beq.n	8003ff8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0202 	bic.w	r2, r2, #2
 8003fc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fd8:	f043 0202 	orr.w	r2, r3, #2
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f846 	bl	8004084 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01b      	beq.n	800403a <HAL_LTDC_IRQHandler+0xfe>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d016      	beq.n	800403a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2201      	movs	r2, #1
 8004022:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f82f 	bl	8004098 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_LTDC_IRQHandler+0x140>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0208 	bic.w	r2, r2, #8
 800405c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2208      	movs	r2, #8
 8004064:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f818 	bl	80040ac <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040c0:	b5b0      	push	{r4, r5, r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_LTDC_ConfigLayer+0x1a>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e02c      	b.n	8004134 <HAL_LTDC_ConfigLayer+0x74>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2134      	movs	r1, #52	; 0x34
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4614      	mov	r4, r2
 80040fe:	461d      	mov	r5, r3
 8004100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800410a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f811 	bl	800413c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bdb0      	pop	{r4, r5, r7, pc}

0800413c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004158:	4413      	add	r3, r2
 800415a:	041b      	lsls	r3, r3, #16
 800415c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	01db      	lsls	r3, r3, #7
 8004168:	4413      	add	r3, r2
 800416a:	3384      	adds	r3, #132	; 0x84
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	4611      	mov	r1, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	01d2      	lsls	r2, r2, #7
 8004178:	440a      	add	r2, r1
 800417a:	3284      	adds	r2, #132	; 0x84
 800417c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004180:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004192:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004194:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4619      	mov	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	01db      	lsls	r3, r3, #7
 80041a0:	440b      	add	r3, r1
 80041a2:	3384      	adds	r3, #132	; 0x84
 80041a4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ba:	4413      	add	r3, r2
 80041bc:	041b      	lsls	r3, r3, #16
 80041be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	01db      	lsls	r3, r3, #7
 80041ca:	4413      	add	r3, r2
 80041cc:	3384      	adds	r3, #132	; 0x84
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	4611      	mov	r1, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	01d2      	lsls	r2, r2, #7
 80041da:	440a      	add	r2, r1
 80041dc:	3284      	adds	r2, #132	; 0x84
 80041de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80041e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f2:	4413      	add	r3, r2
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4619      	mov	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	01db      	lsls	r3, r3, #7
 8004200:	440b      	add	r3, r1
 8004202:	3384      	adds	r3, #132	; 0x84
 8004204:	4619      	mov	r1, r3
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4313      	orrs	r3, r2
 800420a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	01db      	lsls	r3, r3, #7
 8004216:	4413      	add	r3, r2
 8004218:	3384      	adds	r3, #132	; 0x84
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	4611      	mov	r1, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	01d2      	lsls	r2, r2, #7
 8004226:	440a      	add	r2, r1
 8004228:	3284      	adds	r2, #132	; 0x84
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	01db      	lsls	r3, r3, #7
 800423a:	4413      	add	r3, r2
 800423c:	3384      	adds	r3, #132	; 0x84
 800423e:	461a      	mov	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	061b      	lsls	r3, r3, #24
 8004260:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	01db      	lsls	r3, r3, #7
 800426c:	4413      	add	r3, r2
 800426e:	3384      	adds	r3, #132	; 0x84
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	01db      	lsls	r3, r3, #7
 800427c:	4413      	add	r3, r2
 800427e:	3384      	adds	r3, #132	; 0x84
 8004280:	461a      	mov	r2, r3
 8004282:	2300      	movs	r3, #0
 8004284:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800428c:	461a      	mov	r2, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	431a      	orrs	r2, r3
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4619      	mov	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	01db      	lsls	r3, r3, #7
 80042a0:	440b      	add	r3, r1
 80042a2:	3384      	adds	r3, #132	; 0x84
 80042a4:	4619      	mov	r1, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	01db      	lsls	r3, r3, #7
 80042b6:	4413      	add	r3, r2
 80042b8:	3384      	adds	r3, #132	; 0x84
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	4611      	mov	r1, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	01d2      	lsls	r2, r2, #7
 80042c6:	440a      	add	r2, r1
 80042c8:	3284      	adds	r2, #132	; 0x84
 80042ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	01db      	lsls	r3, r3, #7
 80042da:	4413      	add	r3, r2
 80042dc:	3384      	adds	r3, #132	; 0x84
 80042de:	461a      	mov	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	01db      	lsls	r3, r3, #7
 80042f0:	4413      	add	r3, r2
 80042f2:	3384      	adds	r3, #132	; 0x84
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	4611      	mov	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	01d2      	lsls	r2, r2, #7
 8004300:	440a      	add	r2, r1
 8004302:	3284      	adds	r2, #132	; 0x84
 8004304:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004308:	f023 0307 	bic.w	r3, r3, #7
 800430c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	68f9      	ldr	r1, [r7, #12]
 8004318:	6809      	ldr	r1, [r1, #0]
 800431a:	4608      	mov	r0, r1
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	01c9      	lsls	r1, r1, #7
 8004320:	4401      	add	r1, r0
 8004322:	3184      	adds	r1, #132	; 0x84
 8004324:	4313      	orrs	r3, r2
 8004326:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	01db      	lsls	r3, r3, #7
 8004332:	4413      	add	r3, r2
 8004334:	3384      	adds	r3, #132	; 0x84
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	01db      	lsls	r3, r3, #7
 8004342:	4413      	add	r3, r2
 8004344:	3384      	adds	r3, #132	; 0x84
 8004346:	461a      	mov	r2, r3
 8004348:	2300      	movs	r3, #0
 800434a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	01db      	lsls	r3, r3, #7
 8004356:	4413      	add	r3, r2
 8004358:	3384      	adds	r3, #132	; 0x84
 800435a:	461a      	mov	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800436a:	2304      	movs	r3, #4
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	e01b      	b.n	80043a8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d102      	bne.n	800437e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004378:	2303      	movs	r3, #3
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	e014      	b.n	80043a8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b04      	cmp	r3, #4
 8004384:	d00b      	beq.n	800439e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800438a:	2b02      	cmp	r3, #2
 800438c:	d007      	beq.n	800439e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004392:	2b03      	cmp	r3, #3
 8004394:	d003      	beq.n	800439e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800439a:	2b07      	cmp	r3, #7
 800439c:	d102      	bne.n	80043a4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800439e:	2302      	movs	r3, #2
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	e001      	b.n	80043a8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80043a4:	2301      	movs	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	01db      	lsls	r3, r3, #7
 80043b2:	4413      	add	r3, r2
 80043b4:	3384      	adds	r3, #132	; 0x84
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	4611      	mov	r1, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	01d2      	lsls	r2, r2, #7
 80043c2:	440a      	add	r2, r1
 80043c4:	3284      	adds	r2, #132	; 0x84
 80043c6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80043ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	1acb      	subs	r3, r1, r3
 80043e2:	69f9      	ldr	r1, [r7, #28]
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	6809      	ldr	r1, [r1, #0]
 80043ee:	4608      	mov	r0, r1
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	01c9      	lsls	r1, r1, #7
 80043f4:	4401      	add	r1, r0
 80043f6:	3184      	adds	r1, #132	; 0x84
 80043f8:	4313      	orrs	r3, r2
 80043fa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	01db      	lsls	r3, r3, #7
 8004406:	4413      	add	r3, r2
 8004408:	3384      	adds	r3, #132	; 0x84
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	4611      	mov	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	01d2      	lsls	r2, r2, #7
 8004416:	440a      	add	r2, r1
 8004418:	3284      	adds	r2, #132	; 0x84
 800441a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800441e:	f023 0307 	bic.w	r3, r3, #7
 8004422:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	01db      	lsls	r3, r3, #7
 800442e:	4413      	add	r3, r2
 8004430:	3384      	adds	r3, #132	; 0x84
 8004432:	461a      	mov	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	01db      	lsls	r3, r3, #7
 8004444:	4413      	add	r3, r2
 8004446:	3384      	adds	r3, #132	; 0x84
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	4611      	mov	r1, r2
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	01d2      	lsls	r2, r2, #7
 8004454:	440a      	add	r2, r1
 8004456:	3284      	adds	r2, #132	; 0x84
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	6013      	str	r3, [r2, #0]
}
 800445e:	bf00      	nop
 8004460:	3724      	adds	r7, #36	; 0x24
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e269      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d077      	beq.n	800457a <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800448a:	4b89      	ldr	r3, [pc, #548]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b04      	cmp	r3, #4
 8004494:	d00c      	beq.n	80044b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004496:	4b86      	ldr	r3, [pc, #536]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d112      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044a2:	4b83      	ldr	r3, [pc, #524]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ae:	d10b      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	4b7f      	ldr	r3, [pc, #508]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d05d      	beq.n	8004578 <HAL_RCC_OscConfig+0x10c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d159      	bne.n	8004578 <HAL_RCC_OscConfig+0x10c>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e244      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d0:	d106      	bne.n	80044e0 <HAL_RCC_OscConfig+0x74>
 80044d2:	4b77      	ldr	r3, [pc, #476]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a76      	ldr	r2, [pc, #472]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e01d      	b.n	800451c <HAL_RCC_OscConfig+0xb0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0x98>
 80044ea:	4b71      	ldr	r3, [pc, #452]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a70      	ldr	r2, [pc, #448]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80044f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b6e      	ldr	r3, [pc, #440]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a6d      	ldr	r2, [pc, #436]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e00b      	b.n	800451c <HAL_RCC_OscConfig+0xb0>
 8004504:	4b6a      	ldr	r3, [pc, #424]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a69      	ldr	r2, [pc, #420]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 800450a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b67      	ldr	r3, [pc, #412]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a66      	ldr	r2, [pc, #408]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d014      	beq.n	800454e <HAL_RCC_OscConfig+0xe2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fd f990 	bl	8001848 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	e009      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800452c:	f7fd f98c 	bl	8001848 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e208      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004540:	4b5b      	ldr	r3, [pc, #364]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ef      	beq.n	800452c <HAL_RCC_OscConfig+0xc0>
 800454c:	e015      	b.n	800457a <HAL_RCC_OscConfig+0x10e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fd f97b 	bl	8001848 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004554:	e009      	b.n	800456a <HAL_RCC_OscConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004556:	f7fd f977 	bl	8001848 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e1f3      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456a:	4b51      	ldr	r3, [pc, #324]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1ef      	bne.n	8004556 <HAL_RCC_OscConfig+0xea>
 8004576:	e000      	b.n	800457a <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d063      	beq.n	800464e <HAL_RCC_OscConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004586:	4b4a      	ldr	r3, [pc, #296]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00b      	beq.n	80045aa <HAL_RCC_OscConfig+0x13e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004592:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800459a:	2b08      	cmp	r3, #8
 800459c:	d11c      	bne.n	80045d8 <HAL_RCC_OscConfig+0x16c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800459e:	4b44      	ldr	r3, [pc, #272]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d116      	bne.n	80045d8 <HAL_RCC_OscConfig+0x16c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045aa:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_RCC_OscConfig+0x156>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d001      	beq.n	80045c2 <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e1c7      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c2:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4937      	ldr	r1, [pc, #220]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d6:	e03a      	b.n	800464e <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d020      	beq.n	8004622 <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e0:	4b34      	ldr	r3, [pc, #208]	; (80046b4 <HAL_RCC_OscConfig+0x248>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fd f92f 	bl	8001848 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ee:	f7fd f92b 	bl	8001848 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x194>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e1a8      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004600:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x182>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4925      	ldr	r1, [pc, #148]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]
 8004620:	e015      	b.n	800464e <HAL_RCC_OscConfig+0x1e2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004622:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <HAL_RCC_OscConfig+0x248>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd f90e 	bl	8001848 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x1d6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004630:	f7fd f90a 	bl	8001848 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x1d6>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e187      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004642:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d036      	beq.n	80046c8 <HAL_RCC_OscConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d016      	beq.n	8004690 <HAL_RCC_OscConfig+0x224>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <HAL_RCC_OscConfig+0x24c>)
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fd f8ee 	bl	8001848 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004670:	f7fd f8ea 	bl	8001848 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x216>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e167      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0x204>
 800468e:	e01b      	b.n	80046c8 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCC_OscConfig+0x24c>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004696:	f7fd f8d7 	bl	8001848 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800469c:	e00e      	b.n	80046bc <HAL_RCC_OscConfig+0x250>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800469e:	f7fd f8d3 	bl	8001848 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d907      	bls.n	80046bc <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e150      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
 80046b0:	40023800 	.word	0x40023800
 80046b4:	42470000 	.word	0x42470000
 80046b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046bc:	4b88      	ldr	r3, [pc, #544]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 80046be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1ea      	bne.n	800469e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8097 	beq.w	8004804 <HAL_RCC_OscConfig+0x398>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d6:	2300      	movs	r3, #0
 80046d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046da:	4b81      	ldr	r3, [pc, #516]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10f      	bne.n	8004706 <HAL_RCC_OscConfig+0x29a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	4b7d      	ldr	r3, [pc, #500]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	4a7c      	ldr	r2, [pc, #496]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 80046f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f4:	6413      	str	r3, [r2, #64]	; 0x40
 80046f6:	4b7a      	ldr	r3, [pc, #488]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004706:	4b77      	ldr	r3, [pc, #476]	; (80048e4 <HAL_RCC_OscConfig+0x478>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d118      	bne.n	8004744 <HAL_RCC_OscConfig+0x2d8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004712:	4b74      	ldr	r3, [pc, #464]	; (80048e4 <HAL_RCC_OscConfig+0x478>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a73      	ldr	r2, [pc, #460]	; (80048e4 <HAL_RCC_OscConfig+0x478>)
 8004718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471e:	f7fd f893 	bl	8001848 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004726:	f7fd f88f 	bl	8001848 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e10c      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004738:	4b6a      	ldr	r3, [pc, #424]	; (80048e4 <HAL_RCC_OscConfig+0x478>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x2ee>
 800474c:	4b64      	ldr	r3, [pc, #400]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	4a63      	ldr	r2, [pc, #396]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	6713      	str	r3, [r2, #112]	; 0x70
 8004758:	e01c      	b.n	8004794 <HAL_RCC_OscConfig+0x328>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b05      	cmp	r3, #5
 8004760:	d10c      	bne.n	800477c <HAL_RCC_OscConfig+0x310>
 8004762:	4b5f      	ldr	r3, [pc, #380]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	4a5e      	ldr	r2, [pc, #376]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	6713      	str	r3, [r2, #112]	; 0x70
 800476e:	4b5c      	ldr	r3, [pc, #368]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	4a5b      	ldr	r2, [pc, #364]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	6713      	str	r3, [r2, #112]	; 0x70
 800477a:	e00b      	b.n	8004794 <HAL_RCC_OscConfig+0x328>
 800477c:	4b58      	ldr	r3, [pc, #352]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	4a57      	ldr	r2, [pc, #348]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	6713      	str	r3, [r2, #112]	; 0x70
 8004788:	4b55      	ldr	r3, [pc, #340]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478c:	4a54      	ldr	r2, [pc, #336]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 800478e:	f023 0304 	bic.w	r3, r3, #4
 8004792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d015      	beq.n	80047c8 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fd f854 	bl	8001848 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fd f850 	bl	8001848 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e0cb      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ba:	4b49      	ldr	r3, [pc, #292]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0ee      	beq.n	80047a4 <HAL_RCC_OscConfig+0x338>
 80047c6:	e014      	b.n	80047f2 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c8:	f7fd f83e 	bl	8001848 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d0:	f7fd f83a 	bl	8001848 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	; 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e0b5      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e6:	4b3e      	ldr	r3, [pc, #248]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1ee      	bne.n	80047d0 <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d105      	bne.n	8004804 <HAL_RCC_OscConfig+0x398>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f8:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	4a38      	ldr	r2, [pc, #224]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 80047fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80a1 	beq.w	8004950 <HAL_RCC_OscConfig+0x4e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800480e:	4b34      	ldr	r3, [pc, #208]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b08      	cmp	r3, #8
 8004818:	d05c      	beq.n	80048d4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d141      	bne.n	80048a6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004822:	4b31      	ldr	r3, [pc, #196]	; (80048e8 <HAL_RCC_OscConfig+0x47c>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004828:	f7fd f80e 	bl	8001848 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004830:	f7fd f80a 	bl	8001848 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e087      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004842:	4b27      	ldr	r3, [pc, #156]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	019b      	lsls	r3, r3, #6
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	3b01      	subs	r3, #1
 8004868:	041b      	lsls	r3, r3, #16
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	061b      	lsls	r3, r3, #24
 8004872:	491b      	ldr	r1, [pc, #108]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004878:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <HAL_RCC_OscConfig+0x47c>)
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487e:	f7fc ffe3 	bl	8001848 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004886:	f7fc ffdf 	bl	8001848 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e05c      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004898:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x41a>
 80048a4:	e054      	b.n	8004950 <HAL_RCC_OscConfig+0x4e4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <HAL_RCC_OscConfig+0x47c>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fc ffcc 	bl	8001848 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fc ffc8 	bl	8001848 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e045      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x448>
 80048d2:	e03d      	b.n	8004950 <HAL_RCC_OscConfig+0x4e4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d107      	bne.n	80048ec <HAL_RCC_OscConfig+0x480>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e038      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
 80048e0:	40023800 	.word	0x40023800
 80048e4:	40007000 	.word	0x40007000
 80048e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048ec:	4b1b      	ldr	r3, [pc, #108]	; (800495c <HAL_RCC_OscConfig+0x4f0>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d028      	beq.n	800494c <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d121      	bne.n	800494c <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d11a      	bne.n	800494c <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800491c:	4013      	ands	r3, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004924:	4293      	cmp	r3, r2
 8004926:	d111      	bne.n	800494c <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	085b      	lsrs	r3, r3, #1
 8004934:	3b01      	subs	r3, #1
 8004936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d107      	bne.n	800494c <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_OscConfig+0x4e4>
#endif
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800

08004960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0cc      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004974:	4b68      	ldr	r3, [pc, #416]	; (8004b18 <HAL_RCC_ClockConfig+0x1b8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d90c      	bls.n	800499c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b65      	ldr	r3, [pc, #404]	; (8004b18 <HAL_RCC_ClockConfig+0x1b8>)
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498a:	4b63      	ldr	r3, [pc, #396]	; (8004b18 <HAL_RCC_ClockConfig+0x1b8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0b8      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d020      	beq.n	80049ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b4:	4b59      	ldr	r3, [pc, #356]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	4a58      	ldr	r2, [pc, #352]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049cc:	4b53      	ldr	r3, [pc, #332]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4a52      	ldr	r2, [pc, #328]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d8:	4b50      	ldr	r3, [pc, #320]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	494d      	ldr	r1, [pc, #308]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d044      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d107      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d119      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e07f      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d003      	beq.n	8004a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d107      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1e:	4b3f      	ldr	r3, [pc, #252]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e06f      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2e:	4b3b      	ldr	r3, [pc, #236]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e067      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3e:	4b37      	ldr	r3, [pc, #220]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f023 0203 	bic.w	r2, r3, #3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	4934      	ldr	r1, [pc, #208]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a50:	f7fc fefa 	bl	8001848 <HAL_GetTick>
 8004a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a56:	e00a      	b.n	8004a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a58:	f7fc fef6 	bl	8001848 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e04f      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6e:	4b2b      	ldr	r3, [pc, #172]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 020c 	and.w	r2, r3, #12
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d1eb      	bne.n	8004a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a80:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d20c      	bcs.n	8004aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8e:	4b22      	ldr	r3, [pc, #136]	; (8004b18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	4b20      	ldr	r3, [pc, #128]	; (8004b18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e032      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4916      	ldr	r1, [pc, #88]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	490e      	ldr	r1, [pc, #56]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ae6:	f000 f821 	bl	8004b2c <HAL_RCC_GetSysClockFreq>
 8004aea:	4602      	mov	r2, r0
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	091b      	lsrs	r3, r3, #4
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	490a      	ldr	r1, [pc, #40]	; (8004b20 <HAL_RCC_ClockConfig+0x1c0>)
 8004af8:	5ccb      	ldrb	r3, [r1, r3]
 8004afa:	fa22 f303 	lsr.w	r3, r2, r3
 8004afe:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fc fcce 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40023c00 	.word	0x40023c00
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	0800d51c 	.word	0x0800d51c
 8004b24:	20000000 	.word	0x20000000
 8004b28:	20000004 	.word	0x20000004

08004b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b30:	b094      	sub	sp, #80	; 0x50
 8004b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	647b      	str	r3, [r7, #68]	; 0x44
 8004b38:	2300      	movs	r3, #0
 8004b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b44:	4b79      	ldr	r3, [pc, #484]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 030c 	and.w	r3, r3, #12
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d00d      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x40>
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	f200 80e1 	bhi.w	8004d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x34>
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b5e:	e0db      	b.n	8004d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b60:	4b73      	ldr	r3, [pc, #460]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b64:	e0db      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b66:	4b73      	ldr	r3, [pc, #460]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b6a:	e0d8      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b6c:	4b6f      	ldr	r3, [pc, #444]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b76:	4b6d      	ldr	r3, [pc, #436]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d063      	beq.n	8004c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b82:	4b6a      	ldr	r3, [pc, #424]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	2200      	movs	r2, #0
 8004b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b94:	633b      	str	r3, [r7, #48]	; 0x30
 8004b96:	2300      	movs	r3, #0
 8004b98:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	462b      	mov	r3, r5
 8004ba2:	f04f 0000 	mov.w	r0, #0
 8004ba6:	f04f 0100 	mov.w	r1, #0
 8004baa:	0159      	lsls	r1, r3, #5
 8004bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb0:	0150      	lsls	r0, r2, #5
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	1a51      	subs	r1, r2, r1
 8004bba:	6139      	str	r1, [r7, #16]
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	018b      	lsls	r3, r1, #6
 8004bd4:	4651      	mov	r1, sl
 8004bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bda:	4651      	mov	r1, sl
 8004bdc:	018a      	lsls	r2, r1, #6
 8004bde:	4651      	mov	r1, sl
 8004be0:	ebb2 0801 	subs.w	r8, r2, r1
 8004be4:	4659      	mov	r1, fp
 8004be6:	eb63 0901 	sbc.w	r9, r3, r1
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bfe:	4690      	mov	r8, r2
 8004c00:	4699      	mov	r9, r3
 8004c02:	4623      	mov	r3, r4
 8004c04:	eb18 0303 	adds.w	r3, r8, r3
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	462b      	mov	r3, r5
 8004c0c:	eb49 0303 	adc.w	r3, r9, r3
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c1e:	4629      	mov	r1, r5
 8004c20:	024b      	lsls	r3, r1, #9
 8004c22:	4621      	mov	r1, r4
 8004c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c28:	4621      	mov	r1, r4
 8004c2a:	024a      	lsls	r2, r1, #9
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c32:	2200      	movs	r2, #0
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c3c:	f7fb fb28 	bl	8000290 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c48:	e058      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4a:	4b38      	ldr	r3, [pc, #224]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	099b      	lsrs	r3, r3, #6
 8004c50:	2200      	movs	r2, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	4611      	mov	r1, r2
 8004c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c5a:	623b      	str	r3, [r7, #32]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c64:	4642      	mov	r2, r8
 8004c66:	464b      	mov	r3, r9
 8004c68:	f04f 0000 	mov.w	r0, #0
 8004c6c:	f04f 0100 	mov.w	r1, #0
 8004c70:	0159      	lsls	r1, r3, #5
 8004c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c76:	0150      	lsls	r0, r2, #5
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c82:	4649      	mov	r1, r9
 8004c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	00eb      	lsls	r3, r5, #3
 8004cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb2:	00e2      	lsls	r2, r4, #3
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	461d      	mov	r5, r3
 8004cb8:	4643      	mov	r3, r8
 8004cba:	18e3      	adds	r3, r4, r3
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	eb45 0303 	adc.w	r3, r5, r3
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	028b      	lsls	r3, r1, #10
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cdc:	4621      	mov	r1, r4
 8004cde:	028a      	lsls	r2, r1, #10
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	61fa      	str	r2, [r7, #28]
 8004cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf0:	f7fb face 	bl	8000290 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	0c1b      	lsrs	r3, r3, #16
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	3301      	adds	r3, #1
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d16:	e002      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3750      	adds	r7, #80	; 0x50
 8004d24:	46bd      	mov	sp, r7
 8004d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	00f42400 	.word	0x00f42400
 8004d34:	007a1200 	.word	0x007a1200

08004d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000000 	.word	0x20000000

08004d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d54:	f7ff fff0 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	0a9b      	lsrs	r3, r3, #10
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	4903      	ldr	r1, [pc, #12]	; (8004d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d66:	5ccb      	ldrb	r3, [r1, r3]
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40023800 	.word	0x40023800
 8004d74:	0800d52c 	.word	0x0800d52c

08004d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d7c:	f7ff ffdc 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	0b5b      	lsrs	r3, r3, #13
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	4903      	ldr	r1, [pc, #12]	; (8004d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d8e:	5ccb      	ldrb	r3, [r1, r3]
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	0800d52c 	.word	0x0800d52c

08004da0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	220f      	movs	r2, #15
 8004dae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004db0:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <HAL_RCC_GetClockConfig+0x5c>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0203 	and.w	r2, r3, #3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dbc:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <HAL_RCC_GetClockConfig+0x5c>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <HAL_RCC_GetClockConfig+0x5c>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004dd4:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <HAL_RCC_GetClockConfig+0x5c>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	08db      	lsrs	r3, r3, #3
 8004dda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004de2:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <HAL_RCC_GetClockConfig+0x60>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 020f 	and.w	r2, r3, #15
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	601a      	str	r2, [r3, #0]
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40023c00 	.word	0x40023c00

08004e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10b      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d105      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d075      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e38:	4b91      	ldr	r3, [pc, #580]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e3e:	f7fc fd03 	bl	8001848 <HAL_GetTick>
 8004e42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e44:	e008      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e46:	f7fc fcff 	bl	8001848 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e189      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e58:	4b8a      	ldr	r3, [pc, #552]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1f0      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	019a      	lsls	r2, r3, #6
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	071b      	lsls	r3, r3, #28
 8004e7c:	4981      	ldr	r1, [pc, #516]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01f      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e90:	4b7c      	ldr	r3, [pc, #496]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e96:	0f1b      	lsrs	r3, r3, #28
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	019a      	lsls	r2, r3, #6
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	061b      	lsls	r3, r3, #24
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	071b      	lsls	r3, r3, #28
 8004eb0:	4974      	ldr	r1, [pc, #464]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004eb8:	4b72      	ldr	r3, [pc, #456]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ebe:	f023 021f 	bic.w	r2, r3, #31
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	496e      	ldr	r1, [pc, #440]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00d      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	019a      	lsls	r2, r3, #6
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	061b      	lsls	r3, r3, #24
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	071b      	lsls	r3, r3, #28
 8004ef0:	4964      	ldr	r1, [pc, #400]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ef8:	4b61      	ldr	r3, [pc, #388]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004efe:	f7fc fca3 	bl	8001848 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f06:	f7fc fc9f 	bl	8001848 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e129      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f18:	4b5a      	ldr	r3, [pc, #360]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d105      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d079      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f3c:	4b52      	ldr	r3, [pc, #328]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f42:	f7fc fc81 	bl	8001848 <HAL_GetTick>
 8004f46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f48:	e008      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f4a:	f7fc fc7d 	bl	8001848 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e107      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f5c:	4b49      	ldr	r3, [pc, #292]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f68:	d0ef      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d020      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f76:	4b43      	ldr	r3, [pc, #268]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	0f1b      	lsrs	r3, r3, #28
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	019a      	lsls	r2, r3, #6
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	061b      	lsls	r3, r3, #24
 8004f90:	431a      	orrs	r2, r3
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	071b      	lsls	r3, r3, #28
 8004f96:	493b      	ldr	r1, [pc, #236]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f9e:	4b39      	ldr	r3, [pc, #228]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	4934      	ldr	r1, [pc, #208]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01e      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fc4:	4b2f      	ldr	r3, [pc, #188]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	0e1b      	lsrs	r3, r3, #24
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	019a      	lsls	r2, r3, #6
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	061b      	lsls	r3, r3, #24
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	071b      	lsls	r3, r3, #28
 8004fe4:	4927      	ldr	r1, [pc, #156]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004fec:	4b25      	ldr	r3, [pc, #148]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	4922      	ldr	r1, [pc, #136]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005002:	4b21      	ldr	r3, [pc, #132]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005008:	f7fc fc1e 	bl	8001848 <HAL_GetTick>
 800500c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005010:	f7fc fc1a 	bl	8001848 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e0a4      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005022:	4b18      	ldr	r3, [pc, #96]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800502a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502e:	d1ef      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 808b 	beq.w	8005154 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	4a0f      	ldr	r2, [pc, #60]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504c:	6413      	str	r3, [r2, #64]	; 0x40
 800504e:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800505a:	4b0c      	ldr	r3, [pc, #48]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a0b      	ldr	r2, [pc, #44]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005064:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005066:	f7fc fbef 	bl	8001848 <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800506c:	e010      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800506e:	f7fc fbeb 	bl	8001848 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d909      	bls.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e075      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005080:	42470068 	.word	0x42470068
 8005084:	40023800 	.word	0x40023800
 8005088:	42470070 	.word	0x42470070
 800508c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005090:	4b38      	ldr	r3, [pc, #224]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0e8      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800509c:	4b36      	ldr	r3, [pc, #216]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d02f      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d028      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ba:	4b2f      	ldr	r3, [pc, #188]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050c4:	4b2d      	ldr	r3, [pc, #180]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050ca:	4b2c      	ldr	r3, [pc, #176]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050d0:	4a29      	ldr	r2, [pc, #164]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050d6:	4b28      	ldr	r3, [pc, #160]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d114      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050e2:	f7fc fbb1 	bl	8001848 <HAL_GetTick>
 80050e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e8:	e00a      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ea:	f7fc fbad 	bl	8001848 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e035      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005100:	4b1d      	ldr	r3, [pc, #116]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0ee      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005118:	d10d      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800511a:	4b17      	ldr	r3, [pc, #92]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800512a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512e:	4912      	ldr	r1, [pc, #72]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005130:	4313      	orrs	r3, r2
 8005132:	608b      	str	r3, [r1, #8]
 8005134:	e005      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	4a0f      	ldr	r2, [pc, #60]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800513c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005140:	6093      	str	r3, [r2, #8]
 8005142:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514e:	490a      	ldr	r1, [pc, #40]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005150:	4313      	orrs	r3, r2
 8005152:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005168:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40007000 	.word	0x40007000
 8005178:	40023800 	.word	0x40023800
 800517c:	42470e40 	.word	0x42470e40
 8005180:	424711e0 	.word	0x424711e0

08005184 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e025      	b.n	80051e4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7fc f971 	bl	8001494 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f001 f8dd 	bl	8006384 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	461a      	mov	r2, r3
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	f001 f932 	bl	800643e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e07b      	b.n	80052f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d108      	bne.n	8005218 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800520e:	d009      	beq.n	8005224 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	61da      	str	r2, [r3, #28]
 8005216:	e005      	b.n	8005224 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fb ffe4 	bl	800120c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a8:	ea42 0103 	orr.w	r1, r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	f003 0104 	and.w	r1, r3, #4
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	f003 0210 	and.w	r2, r3, #16
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e041      	b.n	8005394 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fb ffb9 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f000 fa95 	bl	800586c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d001      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e04e      	b.n	8005452 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a23      	ldr	r2, [pc, #140]	; (8005460 <HAL_TIM_Base_Start_IT+0xc4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d022      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053de:	d01d      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <HAL_TIM_Base_Start_IT+0xc8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d018      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <HAL_TIM_Base_Start_IT+0xcc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1c      	ldr	r2, [pc, #112]	; (800546c <HAL_TIM_Base_Start_IT+0xd0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00e      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1b      	ldr	r2, [pc, #108]	; (8005470 <HAL_TIM_Base_Start_IT+0xd4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a19      	ldr	r2, [pc, #100]	; (8005474 <HAL_TIM_Base_Start_IT+0xd8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a18      	ldr	r2, [pc, #96]	; (8005478 <HAL_TIM_Base_Start_IT+0xdc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d111      	bne.n	8005440 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b06      	cmp	r3, #6
 800542c:	d010      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0201 	orr.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543e:	e007      	b.n	8005450 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40010400 	.word	0x40010400
 8005474:	40014000 	.word	0x40014000
 8005478:	40001800 	.word	0x40001800

0800547c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b02      	cmp	r3, #2
 8005490:	d122      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b02      	cmp	r3, #2
 800549e:	d11b      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0202 	mvn.w	r2, #2
 80054a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f9b5 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 80054c4:	e005      	b.n	80054d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f9a7 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f9b8 	bl	8005842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d122      	bne.n	800552c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d11b      	bne.n	800552c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0204 	mvn.w	r2, #4
 80054fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f98b 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 8005518:	e005      	b.n	8005526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f97d 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f98e 	bl	8005842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b08      	cmp	r3, #8
 8005538:	d122      	bne.n	8005580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b08      	cmp	r3, #8
 8005546:	d11b      	bne.n	8005580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0208 	mvn.w	r2, #8
 8005550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2204      	movs	r2, #4
 8005556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f961 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 800556c:	e005      	b.n	800557a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f953 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f964 	bl	8005842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b10      	cmp	r3, #16
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b10      	cmp	r3, #16
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0210 	mvn.w	r2, #16
 80055a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2208      	movs	r2, #8
 80055aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f937 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f929 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f93a 	bl	8005842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d10e      	bne.n	8005600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d107      	bne.n	8005600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0201 	mvn.w	r2, #1
 80055f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fb fbde 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	d10e      	bne.n	800562c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005618:	2b80      	cmp	r3, #128	; 0x80
 800561a:	d107      	bne.n	800562c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fae0 	bl	8005bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d10e      	bne.n	8005658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005644:	2b40      	cmp	r3, #64	; 0x40
 8005646:	d107      	bne.n	8005658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8ff 	bl	8005856 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b20      	cmp	r3, #32
 8005664:	d10e      	bne.n	8005684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b20      	cmp	r3, #32
 8005672:	d107      	bne.n	8005684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0220 	mvn.w	r2, #32
 800567c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 faaa 	bl	8005bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_TIM_ConfigClockSource+0x1c>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e0b4      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x186>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e0:	d03e      	beq.n	8005760 <HAL_TIM_ConfigClockSource+0xd4>
 80056e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e6:	f200 8087 	bhi.w	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ee:	f000 8086 	beq.w	80057fe <HAL_TIM_ConfigClockSource+0x172>
 80056f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f6:	d87f      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f8:	2b70      	cmp	r3, #112	; 0x70
 80056fa:	d01a      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0xa6>
 80056fc:	2b70      	cmp	r3, #112	; 0x70
 80056fe:	d87b      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005700:	2b60      	cmp	r3, #96	; 0x60
 8005702:	d050      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005704:	2b60      	cmp	r3, #96	; 0x60
 8005706:	d877      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005708:	2b50      	cmp	r3, #80	; 0x50
 800570a:	d03c      	beq.n	8005786 <HAL_TIM_ConfigClockSource+0xfa>
 800570c:	2b50      	cmp	r3, #80	; 0x50
 800570e:	d873      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d058      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005714:	2b40      	cmp	r3, #64	; 0x40
 8005716:	d86f      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005718:	2b30      	cmp	r3, #48	; 0x30
 800571a:	d064      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x15a>
 800571c:	2b30      	cmp	r3, #48	; 0x30
 800571e:	d86b      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d060      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005724:	2b20      	cmp	r3, #32
 8005726:	d867      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d05c      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x15a>
 800572c:	2b10      	cmp	r3, #16
 800572e:	d05a      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005730:	e062      	b.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6899      	ldr	r1, [r3, #8]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f000 f9ad 	bl	8005aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	609a      	str	r2, [r3, #8]
      break;
 800575e:	e04f      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	6899      	ldr	r1, [r3, #8]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f000 f996 	bl	8005aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005782:	609a      	str	r2, [r3, #8]
      break;
 8005784:	e03c      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6859      	ldr	r1, [r3, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	461a      	mov	r2, r3
 8005794:	f000 f90a 	bl	80059ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2150      	movs	r1, #80	; 0x50
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f963 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057a4:	e02c      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6859      	ldr	r1, [r3, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f000 f929 	bl	8005a0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2160      	movs	r1, #96	; 0x60
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 f953 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057c4:	e01c      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6859      	ldr	r1, [r3, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f000 f8ea 	bl	80059ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2140      	movs	r1, #64	; 0x40
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f943 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057e4:	e00c      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f000 f93a 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057f6:	e003      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
      break;
 80057fc:	e000      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a40      	ldr	r2, [pc, #256]	; (8005980 <TIM_Base_SetConfig+0x114>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d013      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588a:	d00f      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a3d      	ldr	r2, [pc, #244]	; (8005984 <TIM_Base_SetConfig+0x118>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00b      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a3c      	ldr	r2, [pc, #240]	; (8005988 <TIM_Base_SetConfig+0x11c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d007      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a3b      	ldr	r2, [pc, #236]	; (800598c <TIM_Base_SetConfig+0x120>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a3a      	ldr	r2, [pc, #232]	; (8005990 <TIM_Base_SetConfig+0x124>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d108      	bne.n	80058be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a2f      	ldr	r2, [pc, #188]	; (8005980 <TIM_Base_SetConfig+0x114>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02b      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058cc:	d027      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a2c      	ldr	r2, [pc, #176]	; (8005984 <TIM_Base_SetConfig+0x118>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d023      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2b      	ldr	r2, [pc, #172]	; (8005988 <TIM_Base_SetConfig+0x11c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01f      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2a      	ldr	r2, [pc, #168]	; (800598c <TIM_Base_SetConfig+0x120>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01b      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a29      	ldr	r2, [pc, #164]	; (8005990 <TIM_Base_SetConfig+0x124>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d017      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a28      	ldr	r2, [pc, #160]	; (8005994 <TIM_Base_SetConfig+0x128>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a27      	ldr	r2, [pc, #156]	; (8005998 <TIM_Base_SetConfig+0x12c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00f      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a26      	ldr	r2, [pc, #152]	; (800599c <TIM_Base_SetConfig+0x130>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a25      	ldr	r2, [pc, #148]	; (80059a0 <TIM_Base_SetConfig+0x134>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a24      	ldr	r2, [pc, #144]	; (80059a4 <TIM_Base_SetConfig+0x138>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a23      	ldr	r2, [pc, #140]	; (80059a8 <TIM_Base_SetConfig+0x13c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d108      	bne.n	8005930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a0a      	ldr	r2, [pc, #40]	; (8005980 <TIM_Base_SetConfig+0x114>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_Base_SetConfig+0xf8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a0c      	ldr	r2, [pc, #48]	; (8005990 <TIM_Base_SetConfig+0x124>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d103      	bne.n	800596c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	615a      	str	r2, [r3, #20]
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40010000 	.word	0x40010000
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40000c00 	.word	0x40000c00
 8005990:	40010400 	.word	0x40010400
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800
 80059a0:	40001800 	.word	0x40001800
 80059a4:	40001c00 	.word	0x40001c00
 80059a8:	40002000 	.word	0x40002000

080059ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 030a 	bic.w	r3, r3, #10
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b087      	sub	sp, #28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0210 	bic.w	r2, r3, #16
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	031b      	lsls	r3, r3, #12
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f043 0307 	orr.w	r3, r3, #7
 8005a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	609a      	str	r2, [r3, #8]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	609a      	str	r2, [r3, #8]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e05a      	b.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a21      	ldr	r2, [pc, #132]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d022      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b44:	d01d      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1d      	ldr	r2, [pc, #116]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1a      	ldr	r2, [pc, #104]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10c      	bne.n	8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	40010400 	.word	0x40010400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40001800 	.word	0x40001800

08005bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e03f      	b.n	8005c92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fb fb5a 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2224      	movs	r2, #36	; 0x24
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f929 	bl	8005e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b08a      	sub	sp, #40	; 0x28
 8005c9e:	af02      	add	r7, sp, #8
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d17c      	bne.n	8005db4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_UART_Transmit+0x2c>
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e075      	b.n	8005db6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_UART_Transmit+0x3e>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e06e      	b.n	8005db6 <HAL_UART_Transmit+0x11c>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2221      	movs	r2, #33	; 0x21
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cee:	f7fb fdab 	bl	8001848 <HAL_GetTick>
 8005cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	88fa      	ldrh	r2, [r7, #6]
 8005cfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d08:	d108      	bne.n	8005d1c <HAL_UART_Transmit+0x82>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d104      	bne.n	8005d1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	e003      	b.n	8005d24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d2c:	e02a      	b.n	8005d84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2180      	movs	r1, #128	; 0x80
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f840 	bl	8005dbe <UART_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e036      	b.n	8005db6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	3302      	adds	r3, #2
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e007      	b.n	8005d76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	781a      	ldrb	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1cf      	bne.n	8005d2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2200      	movs	r2, #0
 8005d96:	2140      	movs	r1, #64	; 0x40
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f810 	bl	8005dbe <UART_WaitOnFlagUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e006      	b.n	8005db6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e000      	b.n	8005db6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005db4:	2302      	movs	r3, #2
  }
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b090      	sub	sp, #64	; 0x40
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	603b      	str	r3, [r7, #0]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dce:	e050      	b.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d04c      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <UART_WaitOnFlagUntilTimeout+0x30>
 8005dde:	f7fb fd33 	bl	8001848 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d241      	bcs.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	330c      	adds	r3, #12
 8005e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e0e:	637a      	str	r2, [r7, #52]	; 0x34
 8005e10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e5      	bne.n	8005dee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3314      	adds	r3, #20
 8005e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	e853 3f00 	ldrex	r3, [r3]
 8005e30:	613b      	str	r3, [r7, #16]
   return(result);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f023 0301 	bic.w	r3, r3, #1
 8005e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3314      	adds	r3, #20
 8005e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e42:	623a      	str	r2, [r7, #32]
 8005e44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	69f9      	ldr	r1, [r7, #28]
 8005e48:	6a3a      	ldr	r2, [r7, #32]
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e5      	bne.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e00f      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d09f      	beq.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3740      	adds	r7, #64	; 0x40
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea0:	b0c0      	sub	sp, #256	; 0x100
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	68d9      	ldr	r1, [r3, #12]
 8005eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	ea40 0301 	orr.w	r3, r0, r1
 8005ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ef4:	f021 010c 	bic.w	r1, r1, #12
 8005ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f02:	430b      	orrs	r3, r1
 8005f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f16:	6999      	ldr	r1, [r3, #24]
 8005f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	ea40 0301 	orr.w	r3, r0, r1
 8005f22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b8f      	ldr	r3, [pc, #572]	; (8006168 <UART_SetConfig+0x2cc>)
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d005      	beq.n	8005f3c <UART_SetConfig+0xa0>
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4b8d      	ldr	r3, [pc, #564]	; (800616c <UART_SetConfig+0x2d0>)
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d104      	bne.n	8005f46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f3c:	f7fe ff1c 	bl	8004d78 <HAL_RCC_GetPCLK2Freq>
 8005f40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f44:	e003      	b.n	8005f4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f46:	f7fe ff03 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 8005f4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f58:	f040 810c 	bne.w	8006174 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f60:	2200      	movs	r2, #0
 8005f62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f6e:	4622      	mov	r2, r4
 8005f70:	462b      	mov	r3, r5
 8005f72:	1891      	adds	r1, r2, r2
 8005f74:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f76:	415b      	adcs	r3, r3
 8005f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f7e:	4621      	mov	r1, r4
 8005f80:	eb12 0801 	adds.w	r8, r2, r1
 8005f84:	4629      	mov	r1, r5
 8005f86:	eb43 0901 	adc.w	r9, r3, r1
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f9e:	4690      	mov	r8, r2
 8005fa0:	4699      	mov	r9, r3
 8005fa2:	4623      	mov	r3, r4
 8005fa4:	eb18 0303 	adds.w	r3, r8, r3
 8005fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fac:	462b      	mov	r3, r5
 8005fae:	eb49 0303 	adc.w	r3, r9, r3
 8005fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fca:	460b      	mov	r3, r1
 8005fcc:	18db      	adds	r3, r3, r3
 8005fce:	653b      	str	r3, [r7, #80]	; 0x50
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	eb42 0303 	adc.w	r3, r2, r3
 8005fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8005fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fe0:	f7fa f956 	bl	8000290 <__aeabi_uldivmod>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4b61      	ldr	r3, [pc, #388]	; (8006170 <UART_SetConfig+0x2d4>)
 8005fea:	fba3 2302 	umull	r2, r3, r3, r2
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	011c      	lsls	r4, r3, #4
 8005ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ffc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006000:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006004:	4642      	mov	r2, r8
 8006006:	464b      	mov	r3, r9
 8006008:	1891      	adds	r1, r2, r2
 800600a:	64b9      	str	r1, [r7, #72]	; 0x48
 800600c:	415b      	adcs	r3, r3
 800600e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006014:	4641      	mov	r1, r8
 8006016:	eb12 0a01 	adds.w	sl, r2, r1
 800601a:	4649      	mov	r1, r9
 800601c:	eb43 0b01 	adc.w	fp, r3, r1
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800602c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006034:	4692      	mov	sl, r2
 8006036:	469b      	mov	fp, r3
 8006038:	4643      	mov	r3, r8
 800603a:	eb1a 0303 	adds.w	r3, sl, r3
 800603e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006042:	464b      	mov	r3, r9
 8006044:	eb4b 0303 	adc.w	r3, fp, r3
 8006048:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006058:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800605c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006060:	460b      	mov	r3, r1
 8006062:	18db      	adds	r3, r3, r3
 8006064:	643b      	str	r3, [r7, #64]	; 0x40
 8006066:	4613      	mov	r3, r2
 8006068:	eb42 0303 	adc.w	r3, r2, r3
 800606c:	647b      	str	r3, [r7, #68]	; 0x44
 800606e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006072:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006076:	f7fa f90b 	bl	8000290 <__aeabi_uldivmod>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4611      	mov	r1, r2
 8006080:	4b3b      	ldr	r3, [pc, #236]	; (8006170 <UART_SetConfig+0x2d4>)
 8006082:	fba3 2301 	umull	r2, r3, r3, r1
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	2264      	movs	r2, #100	; 0x64
 800608a:	fb02 f303 	mul.w	r3, r2, r3
 800608e:	1acb      	subs	r3, r1, r3
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006096:	4b36      	ldr	r3, [pc, #216]	; (8006170 <UART_SetConfig+0x2d4>)
 8006098:	fba3 2302 	umull	r2, r3, r3, r2
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060a4:	441c      	add	r4, r3
 80060a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	1891      	adds	r1, r2, r2
 80060be:	63b9      	str	r1, [r7, #56]	; 0x38
 80060c0:	415b      	adcs	r3, r3
 80060c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060c8:	4641      	mov	r1, r8
 80060ca:	1851      	adds	r1, r2, r1
 80060cc:	6339      	str	r1, [r7, #48]	; 0x30
 80060ce:	4649      	mov	r1, r9
 80060d0:	414b      	adcs	r3, r1
 80060d2:	637b      	str	r3, [r7, #52]	; 0x34
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060e0:	4659      	mov	r1, fp
 80060e2:	00cb      	lsls	r3, r1, #3
 80060e4:	4651      	mov	r1, sl
 80060e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ea:	4651      	mov	r1, sl
 80060ec:	00ca      	lsls	r2, r1, #3
 80060ee:	4610      	mov	r0, r2
 80060f0:	4619      	mov	r1, r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	4642      	mov	r2, r8
 80060f6:	189b      	adds	r3, r3, r2
 80060f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060fc:	464b      	mov	r3, r9
 80060fe:	460a      	mov	r2, r1
 8006100:	eb42 0303 	adc.w	r3, r2, r3
 8006104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006114:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800611c:	460b      	mov	r3, r1
 800611e:	18db      	adds	r3, r3, r3
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
 8006122:	4613      	mov	r3, r2
 8006124:	eb42 0303 	adc.w	r3, r2, r3
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800612e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006132:	f7fa f8ad 	bl	8000290 <__aeabi_uldivmod>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <UART_SetConfig+0x2d4>)
 800613c:	fba3 1302 	umull	r1, r3, r3, r2
 8006140:	095b      	lsrs	r3, r3, #5
 8006142:	2164      	movs	r1, #100	; 0x64
 8006144:	fb01 f303 	mul.w	r3, r1, r3
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	3332      	adds	r3, #50	; 0x32
 800614e:	4a08      	ldr	r2, [pc, #32]	; (8006170 <UART_SetConfig+0x2d4>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	095b      	lsrs	r3, r3, #5
 8006156:	f003 0207 	and.w	r2, r3, #7
 800615a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4422      	add	r2, r4
 8006162:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006164:	e105      	b.n	8006372 <UART_SetConfig+0x4d6>
 8006166:	bf00      	nop
 8006168:	40011000 	.word	0x40011000
 800616c:	40011400 	.word	0x40011400
 8006170:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006178:	2200      	movs	r2, #0
 800617a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800617e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006182:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006186:	4642      	mov	r2, r8
 8006188:	464b      	mov	r3, r9
 800618a:	1891      	adds	r1, r2, r2
 800618c:	6239      	str	r1, [r7, #32]
 800618e:	415b      	adcs	r3, r3
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
 8006192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006196:	4641      	mov	r1, r8
 8006198:	1854      	adds	r4, r2, r1
 800619a:	4649      	mov	r1, r9
 800619c:	eb43 0501 	adc.w	r5, r3, r1
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	00eb      	lsls	r3, r5, #3
 80061aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ae:	00e2      	lsls	r2, r4, #3
 80061b0:	4614      	mov	r4, r2
 80061b2:	461d      	mov	r5, r3
 80061b4:	4643      	mov	r3, r8
 80061b6:	18e3      	adds	r3, r4, r3
 80061b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061bc:	464b      	mov	r3, r9
 80061be:	eb45 0303 	adc.w	r3, r5, r3
 80061c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061e2:	4629      	mov	r1, r5
 80061e4:	008b      	lsls	r3, r1, #2
 80061e6:	4621      	mov	r1, r4
 80061e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ec:	4621      	mov	r1, r4
 80061ee:	008a      	lsls	r2, r1, #2
 80061f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061f4:	f7fa f84c 	bl	8000290 <__aeabi_uldivmod>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4b60      	ldr	r3, [pc, #384]	; (8006380 <UART_SetConfig+0x4e4>)
 80061fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	011c      	lsls	r4, r3, #4
 8006206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620a:	2200      	movs	r2, #0
 800620c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006210:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006218:	4642      	mov	r2, r8
 800621a:	464b      	mov	r3, r9
 800621c:	1891      	adds	r1, r2, r2
 800621e:	61b9      	str	r1, [r7, #24]
 8006220:	415b      	adcs	r3, r3
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006228:	4641      	mov	r1, r8
 800622a:	1851      	adds	r1, r2, r1
 800622c:	6139      	str	r1, [r7, #16]
 800622e:	4649      	mov	r1, r9
 8006230:	414b      	adcs	r3, r1
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006240:	4659      	mov	r1, fp
 8006242:	00cb      	lsls	r3, r1, #3
 8006244:	4651      	mov	r1, sl
 8006246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800624a:	4651      	mov	r1, sl
 800624c:	00ca      	lsls	r2, r1, #3
 800624e:	4610      	mov	r0, r2
 8006250:	4619      	mov	r1, r3
 8006252:	4603      	mov	r3, r0
 8006254:	4642      	mov	r2, r8
 8006256:	189b      	adds	r3, r3, r2
 8006258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800625c:	464b      	mov	r3, r9
 800625e:	460a      	mov	r2, r1
 8006260:	eb42 0303 	adc.w	r3, r2, r3
 8006264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	67bb      	str	r3, [r7, #120]	; 0x78
 8006272:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006280:	4649      	mov	r1, r9
 8006282:	008b      	lsls	r3, r1, #2
 8006284:	4641      	mov	r1, r8
 8006286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800628a:	4641      	mov	r1, r8
 800628c:	008a      	lsls	r2, r1, #2
 800628e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006292:	f7f9 fffd 	bl	8000290 <__aeabi_uldivmod>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4b39      	ldr	r3, [pc, #228]	; (8006380 <UART_SetConfig+0x4e4>)
 800629c:	fba3 1302 	umull	r1, r3, r3, r2
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	2164      	movs	r1, #100	; 0x64
 80062a4:	fb01 f303 	mul.w	r3, r1, r3
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	3332      	adds	r3, #50	; 0x32
 80062ae:	4a34      	ldr	r2, [pc, #208]	; (8006380 <UART_SetConfig+0x4e4>)
 80062b0:	fba2 2303 	umull	r2, r3, r2, r3
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ba:	441c      	add	r4, r3
 80062bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c0:	2200      	movs	r2, #0
 80062c2:	673b      	str	r3, [r7, #112]	; 0x70
 80062c4:	677a      	str	r2, [r7, #116]	; 0x74
 80062c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062ca:	4642      	mov	r2, r8
 80062cc:	464b      	mov	r3, r9
 80062ce:	1891      	adds	r1, r2, r2
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	415b      	adcs	r3, r3
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062da:	4641      	mov	r1, r8
 80062dc:	1851      	adds	r1, r2, r1
 80062de:	6039      	str	r1, [r7, #0]
 80062e0:	4649      	mov	r1, r9
 80062e2:	414b      	adcs	r3, r1
 80062e4:	607b      	str	r3, [r7, #4]
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062f2:	4659      	mov	r1, fp
 80062f4:	00cb      	lsls	r3, r1, #3
 80062f6:	4651      	mov	r1, sl
 80062f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fc:	4651      	mov	r1, sl
 80062fe:	00ca      	lsls	r2, r1, #3
 8006300:	4610      	mov	r0, r2
 8006302:	4619      	mov	r1, r3
 8006304:	4603      	mov	r3, r0
 8006306:	4642      	mov	r2, r8
 8006308:	189b      	adds	r3, r3, r2
 800630a:	66bb      	str	r3, [r7, #104]	; 0x68
 800630c:	464b      	mov	r3, r9
 800630e:	460a      	mov	r2, r1
 8006310:	eb42 0303 	adc.w	r3, r2, r3
 8006314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	663b      	str	r3, [r7, #96]	; 0x60
 8006320:	667a      	str	r2, [r7, #100]	; 0x64
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800632e:	4649      	mov	r1, r9
 8006330:	008b      	lsls	r3, r1, #2
 8006332:	4641      	mov	r1, r8
 8006334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006338:	4641      	mov	r1, r8
 800633a:	008a      	lsls	r2, r1, #2
 800633c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006340:	f7f9 ffa6 	bl	8000290 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <UART_SetConfig+0x4e4>)
 800634a:	fba3 1302 	umull	r1, r3, r3, r2
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	2164      	movs	r1, #100	; 0x64
 8006352:	fb01 f303 	mul.w	r3, r1, r3
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	3332      	adds	r3, #50	; 0x32
 800635c:	4a08      	ldr	r2, [pc, #32]	; (8006380 <UART_SetConfig+0x4e4>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	f003 020f 	and.w	r2, r3, #15
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4422      	add	r2, r4
 8006370:	609a      	str	r2, [r3, #8]
}
 8006372:	bf00      	nop
 8006374:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006378:	46bd      	mov	sp, r7
 800637a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800637e:	bf00      	nop
 8006380:	51eb851f 	.word	0x51eb851f

08006384 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d123      	bne.n	80063de <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800639e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	6851      	ldr	r1, [r2, #4]
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	6892      	ldr	r2, [r2, #8]
 80063aa:	4311      	orrs	r1, r2
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	68d2      	ldr	r2, [r2, #12]
 80063b0:	4311      	orrs	r1, r2
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	6912      	ldr	r2, [r2, #16]
 80063b6:	4311      	orrs	r1, r2
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	6952      	ldr	r2, [r2, #20]
 80063bc:	4311      	orrs	r1, r2
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	6992      	ldr	r2, [r2, #24]
 80063c2:	4311      	orrs	r1, r2
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	69d2      	ldr	r2, [r2, #28]
 80063c8:	4311      	orrs	r1, r2
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	6a12      	ldr	r2, [r2, #32]
 80063ce:	4311      	orrs	r1, r2
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063d4:	430a      	orrs	r2, r1
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	e028      	b.n	8006430 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	69d9      	ldr	r1, [r3, #28]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	4319      	orrs	r1, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	430b      	orrs	r3, r1
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006404:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	6851      	ldr	r1, [r2, #4]
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	6892      	ldr	r2, [r2, #8]
 8006410:	4311      	orrs	r1, r2
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	68d2      	ldr	r2, [r2, #12]
 8006416:	4311      	orrs	r1, r2
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	6912      	ldr	r2, [r2, #16]
 800641c:	4311      	orrs	r1, r2
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	6952      	ldr	r2, [r2, #20]
 8006422:	4311      	orrs	r1, r2
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	6992      	ldr	r2, [r2, #24]
 8006428:	430a      	orrs	r2, r1
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d128      	bne.n	80064a2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	1e59      	subs	r1, r3, #1
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	3b01      	subs	r3, #1
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	4319      	orrs	r1, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	3b01      	subs	r3, #1
 800646e:	021b      	lsls	r3, r3, #8
 8006470:	4319      	orrs	r1, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	3b01      	subs	r3, #1
 8006478:	031b      	lsls	r3, r3, #12
 800647a:	4319      	orrs	r1, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	3b01      	subs	r3, #1
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	4319      	orrs	r1, r3
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	3b01      	subs	r3, #1
 800648c:	051b      	lsls	r3, r3, #20
 800648e:	4319      	orrs	r1, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	3b01      	subs	r3, #1
 8006496:	061b      	lsls	r3, r3, #24
 8006498:	430b      	orrs	r3, r1
 800649a:	431a      	orrs	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	609a      	str	r2, [r3, #8]
 80064a0:	e02f      	b.n	8006502 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	68d2      	ldr	r2, [r2, #12]
 80064b2:	3a01      	subs	r2, #1
 80064b4:	0311      	lsls	r1, r2, #12
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	6952      	ldr	r2, [r2, #20]
 80064ba:	3a01      	subs	r2, #1
 80064bc:	0512      	lsls	r2, r2, #20
 80064be:	430a      	orrs	r2, r1
 80064c0:	431a      	orrs	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	1e59      	subs	r1, r3, #1
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	3b01      	subs	r3, #1
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	4319      	orrs	r1, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	4319      	orrs	r1, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	4319      	orrs	r1, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	061b      	lsls	r3, r3, #24
 80064fa:	430b      	orrs	r3, r1
 80064fc:	431a      	orrs	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006510:	b084      	sub	sp, #16
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	f107 001c 	add.w	r0, r7, #28
 800651e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	2b01      	cmp	r3, #1
 8006526:	d122      	bne.n	800656e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800653c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006552:	2b01      	cmp	r3, #1
 8006554:	d105      	bne.n	8006562 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f9c0 	bl	80068e8 <USB_CoreReset>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
 800656c:	e01a      	b.n	80065a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f9b4 	bl	80068e8 <USB_CoreReset>
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d106      	bne.n	8006598 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	639a      	str	r2, [r3, #56]	; 0x38
 8006596:	e005      	b.n	80065a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d10b      	bne.n	80065c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f043 0206 	orr.w	r2, r3, #6
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f043 0220 	orr.w	r2, r3, #32
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065ce:	b004      	add	sp, #16
 80065d0:	4770      	bx	lr

080065d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f043 0201 	orr.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f023 0201 	bic.w	r2, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d115      	bne.n	8006664 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006644:	2001      	movs	r0, #1
 8006646:	f7fb f90b 	bl	8001860 <HAL_Delay>
      ms++;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3301      	adds	r3, #1
 800664e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f93a 	bl	80068ca <USB_GetMode>
 8006656:	4603      	mov	r3, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	d01e      	beq.n	800669a <USB_SetCurrentMode+0x84>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b31      	cmp	r3, #49	; 0x31
 8006660:	d9f0      	bls.n	8006644 <USB_SetCurrentMode+0x2e>
 8006662:	e01a      	b.n	800669a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d115      	bne.n	8006696 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006676:	2001      	movs	r0, #1
 8006678:	f7fb f8f2 	bl	8001860 <HAL_Delay>
      ms++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f921 	bl	80068ca <USB_GetMode>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <USB_SetCurrentMode+0x84>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b31      	cmp	r3, #49	; 0x31
 8006692:	d9f0      	bls.n	8006676 <USB_SetCurrentMode+0x60>
 8006694:	e001      	b.n	800669a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e005      	b.n	80066a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b32      	cmp	r3, #50	; 0x32
 800669e:	d101      	bne.n	80066a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4a13      	ldr	r2, [pc, #76]	; (8006714 <USB_FlushTxFifo+0x64>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e01b      	b.n	8006708 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	daf2      	bge.n	80066be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	019b      	lsls	r3, r3, #6
 80066e0:	f043 0220 	orr.w	r2, r3, #32
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4a08      	ldr	r2, [pc, #32]	; (8006714 <USB_FlushTxFifo+0x64>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d901      	bls.n	80066fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e006      	b.n	8006708 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b20      	cmp	r3, #32
 8006704:	d0f0      	beq.n	80066e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	00030d40 	.word	0x00030d40

08006718 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3301      	adds	r3, #1
 8006728:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4a11      	ldr	r2, [pc, #68]	; (8006774 <USB_FlushRxFifo+0x5c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d901      	bls.n	8006736 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e018      	b.n	8006768 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	daf2      	bge.n	8006724 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2210      	movs	r2, #16
 8006746:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4a08      	ldr	r2, [pc, #32]	; (8006774 <USB_FlushRxFifo+0x5c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d901      	bls.n	800675a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e006      	b.n	8006768 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b10      	cmp	r3, #16
 8006764:	d0f0      	beq.n	8006748 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	00030d40 	.word	0x00030d40

08006778 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006778:	b480      	push	{r7}
 800677a:	b089      	sub	sp, #36	; 0x24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	4611      	mov	r1, r2
 8006784:	461a      	mov	r2, r3
 8006786:	460b      	mov	r3, r1
 8006788:	71fb      	strb	r3, [r7, #7]
 800678a:	4613      	mov	r3, r2
 800678c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006796:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d123      	bne.n	80067e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800679e:	88bb      	ldrh	r3, [r7, #4]
 80067a0:	3303      	adds	r3, #3
 80067a2:	089b      	lsrs	r3, r3, #2
 80067a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	e018      	b.n	80067de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067ac:	79fb      	ldrb	r3, [r7, #7]
 80067ae:	031a      	lsls	r2, r3, #12
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b8:	461a      	mov	r2, r3
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	3301      	adds	r3, #1
 80067c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	3301      	adds	r3, #1
 80067ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	3301      	adds	r3, #1
 80067d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3301      	adds	r3, #1
 80067d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	3301      	adds	r3, #1
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d3e2      	bcc.n	80067ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3724      	adds	r7, #36	; 0x24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b08b      	sub	sp, #44	; 0x2c
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	089b      	lsrs	r3, r3, #2
 800680e:	b29b      	uxth	r3, r3
 8006810:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006812:	88fb      	ldrh	r3, [r7, #6]
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800681a:	2300      	movs	r3, #0
 800681c:	623b      	str	r3, [r7, #32]
 800681e:	e014      	b.n	800684a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	601a      	str	r2, [r3, #0]
    pDest++;
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	3301      	adds	r3, #1
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	3301      	adds	r3, #1
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	3301      	adds	r3, #1
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	3301      	adds	r3, #1
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	3301      	adds	r3, #1
 8006848:	623b      	str	r3, [r7, #32]
 800684a:	6a3a      	ldr	r2, [r7, #32]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	429a      	cmp	r2, r3
 8006850:	d3e6      	bcc.n	8006820 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006852:	8bfb      	ldrh	r3, [r7, #30]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01e      	beq.n	8006896 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006862:	461a      	mov	r2, r3
 8006864:	f107 0310 	add.w	r3, r7, #16
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
 8006878:	b2da      	uxtb	r2, r3
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	701a      	strb	r2, [r3, #0]
      i++;
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	3301      	adds	r3, #1
 8006882:	623b      	str	r3, [r7, #32]
      pDest++;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	3301      	adds	r3, #1
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800688a:	8bfb      	ldrh	r3, [r7, #30]
 800688c:	3b01      	subs	r3, #1
 800688e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006890:	8bfb      	ldrh	r3, [r7, #30]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1ea      	bne.n	800686c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006898:	4618      	mov	r0, r3
 800689a:	372c      	adds	r7, #44	; 0x2c
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4013      	ands	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068bc:	68fb      	ldr	r3, [r7, #12]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f003 0301 	and.w	r3, r3, #1
}
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3301      	adds	r3, #1
 80068f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a13      	ldr	r2, [pc, #76]	; (800694c <USB_CoreReset+0x64>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d901      	bls.n	8006906 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e01b      	b.n	800693e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	daf2      	bge.n	80068f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f043 0201 	orr.w	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3301      	adds	r3, #1
 8006922:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4a09      	ldr	r2, [pc, #36]	; (800694c <USB_CoreReset+0x64>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d901      	bls.n	8006930 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e006      	b.n	800693e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b01      	cmp	r3, #1
 800693a:	d0f0      	beq.n	800691e <USB_CoreReset+0x36>

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	00030d40 	.word	0x00030d40

08006950 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006950:	b084      	sub	sp, #16
 8006952:	b580      	push	{r7, lr}
 8006954:	b086      	sub	sp, #24
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800695e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006970:	461a      	mov	r2, r3
 8006972:	2300      	movs	r3, #0
 8006974:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006986:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d018      	beq.n	80069d8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d10a      	bne.n	80069c2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069ba:	f043 0304 	orr.w	r3, r3, #4
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	e014      	b.n	80069ec <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069d0:	f023 0304 	bic.w	r3, r3, #4
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	e009      	b.n	80069ec <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069e6:	f023 0304 	bic.w	r3, r3, #4
 80069ea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069ec:	2110      	movs	r1, #16
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff fe5e 	bl	80066b0 <USB_FlushTxFifo>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff fe8a 	bl	8006718 <USB_FlushRxFifo>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a0e:	2300      	movs	r3, #0
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	e015      	b.n	8006a40 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a20:	461a      	mov	r2, r3
 8006a22:	f04f 33ff 	mov.w	r3, #4294967295
 8006a26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a34:	461a      	mov	r2, r3
 8006a36:	2300      	movs	r3, #0
 8006a38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	613b      	str	r3, [r7, #16]
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d3e5      	bcc.n	8006a14 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f04f 32ff 	mov.w	r2, #4294967295
 8006a54:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a13      	ldr	r2, [pc, #76]	; (8006abc <USB_HostInit+0x16c>)
 8006a6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a13      	ldr	r2, [pc, #76]	; (8006ac0 <USB_HostInit+0x170>)
 8006a74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006a78:	e009      	b.n	8006a8e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2280      	movs	r2, #128	; 0x80
 8006a7e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a10      	ldr	r2, [pc, #64]	; (8006ac4 <USB_HostInit+0x174>)
 8006a84:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a0f      	ldr	r2, [pc, #60]	; (8006ac8 <USB_HostInit+0x178>)
 8006a8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d105      	bne.n	8006aa0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f043 0210 	orr.w	r2, r3, #16
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	4b09      	ldr	r3, [pc, #36]	; (8006acc <USB_HostInit+0x17c>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ab8:	b004      	add	sp, #16
 8006aba:	4770      	bx	lr
 8006abc:	01000200 	.word	0x01000200
 8006ac0:	00e00300 	.word	0x00e00300
 8006ac4:	00600080 	.word	0x00600080
 8006ac8:	004000e0 	.word	0x004000e0
 8006acc:	a3200008 	.word	0xa3200008

08006ad0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aee:	f023 0303 	bic.w	r3, r3, #3
 8006af2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	68f9      	ldr	r1, [r7, #12]
 8006b04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d107      	bne.n	8006b22 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b1e:	6053      	str	r3, [r2, #4]
 8006b20:	e009      	b.n	8006b36 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d106      	bne.n	8006b36 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f241 7370 	movw	r3, #6000	; 0x1770
 8006b34:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b72:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006b74:	2064      	movs	r0, #100	; 0x64
 8006b76:	f7fa fe73 	bl	8001860 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b86:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006b88:	200a      	movs	r0, #10
 8006b8a:	f7fa fe69 	bl	8001860 <HAL_Delay>

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006bbc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d109      	bne.n	8006bdc <USB_DriveVbus+0x44>
 8006bc8:	78fb      	ldrb	r3, [r7, #3]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d106      	bne.n	8006bdc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bda:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be6:	d109      	bne.n	8006bfc <USB_DriveVbus+0x64>
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bfa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	0c5b      	lsrs	r3, r3, #17
 8006c28:	f003 0303 	and.w	r3, r3, #3
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	b29b      	uxth	r3, r3
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
	...

08006c5c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	4608      	mov	r0, r1
 8006c66:	4611      	mov	r1, r2
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	70fb      	strb	r3, [r7, #3]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	70bb      	strb	r3, [r7, #2]
 8006c72:	4613      	mov	r3, r2
 8006c74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c90:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006c92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d87e      	bhi.n	8006d98 <USB_HC_Init+0x13c>
 8006c9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <USB_HC_Init+0x44>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006d5b 	.word	0x08006d5b
 8006ca8:	08006cb1 	.word	0x08006cb1
 8006cac:	08006d1d 	.word	0x08006d1d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f240 439d 	movw	r3, #1181	; 0x49d
 8006cc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006cc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	da10      	bge.n	8006cee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	78fa      	ldrb	r2, [r7, #3]
 8006cdc:	0151      	lsls	r1, r2, #5
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006cec:	e057      	b.n	8006d9e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d051      	beq.n	8006d9e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	78fa      	ldrb	r2, [r7, #3]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d18:	60d3      	str	r3, [r2, #12]
      break;
 8006d1a:	e040      	b.n	8006d9e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006d2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	da34      	bge.n	8006da2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d56:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d58:	e023      	b.n	8006da2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d66:	461a      	mov	r2, r3
 8006d68:	f240 2325 	movw	r3, #549	; 0x225
 8006d6c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da17      	bge.n	8006da6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	78fa      	ldrb	r2, [r7, #3]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d90:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006d94:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d96:	e006      	b.n	8006da6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	77fb      	strb	r3, [r7, #31]
      break;
 8006d9c:	e004      	b.n	8006da8 <USB_HC_Init+0x14c>
      break;
 8006d9e:	bf00      	nop
 8006da0:	e002      	b.n	8006da8 <USB_HC_Init+0x14c>
      break;
 8006da2:	bf00      	nop
 8006da4:	e000      	b.n	8006da8 <USB_HC_Init+0x14c>
      break;
 8006da6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	78fa      	ldrb	r2, [r7, #3]
 8006db8:	0151      	lsls	r1, r2, #5
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	440a      	add	r2, r1
 8006dbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dc2:	f043 0302 	orr.w	r3, r3, #2
 8006dc6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dce:	699a      	ldr	r2, [r3, #24]
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ddc:	6939      	ldr	r1, [r7, #16]
 8006dde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006de2:	4313      	orrs	r3, r2
 8006de4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006df2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da03      	bge.n	8006e02 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	e001      	b.n	8006e06 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff feff 	bl	8006c0a <USB_GetHostSpeed>
 8006e0c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006e0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d106      	bne.n	8006e24 <USB_HC_Init+0x1c8>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d003      	beq.n	8006e24 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	e001      	b.n	8006e28 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e28:	787b      	ldrb	r3, [r7, #1]
 8006e2a:	059b      	lsls	r3, r3, #22
 8006e2c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e30:	78bb      	ldrb	r3, [r7, #2]
 8006e32:	02db      	lsls	r3, r3, #11
 8006e34:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e38:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e3e:	049b      	lsls	r3, r3, #18
 8006e40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e44:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e46:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006e48:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e4c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e52:	78fb      	ldrb	r3, [r7, #3]
 8006e54:	0159      	lsls	r1, r3, #5
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	440b      	add	r3, r1
 8006e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e64:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006e66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d003      	beq.n	8006e76 <USB_HC_Init+0x21a>
 8006e6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d10f      	bne.n	8006e96 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	78fa      	ldrb	r2, [r7, #3]
 8006e86:	0151      	lsls	r1, r2, #5
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	440a      	add	r2, r1
 8006e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e94:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3720      	adds	r7, #32
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08c      	sub	sp, #48	; 0x30
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ebc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d02d      	beq.n	8006f26 <USB_HC_StartXfer+0x86>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	791b      	ldrb	r3, [r3, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d129      	bne.n	8006f26 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d117      	bne.n	8006f08 <USB_HC_StartXfer+0x68>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	79db      	ldrb	r3, [r3, #7]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <USB_HC_StartXfer+0x48>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	79db      	ldrb	r3, [r3, #7]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d10f      	bne.n	8006f08 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	6a3a      	ldr	r2, [r7, #32]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10b      	bne.n	8006f26 <USB_HC_StartXfer+0x86>
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	795b      	ldrb	r3, [r3, #5]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d107      	bne.n	8006f26 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	785b      	ldrb	r3, [r3, #1]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 fa0f 	bl	8007340 <USB_DoPing>
      return HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e0f8      	b.n	8007118 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d018      	beq.n	8006f60 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	8912      	ldrh	r2, [r2, #8]
 8006f36:	4413      	add	r3, r2
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	8912      	ldrh	r2, [r2, #8]
 8006f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f42:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006f44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f46:	8b7b      	ldrh	r3, [r7, #26]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d90b      	bls.n	8006f64 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006f4c:	8b7b      	ldrh	r3, [r7, #26]
 8006f4e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	8912      	ldrh	r2, [r2, #8]
 8006f56:	fb03 f202 	mul.w	r2, r3, r2
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	611a      	str	r2, [r3, #16]
 8006f5e:	e001      	b.n	8006f64 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006f60:	2301      	movs	r3, #1
 8006f62:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	78db      	ldrb	r3, [r3, #3]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	8912      	ldrh	r2, [r2, #8]
 8006f72:	fb03 f202 	mul.w	r2, r3, r2
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	611a      	str	r2, [r3, #16]
 8006f7a:	e003      	b.n	8006f84 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	695a      	ldr	r2, [r3, #20]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f8e:	04d9      	lsls	r1, r3, #19
 8006f90:	4b63      	ldr	r3, [pc, #396]	; (8007120 <USB_HC_StartXfer+0x280>)
 8006f92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	7a9b      	ldrb	r3, [r3, #10]
 8006f9a:	075b      	lsls	r3, r3, #29
 8006f9c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fa0:	69f9      	ldr	r1, [r7, #28]
 8006fa2:	0148      	lsls	r0, r1, #5
 8006fa4:	6a39      	ldr	r1, [r7, #32]
 8006fa6:	4401      	add	r1, r0
 8006fa8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	68d9      	ldr	r1, [r3, #12]
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc6:	460a      	mov	r2, r1
 8006fc8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bf0c      	ite	eq
 8006fda:	2301      	moveq	r3, #1
 8006fdc:	2300      	movne	r3, #0
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	0151      	lsls	r1, r2, #5
 8006ff4:	6a3a      	ldr	r2, [r7, #32]
 8006ff6:	440a      	add	r2, r1
 8006ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ffc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007000:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	4413      	add	r3, r2
 800700a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	7e7b      	ldrb	r3, [r7, #25]
 8007012:	075b      	lsls	r3, r3, #29
 8007014:	69f9      	ldr	r1, [r7, #28]
 8007016:	0148      	lsls	r0, r1, #5
 8007018:	6a39      	ldr	r1, [r7, #32]
 800701a:	4401      	add	r1, r0
 800701c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007020:	4313      	orrs	r3, r2
 8007022:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	4413      	add	r3, r2
 800702c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800703a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	78db      	ldrb	r3, [r3, #3]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d004      	beq.n	800704e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	e003      	b.n	8007056 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007054:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800705c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706a:	461a      	mov	r2, r3
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007070:	79fb      	ldrb	r3, [r7, #7]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	e04e      	b.n	8007118 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	78db      	ldrb	r3, [r3, #3]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d149      	bne.n	8007116 <USB_HC_StartXfer+0x276>
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d045      	beq.n	8007116 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	79db      	ldrb	r3, [r3, #7]
 800708e:	2b03      	cmp	r3, #3
 8007090:	d830      	bhi.n	80070f4 <USB_HC_StartXfer+0x254>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <USB_HC_StartXfer+0x1f8>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070a9 	.word	0x080070a9
 800709c:	080070cd 	.word	0x080070cd
 80070a0:	080070a9 	.word	0x080070a9
 80070a4:	080070cd 	.word	0x080070cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	3303      	adds	r3, #3
 80070ae:	089b      	lsrs	r3, r3, #2
 80070b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80070b2:	8afa      	ldrh	r2, [r7, #22]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d91c      	bls.n	80070f8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	f043 0220 	orr.w	r2, r3, #32
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80070ca:	e015      	b.n	80070f8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	3303      	adds	r3, #3
 80070d2:	089b      	lsrs	r3, r3, #2
 80070d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80070d6:	8afa      	ldrh	r2, [r7, #22]
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d90a      	bls.n	80070fc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80070f2:	e003      	b.n	80070fc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80070f4:	bf00      	nop
 80070f6:	e002      	b.n	80070fe <USB_HC_StartXfer+0x25e>
        break;
 80070f8:	bf00      	nop
 80070fa:	e000      	b.n	80070fe <USB_HC_StartXfer+0x25e>
        break;
 80070fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	68d9      	ldr	r1, [r3, #12]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	785a      	ldrb	r2, [r3, #1]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	b29b      	uxth	r3, r3
 800710c:	2000      	movs	r0, #0
 800710e:	9000      	str	r0, [sp, #0]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff fb31 	bl	8006778 <USB_WritePacket>
  }

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3728      	adds	r7, #40	; 0x28
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	1ff80000 	.word	0x1ff80000

08007124 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	b29b      	uxth	r3, r3
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007146:	b480      	push	{r7}
 8007148:	b089      	sub	sp, #36	; 0x24
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	460b      	mov	r3, r1
 8007150:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	4413      	add	r3, r2
 8007166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	0c9b      	lsrs	r3, r3, #18
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	4413      	add	r3, r2
 800717c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	0fdb      	lsrs	r3, r3, #31
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b20      	cmp	r3, #32
 8007194:	d104      	bne.n	80071a0 <USB_HC_Halt+0x5a>
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e0c8      	b.n	8007332 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <USB_HC_Halt+0x66>
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d163      	bne.n	8007274 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ca:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f040 80ab 	bne.w	8007330 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d133      	bne.n	800724e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	69fa      	ldr	r2, [r7, #28]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007204:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	4413      	add	r3, r2
 800720e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	440a      	add	r2, r1
 800721c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007224:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3301      	adds	r3, #1
 800722a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007232:	d81d      	bhi.n	8007270 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	4413      	add	r3, r2
 800723c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800724a:	d0ec      	beq.n	8007226 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800724c:	e070      	b.n	8007330 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	440a      	add	r2, r1
 8007264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800726c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800726e:	e05f      	b.n	8007330 <USB_HC_Halt+0x1ea>
            break;
 8007270:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007272:	e05d      	b.n	8007330 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	4413      	add	r3, r2
 800727c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	440a      	add	r2, r1
 800728a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800728e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007292:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d133      	bne.n	800730c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	0151      	lsls	r1, r2, #5
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	440a      	add	r2, r1
 80072ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	0151      	lsls	r1, r2, #5
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	440a      	add	r2, r1
 80072da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072e2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3301      	adds	r3, #1
 80072e8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072f0:	d81d      	bhi.n	800732e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007308:	d0ec      	beq.n	80072e4 <USB_HC_Halt+0x19e>
 800730a:	e011      	b.n	8007330 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	4413      	add	r3, r2
 8007314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	440a      	add	r2, r1
 8007322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007326:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	e000      	b.n	8007330 <USB_HC_Halt+0x1ea>
          break;
 800732e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3724      	adds	r7, #36	; 0x24
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007354:	2301      	movs	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	04da      	lsls	r2, r3, #19
 800735c:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <USB_DoPing+0x74>)
 800735e:	4013      	ands	r3, r2
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	440a      	add	r2, r1
 8007368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800736c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007370:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	4413      	add	r3, r2
 800737a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007388:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007390:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	4413      	add	r3, r2
 800739a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739e:	461a      	mov	r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	1ff80000 	.word	0x1ff80000

080073b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff f911 	bl	80065f4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073d2:	2110      	movs	r1, #16
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff f96b 	bl	80066b0 <USB_FlushTxFifo>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff f997 	bl	8006718 <USB_FlushRxFifo>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80073f4:	2300      	movs	r3, #0
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	e01f      	b.n	800743a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	4413      	add	r3, r2
 8007402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007410:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007418:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007420:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	4413      	add	r3, r2
 800742a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742e:	461a      	mov	r2, r3
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	3301      	adds	r3, #1
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b0f      	cmp	r3, #15
 800743e:	d9dc      	bls.n	80073fa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007440:	2300      	movs	r3, #0
 8007442:	61bb      	str	r3, [r7, #24]
 8007444:	e034      	b.n	80074b0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	4413      	add	r3, r2
 800744e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800745c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007464:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800746c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	4413      	add	r3, r2
 8007476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747a:	461a      	mov	r2, r3
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3301      	adds	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800748c:	d80c      	bhi.n	80074a8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	4413      	add	r3, r2
 8007496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a4:	d0ec      	beq.n	8007480 <USB_StopHost+0xc8>
 80074a6:	e000      	b.n	80074aa <USB_StopHost+0xf2>
        break;
 80074a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	3301      	adds	r3, #1
 80074ae:	61bb      	str	r3, [r7, #24]
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	2b0f      	cmp	r3, #15
 80074b4:	d9c7      	bls.n	8007446 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074bc:	461a      	mov	r2, r3
 80074be:	f04f 33ff 	mov.w	r3, #4294967295
 80074c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff f880 	bl	80065d2 <USB_EnableGlobalInt>

  return ret;
 80074d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3720      	adds	r7, #32
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80074dc:	b590      	push	{r4, r7, lr}
 80074de:	b089      	sub	sp, #36	; 0x24
 80074e0:	af04      	add	r7, sp, #16
 80074e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80074e4:	2301      	movs	r3, #1
 80074e6:	2202      	movs	r2, #2
 80074e8:	2102      	movs	r1, #2
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fcb8 	bl	8007e60 <USBH_FindInterface>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	2bff      	cmp	r3, #255	; 0xff
 80074f8:	d002      	beq.n	8007500 <USBH_CDC_InterfaceInit+0x24>
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d901      	bls.n	8007504 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007500:	2302      	movs	r3, #2
 8007502:	e13d      	b.n	8007780 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fc8d 	bl	8007e28 <USBH_SelectInterface>
 800750e:	4603      	mov	r3, r0
 8007510:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007518:	2302      	movs	r3, #2
 800751a:	e131      	b.n	8007780 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007522:	2050      	movs	r0, #80	; 0x50
 8007524:	f004 fff8 	bl	800c518 <malloc>
 8007528:	4603      	mov	r3, r0
 800752a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800753c:	2302      	movs	r3, #2
 800753e:	e11f      	b.n	8007780 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007540:	2250      	movs	r2, #80	; 0x50
 8007542:	2100      	movs	r1, #0
 8007544:	68b8      	ldr	r0, [r7, #8]
 8007546:	f005 f805 	bl	800c554 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	211a      	movs	r1, #26
 8007550:	fb01 f303 	mul.w	r3, r1, r3
 8007554:	4413      	add	r3, r2
 8007556:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b25b      	sxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	da15      	bge.n	800758e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	211a      	movs	r1, #26
 8007568:	fb01 f303 	mul.w	r3, r1, r3
 800756c:	4413      	add	r3, r2
 800756e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007572:	781a      	ldrb	r2, [r3, #0]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	211a      	movs	r1, #26
 800757e:	fb01 f303 	mul.w	r3, r1, r3
 8007582:	4413      	add	r3, r2
 8007584:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007588:	881a      	ldrh	r2, [r3, #0]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f002 f988 	bl	80098aa <USBH_AllocPipe>
 800759a:	4603      	mov	r3, r0
 800759c:	461a      	mov	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	7819      	ldrb	r1, [r3, #0]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	7858      	ldrb	r0, [r3, #1]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	8952      	ldrh	r2, [r2, #10]
 80075ba:	9202      	str	r2, [sp, #8]
 80075bc:	2203      	movs	r2, #3
 80075be:	9201      	str	r2, [sp, #4]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	4623      	mov	r3, r4
 80075c4:	4602      	mov	r2, r0
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f002 f940 	bl	800984c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2200      	movs	r2, #0
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f004 fef1 	bl	800c3bc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80075da:	2300      	movs	r3, #0
 80075dc:	2200      	movs	r2, #0
 80075de:	210a      	movs	r1, #10
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fc3d 	bl	8007e60 <USBH_FindInterface>
 80075e6:	4603      	mov	r3, r0
 80075e8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	2bff      	cmp	r3, #255	; 0xff
 80075ee:	d002      	beq.n	80075f6 <USBH_CDC_InterfaceInit+0x11a>
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d901      	bls.n	80075fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80075f6:	2302      	movs	r3, #2
 80075f8:	e0c2      	b.n	8007780 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	211a      	movs	r1, #26
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	4413      	add	r3, r2
 8007606:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	b25b      	sxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	da16      	bge.n	8007640 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	211a      	movs	r1, #26
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	4413      	add	r3, r2
 800761e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007622:	781a      	ldrb	r2, [r3, #0]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	211a      	movs	r1, #26
 800762e:	fb01 f303 	mul.w	r3, r1, r3
 8007632:	4413      	add	r3, r2
 8007634:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007638:	881a      	ldrh	r2, [r3, #0]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	835a      	strh	r2, [r3, #26]
 800763e:	e015      	b.n	800766c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	211a      	movs	r1, #26
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	4413      	add	r3, r2
 800764c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	211a      	movs	r1, #26
 800765c:	fb01 f303 	mul.w	r3, r1, r3
 8007660:	4413      	add	r3, r2
 8007662:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007666:	881a      	ldrh	r2, [r3, #0]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	211a      	movs	r1, #26
 8007672:	fb01 f303 	mul.w	r3, r1, r3
 8007676:	4413      	add	r3, r2
 8007678:	f203 3356 	addw	r3, r3, #854	; 0x356
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	b25b      	sxtb	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	da16      	bge.n	80076b2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	211a      	movs	r1, #26
 800768a:	fb01 f303 	mul.w	r3, r1, r3
 800768e:	4413      	add	r3, r2
 8007690:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	211a      	movs	r1, #26
 80076a0:	fb01 f303 	mul.w	r3, r1, r3
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076aa:	881a      	ldrh	r2, [r3, #0]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	835a      	strh	r2, [r3, #26]
 80076b0:	e015      	b.n	80076de <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	211a      	movs	r1, #26
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	4413      	add	r3, r2
 80076be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	211a      	movs	r1, #26
 80076ce:	fb01 f303 	mul.w	r3, r1, r3
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076d8:	881a      	ldrh	r2, [r3, #0]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	7b9b      	ldrb	r3, [r3, #14]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f002 f8e0 	bl	80098aa <USBH_AllocPipe>
 80076ea:	4603      	mov	r3, r0
 80076ec:	461a      	mov	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	7bdb      	ldrb	r3, [r3, #15]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f002 f8d6 	bl	80098aa <USBH_AllocPipe>
 80076fe:	4603      	mov	r3, r0
 8007700:	461a      	mov	r2, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	7b59      	ldrb	r1, [r3, #13]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	7b98      	ldrb	r0, [r3, #14]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	8b12      	ldrh	r2, [r2, #24]
 800771e:	9202      	str	r2, [sp, #8]
 8007720:	2202      	movs	r2, #2
 8007722:	9201      	str	r2, [sp, #4]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	4623      	mov	r3, r4
 8007728:	4602      	mov	r2, r0
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f002 f88e 	bl	800984c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	7b19      	ldrb	r1, [r3, #12]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	7bd8      	ldrb	r0, [r3, #15]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	8b52      	ldrh	r2, [r2, #26]
 8007748:	9202      	str	r2, [sp, #8]
 800774a:	2202      	movs	r2, #2
 800774c:	9201      	str	r2, [sp, #4]
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	4623      	mov	r3, r4
 8007752:	4602      	mov	r2, r0
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f002 f879 	bl	800984c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	7b5b      	ldrb	r3, [r3, #13]
 8007766:	2200      	movs	r2, #0
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f004 fe26 	bl	800c3bc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	7b1b      	ldrb	r3, [r3, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f004 fe1f 	bl	800c3bc <USBH_LL_SetToggle>

  return USBH_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	bd90      	pop	{r4, r7, pc}

08007788 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00e      	beq.n	80077c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f002 f86e 	bl	800988a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f002 f899 	bl	80098ec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	7b1b      	ldrb	r3, [r3, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00e      	beq.n	80077e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	7b1b      	ldrb	r3, [r3, #12]
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f002 f85b 	bl	800988a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	7b1b      	ldrb	r3, [r3, #12]
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f002 f886 	bl	80098ec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	7b5b      	ldrb	r3, [r3, #13]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00e      	beq.n	800780c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	7b5b      	ldrb	r3, [r3, #13]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f002 f848 	bl	800988a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	7b5b      	ldrb	r3, [r3, #13]
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f002 f873 	bl	80098ec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	4618      	mov	r0, r3
 8007822:	f004 fe81 	bl	800c528 <free>
    phost->pActiveClass->pData = 0U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800782c:	2200      	movs	r2, #0
 800782e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3340      	adds	r3, #64	; 0x40
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f8b1 	bl	80079ba <GetLineCoding>
 8007858:	4603      	mov	r3, r0
 800785a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800785c:	7afb      	ldrb	r3, [r7, #11]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d105      	bne.n	800786e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007868:	2102      	movs	r1, #2
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800786e:	7afb      	ldrb	r3, [r7, #11]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007880:	2301      	movs	r3, #1
 8007882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007898:	2b04      	cmp	r3, #4
 800789a:	d877      	bhi.n	800798c <USBH_CDC_Process+0x114>
 800789c:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <USBH_CDC_Process+0x2c>)
 800789e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a2:	bf00      	nop
 80078a4:	080078b9 	.word	0x080078b9
 80078a8:	080078bf 	.word	0x080078bf
 80078ac:	080078ef 	.word	0x080078ef
 80078b0:	08007963 	.word	0x08007963
 80078b4:	08007971 	.word	0x08007971
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
      break;
 80078bc:	e06d      	b.n	800799a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f897 	bl	80079f8 <SetLineCoding>
 80078ca:	4603      	mov	r3, r0
 80078cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078dc:	e058      	b.n	8007990 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d055      	beq.n	8007990 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2204      	movs	r2, #4
 80078e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80078ec:	e050      	b.n	8007990 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	3340      	adds	r3, #64	; 0x40
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f860 	bl	80079ba <GetLineCoding>
 80078fa:	4603      	mov	r3, r0
 80078fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d126      	bne.n	8007952 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007916:	791b      	ldrb	r3, [r3, #4]
 8007918:	429a      	cmp	r2, r3
 800791a:	d13b      	bne.n	8007994 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007926:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007928:	429a      	cmp	r2, r3
 800792a:	d133      	bne.n	8007994 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007936:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007938:	429a      	cmp	r2, r3
 800793a:	d12b      	bne.n	8007994 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007944:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007946:	429a      	cmp	r2, r3
 8007948:	d124      	bne.n	8007994 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f982 	bl	8007c54 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007950:	e020      	b.n	8007994 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d01d      	beq.n	8007994 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2204      	movs	r2, #4
 800795c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007960:	e018      	b.n	8007994 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f867 	bl	8007a36 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f8f6 	bl	8007b5a <CDC_ProcessReception>
      break;
 800796e:	e014      	b.n	800799a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007970:	2100      	movs	r1, #0
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 f95b 	bl	8008c2e <USBH_ClrFeature>
 8007978:	4603      	mov	r3, r0
 800797a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10a      	bne.n	8007998 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800798a:	e005      	b.n	8007998 <USBH_CDC_Process+0x120>

    default:
      break;
 800798c:	bf00      	nop
 800798e:	e004      	b.n	800799a <USBH_CDC_Process+0x122>
      break;
 8007990:	bf00      	nop
 8007992:	e002      	b.n	800799a <USBH_CDC_Process+0x122>
      break;
 8007994:	bf00      	nop
 8007996:	e000      	b.n	800799a <USBH_CDC_Process+0x122>
      break;
 8007998:	bf00      	nop

  }

  return status;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b082      	sub	sp, #8
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	22a1      	movs	r2, #161	; 0xa1
 80079c8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2221      	movs	r2, #33	; 0x21
 80079ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2207      	movs	r2, #7
 80079e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2207      	movs	r2, #7
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 fbed 	bl	80091c8 <USBH_CtlReq>
 80079ee:	4603      	mov	r3, r0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2221      	movs	r2, #33	; 0x21
 8007a06:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2207      	movs	r2, #7
 8007a1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2207      	movs	r2, #7
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 fbce 	bl	80091c8 <USBH_CtlReq>
 8007a2c:	4603      	mov	r3, r0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b086      	sub	sp, #24
 8007a3a:	af02      	add	r7, sp, #8
 8007a3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d002      	beq.n	8007a5c <CDC_ProcessTransmission+0x26>
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d023      	beq.n	8007aa2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007a5a:	e07a      	b.n	8007b52 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	8b12      	ldrh	r2, [r2, #24]
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d90b      	bls.n	8007a80 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	69d9      	ldr	r1, [r3, #28]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8b1a      	ldrh	r2, [r3, #24]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	7b5b      	ldrb	r3, [r3, #13]
 8007a74:	2001      	movs	r0, #1
 8007a76:	9000      	str	r0, [sp, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 fea4 	bl	80097c6 <USBH_BulkSendData>
 8007a7e:	e00b      	b.n	8007a98 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	7b5b      	ldrb	r3, [r3, #13]
 8007a8e:	2001      	movs	r0, #1
 8007a90:	9000      	str	r0, [sp, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 fe97 	bl	80097c6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007aa0:	e057      	b.n	8007b52 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	7b5b      	ldrb	r3, [r3, #13]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f004 fc5d 	bl	800c368 <USBH_LL_GetURBState>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d136      	bne.n	8007b26 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	8b12      	ldrh	r2, [r2, #24]
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d90e      	bls.n	8007ae2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	8b12      	ldrh	r2, [r2, #24]
 8007acc:	1a9a      	subs	r2, r3, r2
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	8b12      	ldrh	r2, [r2, #24]
 8007ada:	441a      	add	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	61da      	str	r2, [r3, #28]
 8007ae0:	e002      	b.n	8007ae8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007af8:	e006      	b.n	8007b08 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f892 	bl	8007c2c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	4619      	mov	r1, r3
 8007b20:	f001 ffe0 	bl	8009ae4 <osMessagePut>
      break;
 8007b24:	e014      	b.n	8007b50 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007b26:	7afb      	ldrb	r3, [r7, #11]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d111      	bne.n	8007b50 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2204      	movs	r2, #4
 8007b38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	f001 ffca 	bl	8009ae4 <osMessagePut>
      break;
 8007b50:	bf00      	nop
  }
}
 8007b52:	bf00      	nop
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d002      	beq.n	8007b80 <CDC_ProcessReception+0x26>
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d00e      	beq.n	8007b9c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007b7e:	e051      	b.n	8007c24 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	6a19      	ldr	r1, [r3, #32]
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	8b5a      	ldrh	r2, [r3, #26]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	7b1b      	ldrb	r3, [r3, #12]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fe3f 	bl	8009810 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2204      	movs	r2, #4
 8007b96:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b9a:	e043      	b.n	8007c24 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	7b1b      	ldrb	r3, [r3, #12]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f004 fbe0 	bl	800c368 <USBH_LL_GetURBState>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007bac:	7cfb      	ldrb	r3, [r7, #19]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d137      	bne.n	8007c22 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	7b1b      	ldrb	r3, [r3, #12]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f004 fb43 	bl	800c244 <USBH_LL_GetLastXferSize>
 8007bbe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d016      	beq.n	8007bf8 <CDC_ProcessReception+0x9e>
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	8b5b      	ldrh	r3, [r3, #26]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d910      	bls.n	8007bf8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	1ad2      	subs	r2, r2, r3
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	6a1a      	ldr	r2, [r3, #32]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	441a      	add	r2, r3
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007bf6:	e006      	b.n	8007c06 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f81d 	bl	8007c40 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2204      	movs	r2, #4
 8007c0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	f001 ff61 	bl	8009ae4 <osMessagePut>
      break;
 8007c22:	bf00      	nop
  }
}
 8007c24:	bf00      	nop
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007c68:	b5b0      	push	{r4, r5, r7, lr}
 8007c6a:	b090      	sub	sp, #64	; 0x40
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e04d      	b.n	8007d1c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	79fa      	ldrb	r2, [r7, #7]
 8007c84:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f847 	bl	8007d2c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007ccc:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <USBH_Init+0xbc>)
 8007cce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 fed7 	bl	8009a92 <osMessageCreate>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007cec:	4b0e      	ldr	r3, [pc, #56]	; (8007d28 <USBH_Init+0xc0>)
 8007cee:	f107 0414 	add.w	r4, r7, #20
 8007cf2:	461d      	mov	r5, r3
 8007cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007cfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007d00:	f107 0314 	add.w	r3, r7, #20
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 fe63 	bl	80099d2 <osThreadCreate>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f004 f9d7 	bl	800c0c8 <USBH_LL_Init>

  return USBH_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3740      	adds	r7, #64	; 0x40
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bdb0      	pop	{r4, r5, r7, pc}
 8007d24:	0800d4e8 	.word	0x0800d4e8
 8007d28:	0800d4f8 	.word	0x0800d4f8

08007d2c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	e009      	b.n	8007d52 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	33e0      	adds	r3, #224	; 0xe0
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	2200      	movs	r2, #0
 8007d4a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2b0f      	cmp	r3, #15
 8007d56:	d9f2      	bls.n	8007d3e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	e009      	b.n	8007d72 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d68:	2200      	movs	r2, #0
 8007d6a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d78:	d3f1      	bcc.n	8007d5e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2240      	movs	r2, #64	; 0x40
 8007d9e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3714      	adds	r7, #20
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d016      	beq.n	8007e16 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10e      	bne.n	8007e10 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007df8:	1c59      	adds	r1, r3, #1
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	33de      	adds	r3, #222	; 0xde
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]
 8007e0e:	e004      	b.n	8007e1a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007e10:	2302      	movs	r3, #2
 8007e12:	73fb      	strb	r3, [r7, #15]
 8007e14:	e001      	b.n	8007e1a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007e16:	2302      	movs	r3, #2
 8007e18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007e3e:	78fa      	ldrb	r2, [r7, #3]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d204      	bcs.n	8007e4e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	78fa      	ldrb	r2, [r7, #3]
 8007e48:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007e4c:	e001      	b.n	8007e52 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007e4e:	2302      	movs	r3, #2
 8007e50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	4608      	mov	r0, r1
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	70fb      	strb	r3, [r7, #3]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70bb      	strb	r3, [r7, #2]
 8007e76:	4613      	mov	r3, r2
 8007e78:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e88:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e8a:	e025      	b.n	8007ed8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
 8007e8e:	221a      	movs	r2, #26
 8007e90:	fb02 f303 	mul.w	r3, r2, r3
 8007e94:	3308      	adds	r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4413      	add	r3, r2
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	795b      	ldrb	r3, [r3, #5]
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d002      	beq.n	8007eae <USBH_FindInterface+0x4e>
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	2bff      	cmp	r3, #255	; 0xff
 8007eac:	d111      	bne.n	8007ed2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007eb2:	78ba      	ldrb	r2, [r7, #2]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d002      	beq.n	8007ebe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007eb8:	78bb      	ldrb	r3, [r7, #2]
 8007eba:	2bff      	cmp	r3, #255	; 0xff
 8007ebc:	d109      	bne.n	8007ed2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ec2:	787a      	ldrb	r2, [r7, #1]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d002      	beq.n	8007ece <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ec8:	787b      	ldrb	r3, [r7, #1]
 8007eca:	2bff      	cmp	r3, #255	; 0xff
 8007ecc:	d101      	bne.n	8007ed2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	e006      	b.n	8007ee0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d9d6      	bls.n	8007e8c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007ede:	23ff      	movs	r3, #255	; 0xff
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	371c      	adds	r7, #28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f004 f92d 	bl	800c154 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007efa:	2101      	movs	r1, #1
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f004 fa46 	bl	800c38e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af04      	add	r7, sp, #16
 8007f12:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007f14:	2302      	movs	r3, #2
 8007f16:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d102      	bne.n	8007f2e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2203      	movs	r2, #3
 8007f2c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b0b      	cmp	r3, #11
 8007f36:	f200 8247 	bhi.w	80083c8 <USBH_Process+0x4bc>
 8007f3a:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <USBH_Process+0x34>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f71 	.word	0x08007f71
 8007f44:	08007fbf 	.word	0x08007fbf
 8007f48:	08008043 	.word	0x08008043
 8007f4c:	08008347 	.word	0x08008347
 8007f50:	080083c9 	.word	0x080083c9
 8007f54:	08008103 	.word	0x08008103
 8007f58:	080082d1 	.word	0x080082d1
 8007f5c:	08008155 	.word	0x08008155
 8007f60:	08008191 	.word	0x08008191
 8007f64:	080081cb 	.word	0x080081cb
 8007f68:	08008229 	.word	0x08008229
 8007f6c:	0800832f 	.word	0x0800832f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8227 	beq.w	80083cc <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007f84:	20c8      	movs	r0, #200	; 0xc8
 8007f86:	f004 fa49 	bl	800c41c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f004 f93f 	bl	800c20e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	f001 fd94 	bl	8009ae4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007fbc:	e206      	b.n	80083cc <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d107      	bne.n	8007fd8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	e025      	b.n	8008024 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fe2:	d914      	bls.n	800800e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007fea:	3301      	adds	r3, #1
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d903      	bls.n	8008006 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	220d      	movs	r2, #13
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	e00e      	b.n	8008024 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	e00a      	b.n	8008024 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008014:	f103 020a 	add.w	r2, r3, #10
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800801e:	200a      	movs	r0, #10
 8008020:	f004 f9fc 	bl	800c41c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008038:	2200      	movs	r2, #0
 800803a:	4619      	mov	r1, r3
 800803c:	f001 fd52 	bl	8009ae4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008040:	e1cb      	b.n	80083da <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008052:	2104      	movs	r1, #4
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008058:	2064      	movs	r0, #100	; 0x64
 800805a:	f004 f9df 	bl	800c41c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f004 f8ae 	bl	800c1c0 <USBH_LL_GetSpeed>
 8008064:	4603      	mov	r3, r0
 8008066:	461a      	mov	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2205      	movs	r2, #5
 8008072:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008074:	2100      	movs	r1, #0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f001 fc17 	bl	80098aa <USBH_AllocPipe>
 800807c:	4603      	mov	r3, r0
 800807e:	461a      	mov	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008084:	2180      	movs	r1, #128	; 0x80
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 fc0f 	bl	80098aa <USBH_AllocPipe>
 800808c:	4603      	mov	r3, r0
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	7919      	ldrb	r1, [r3, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80080a8:	b292      	uxth	r2, r2
 80080aa:	9202      	str	r2, [sp, #8]
 80080ac:	2200      	movs	r2, #0
 80080ae:	9201      	str	r2, [sp, #4]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	4603      	mov	r3, r0
 80080b4:	2280      	movs	r2, #128	; 0x80
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f001 fbc8 	bl	800984c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	7959      	ldrb	r1, [r3, #5]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80080d0:	b292      	uxth	r2, r2
 80080d2:	9202      	str	r2, [sp, #8]
 80080d4:	2200      	movs	r2, #0
 80080d6:	9201      	str	r2, [sp, #4]
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	4603      	mov	r3, r0
 80080dc:	2200      	movs	r2, #0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 fbb4 	bl	800984c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80080f8:	2200      	movs	r2, #0
 80080fa:	4619      	mov	r1, r3
 80080fc:	f001 fcf2 	bl	8009ae4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008100:	e16b      	b.n	80083da <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f96e 	bl	80083e4 <USBH_HandleEnum>
 8008108:	4603      	mov	r3, r0
 800810a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	f040 815d 	bne.w	80083d0 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008124:	2b01      	cmp	r3, #1
 8008126:	d103      	bne.n	8008130 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2208      	movs	r2, #8
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e002      	b.n	8008136 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2207      	movs	r2, #7
 8008134:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2205      	movs	r2, #5
 800813a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800814a:	2200      	movs	r2, #0
 800814c:	4619      	mov	r1, r3
 800814e:	f001 fcc9 	bl	8009ae4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008152:	e13d      	b.n	80083d0 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 813a 	beq.w	80083d4 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008166:	2101      	movs	r1, #1
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2208      	movs	r2, #8
 8008170:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2205      	movs	r2, #5
 8008176:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008186:	2200      	movs	r2, #0
 8008188:	4619      	mov	r1, r3
 800818a:	f001 fcab 	bl	8009ae4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800818e:	e121      	b.n	80083d4 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008196:	b29b      	uxth	r3, r3
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fd00 	bl	8008ba0 <USBH_SetCfg>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2209      	movs	r2, #9
 80081aa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80081c0:	2200      	movs	r2, #0
 80081c2:	4619      	mov	r1, r3
 80081c4:	f001 fc8e 	bl	8009ae4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081c8:	e107      	b.n	80083da <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d015      	beq.n	8008204 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80081d8:	2101      	movs	r1, #1
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fd03 	bl	8008be6 <USBH_SetFeature>
 80081e0:	4603      	mov	r3, r0
 80081e2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d103      	bne.n	80081f4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	220a      	movs	r2, #10
 80081f0:	701a      	strb	r2, [r3, #0]
 80081f2:	e00a      	b.n	800820a <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d106      	bne.n	800820a <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	220a      	movs	r2, #10
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	e002      	b.n	800820a <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	220a      	movs	r2, #10
 8008208:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800821e:	2200      	movs	r2, #0
 8008220:	4619      	mov	r1, r3
 8008222:	f001 fc5f 	bl	8009ae4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008226:	e0d8      	b.n	80083da <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800822e:	2b00      	cmp	r3, #0
 8008230:	d03f      	beq.n	80082b2 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800823a:	2300      	movs	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]
 800823e:	e016      	b.n	800826e <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008240:	7bfa      	ldrb	r2, [r7, #15]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	32de      	adds	r2, #222	; 0xde
 8008246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824a:	791a      	ldrb	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008252:	429a      	cmp	r2, r3
 8008254:	d108      	bne.n	8008268 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008256:	7bfa      	ldrb	r2, [r7, #15]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	32de      	adds	r2, #222	; 0xde
 800825c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008266:	e005      	b.n	8008274 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	3301      	adds	r3, #1
 800826c:	73fb      	strb	r3, [r7, #15]
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d0e5      	beq.n	8008240 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800827a:	2b00      	cmp	r3, #0
 800827c:	d016      	beq.n	80082ac <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2206      	movs	r2, #6
 8008294:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800829c:	2103      	movs	r1, #3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	4798      	blx	r3
 80082a2:	e006      	b.n	80082b2 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	220d      	movs	r2, #13
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	e002      	b.n	80082b2 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	220d      	movs	r2, #13
 80082b0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2205      	movs	r2, #5
 80082b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082c6:	2200      	movs	r2, #0
 80082c8:	4619      	mov	r1, r3
 80082ca:	f001 fc0b 	bl	8009ae4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082ce:	e084      	b.n	80083da <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d017      	beq.n	800830a <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
 80082e6:	4603      	mov	r3, r0
 80082e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80082ea:	7bbb      	ldrb	r3, [r7, #14]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d103      	bne.n	80082fa <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	220b      	movs	r2, #11
 80082f6:	701a      	strb	r2, [r3, #0]
 80082f8:	e00a      	b.n	8008310 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d106      	bne.n	8008310 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	220d      	movs	r2, #13
 8008306:	701a      	strb	r2, [r3, #0]
 8008308:	e002      	b.n	8008310 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	220d      	movs	r2, #13
 800830e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2205      	movs	r2, #5
 8008314:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008324:	2200      	movs	r2, #0
 8008326:	4619      	mov	r1, r3
 8008328:	f001 fbdc 	bl	8009ae4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800832c:	e055      	b.n	80083da <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008334:	2b00      	cmp	r3, #0
 8008336:	d04f      	beq.n	80083d8 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	4798      	blx	r3
      }
      break;
 8008344:	e048      	b.n	80083d8 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff fcec 	bl	8007d2c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d009      	beq.n	8008372 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008382:	2105      	movs	r1, #5
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b01      	cmp	r3, #1
 8008392:	d107      	bne.n	80083a4 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fda5 	bl	8007eec <USBH_Start>
 80083a2:	e002      	b.n	80083aa <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f003 fed5 	bl	800c154 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083be:	2200      	movs	r2, #0
 80083c0:	4619      	mov	r1, r3
 80083c2:	f001 fb8f 	bl	8009ae4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083c6:	e008      	b.n	80083da <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 80083c8:	bf00      	nop
 80083ca:	e006      	b.n	80083da <USBH_Process+0x4ce>
      break;
 80083cc:	bf00      	nop
 80083ce:	e004      	b.n	80083da <USBH_Process+0x4ce>
      break;
 80083d0:	bf00      	nop
 80083d2:	e002      	b.n	80083da <USBH_Process+0x4ce>
    break;
 80083d4:	bf00      	nop
 80083d6:	e000      	b.n	80083da <USBH_Process+0x4ce>
      break;
 80083d8:	bf00      	nop
  }
  return USBH_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af04      	add	r7, sp, #16
 80083ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80083ec:	2301      	movs	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80083f0:	2301      	movs	r3, #1
 80083f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	2b07      	cmp	r3, #7
 80083fa:	f200 8208 	bhi.w	800880e <USBH_HandleEnum+0x42a>
 80083fe:	a201      	add	r2, pc, #4	; (adr r2, 8008404 <USBH_HandleEnum+0x20>)
 8008400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008404:	08008425 	.word	0x08008425
 8008408:	080084e3 	.word	0x080084e3
 800840c:	0800854d 	.word	0x0800854d
 8008410:	080085db 	.word	0x080085db
 8008414:	08008645 	.word	0x08008645
 8008418:	080086b5 	.word	0x080086b5
 800841c:	08008751 	.word	0x08008751
 8008420:	080087cf 	.word	0x080087cf
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008424:	2108      	movs	r1, #8
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 faea 	bl	8008a00 <USBH_Get_DevDesc>
 800842c:	4603      	mov	r3, r0
 800842e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d130      	bne.n	8008498 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	7919      	ldrb	r1, [r3, #4]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800845a:	b292      	uxth	r2, r2
 800845c:	9202      	str	r2, [sp, #8]
 800845e:	2200      	movs	r2, #0
 8008460:	9201      	str	r2, [sp, #4]
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	4603      	mov	r3, r0
 8008466:	2280      	movs	r2, #128	; 0x80
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f001 f9ef 	bl	800984c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	7959      	ldrb	r1, [r3, #5]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008482:	b292      	uxth	r2, r2
 8008484:	9202      	str	r2, [sp, #8]
 8008486:	2200      	movs	r2, #0
 8008488:	9201      	str	r2, [sp, #4]
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	4603      	mov	r3, r0
 800848e:	2200      	movs	r2, #0
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 f9db 	bl	800984c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008496:	e1bc      	b.n	8008812 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	2b03      	cmp	r3, #3
 800849c:	f040 81b9 	bne.w	8008812 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084a6:	3301      	adds	r3, #1
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d903      	bls.n	80084c2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	220d      	movs	r2, #13
 80084be:	701a      	strb	r2, [r3, #0]
      break;
 80084c0:	e1a7      	b.n	8008812 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	795b      	ldrb	r3, [r3, #5]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 fa0f 	bl	80098ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	791b      	ldrb	r3, [r3, #4]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 fa09 	bl	80098ec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]
      break;
 80084e0:	e197      	b.n	8008812 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80084e2:	2112      	movs	r1, #18
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fa8b 	bl	8008a00 <USBH_Get_DevDesc>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d103      	bne.n	80084fc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084fa:	e18c      	b.n	8008816 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	2b03      	cmp	r3, #3
 8008500:	f040 8189 	bne.w	8008816 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800850a:	3301      	adds	r3, #1
 800850c:	b2da      	uxtb	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800851a:	2b03      	cmp	r3, #3
 800851c:	d903      	bls.n	8008526 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	220d      	movs	r2, #13
 8008522:	701a      	strb	r2, [r3, #0]
      break;
 8008524:	e177      	b.n	8008816 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	795b      	ldrb	r3, [r3, #5]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 f9dd 	bl	80098ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	791b      	ldrb	r3, [r3, #4]
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 f9d7 	bl	80098ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
      break;
 800854a:	e164      	b.n	8008816 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800854c:	2101      	movs	r1, #1
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fb02 	bl	8008b58 <USBH_SetAddress>
 8008554:	4603      	mov	r3, r0
 8008556:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008558:	7bbb      	ldrb	r3, [r7, #14]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d132      	bne.n	80085c4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800855e:	2002      	movs	r0, #2
 8008560:	f003 ff5c 	bl	800c41c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2203      	movs	r2, #3
 8008570:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	7919      	ldrb	r1, [r3, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008586:	b292      	uxth	r2, r2
 8008588:	9202      	str	r2, [sp, #8]
 800858a:	2200      	movs	r2, #0
 800858c:	9201      	str	r2, [sp, #4]
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	4603      	mov	r3, r0
 8008592:	2280      	movs	r2, #128	; 0x80
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 f959 	bl	800984c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	7959      	ldrb	r1, [r3, #5]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80085ae:	b292      	uxth	r2, r2
 80085b0:	9202      	str	r2, [sp, #8]
 80085b2:	2200      	movs	r2, #0
 80085b4:	9201      	str	r2, [sp, #4]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	4603      	mov	r3, r0
 80085ba:	2200      	movs	r2, #0
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f945 	bl	800984c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80085c2:	e12a      	b.n	800881a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	f040 8127 	bne.w	800881a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	220d      	movs	r2, #13
 80085d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	705a      	strb	r2, [r3, #1]
      break;
 80085d8:	e11f      	b.n	800881a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80085da:	2109      	movs	r1, #9
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fa37 	bl	8008a50 <USBH_Get_CfgDesc>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d103      	bne.n	80085f4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2204      	movs	r2, #4
 80085f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085f2:	e114      	b.n	800881e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	f040 8111 	bne.w	800881e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008602:	3301      	adds	r3, #1
 8008604:	b2da      	uxtb	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008612:	2b03      	cmp	r3, #3
 8008614:	d903      	bls.n	800861e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	220d      	movs	r2, #13
 800861a:	701a      	strb	r2, [r3, #0]
      break;
 800861c:	e0ff      	b.n	800881e <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	795b      	ldrb	r3, [r3, #5]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 f961 	bl	80098ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	791b      	ldrb	r3, [r3, #4]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f95b 	bl	80098ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	701a      	strb	r2, [r3, #0]
      break;
 8008642:	e0ec      	b.n	800881e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f9ff 	bl	8008a50 <USBH_Get_CfgDesc>
 8008652:	4603      	mov	r3, r0
 8008654:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d103      	bne.n	8008664 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2205      	movs	r2, #5
 8008660:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008662:	e0de      	b.n	8008822 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b03      	cmp	r3, #3
 8008668:	f040 80db 	bne.w	8008822 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008672:	3301      	adds	r3, #1
 8008674:	b2da      	uxtb	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008682:	2b03      	cmp	r3, #3
 8008684:	d903      	bls.n	800868e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	220d      	movs	r2, #13
 800868a:	701a      	strb	r2, [r3, #0]
      break;
 800868c:	e0c9      	b.n	8008822 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	795b      	ldrb	r3, [r3, #5]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 f929 	bl	80098ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	791b      	ldrb	r3, [r3, #4]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 f923 	bl	80098ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	701a      	strb	r2, [r3, #0]
      break;
 80086b2:	e0b6      	b.n	8008822 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d036      	beq.n	800872c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80086ca:	23ff      	movs	r3, #255	; 0xff
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f9e3 	bl	8008a98 <USBH_Get_StringDesc>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d111      	bne.n	8008700 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2206      	movs	r2, #6
 80086e0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2205      	movs	r2, #5
 80086e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086f6:	2200      	movs	r2, #0
 80086f8:	4619      	mov	r1, r3
 80086fa:	f001 f9f3 	bl	8009ae4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086fe:	e092      	b.n	8008826 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	2b03      	cmp	r3, #3
 8008704:	f040 808f 	bne.w	8008826 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2206      	movs	r2, #6
 800870c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2205      	movs	r2, #5
 8008712:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008722:	2200      	movs	r2, #0
 8008724:	4619      	mov	r1, r3
 8008726:	f001 f9dd 	bl	8009ae4 <osMessagePut>
      break;
 800872a:	e07c      	b.n	8008826 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2206      	movs	r2, #6
 8008730:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2205      	movs	r2, #5
 8008736:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008746:	2200      	movs	r2, #0
 8008748:	4619      	mov	r1, r3
 800874a:	f001 f9cb 	bl	8009ae4 <osMessagePut>
      break;
 800874e:	e06a      	b.n	8008826 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008756:	2b00      	cmp	r3, #0
 8008758:	d027      	beq.n	80087aa <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008766:	23ff      	movs	r3, #255	; 0xff
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f995 	bl	8008a98 <USBH_Get_StringDesc>
 800876e:	4603      	mov	r3, r0
 8008770:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d103      	bne.n	8008780 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2207      	movs	r2, #7
 800877c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800877e:	e054      	b.n	800882a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	2b03      	cmp	r3, #3
 8008784:	d151      	bne.n	800882a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2207      	movs	r2, #7
 800878a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2205      	movs	r2, #5
 8008790:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087a0:	2200      	movs	r2, #0
 80087a2:	4619      	mov	r1, r3
 80087a4:	f001 f99e 	bl	8009ae4 <osMessagePut>
      break;
 80087a8:	e03f      	b.n	800882a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2207      	movs	r2, #7
 80087ae:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2205      	movs	r2, #5
 80087b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087c4:	2200      	movs	r2, #0
 80087c6:	4619      	mov	r1, r3
 80087c8:	f001 f98c 	bl	8009ae4 <osMessagePut>
      break;
 80087cc:	e02d      	b.n	800882a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d017      	beq.n	8008808 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80087e4:	23ff      	movs	r3, #255	; 0xff
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f956 	bl	8008a98 <USBH_Get_StringDesc>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d102      	bne.n	80087fc <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80087fa:	e018      	b.n	800882e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d115      	bne.n	800882e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]
      break;
 8008806:	e012      	b.n	800882e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
      break;
 800880c:	e00f      	b.n	800882e <USBH_HandleEnum+0x44a>

    default:
      break;
 800880e:	bf00      	nop
 8008810:	e00e      	b.n	8008830 <USBH_HandleEnum+0x44c>
      break;
 8008812:	bf00      	nop
 8008814:	e00c      	b.n	8008830 <USBH_HandleEnum+0x44c>
      break;
 8008816:	bf00      	nop
 8008818:	e00a      	b.n	8008830 <USBH_HandleEnum+0x44c>
      break;
 800881a:	bf00      	nop
 800881c:	e008      	b.n	8008830 <USBH_HandleEnum+0x44c>
      break;
 800881e:	bf00      	nop
 8008820:	e006      	b.n	8008830 <USBH_HandleEnum+0x44c>
      break;
 8008822:	bf00      	nop
 8008824:	e004      	b.n	8008830 <USBH_HandleEnum+0x44c>
      break;
 8008826:	bf00      	nop
 8008828:	e002      	b.n	8008830 <USBH_HandleEnum+0x44c>
      break;
 800882a:	bf00      	nop
 800882c:	e000      	b.n	8008830 <USBH_HandleEnum+0x44c>
      break;
 800882e:	bf00      	nop
  }
  return Status;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop

0800883c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b082      	sub	sp, #8
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f804 	bl	800887e <USBH_HandleSof>
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b0b      	cmp	r3, #11
 800888e:	d10a      	bne.n	80088a6 <USBH_HandleSof+0x28>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
  }
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088d2:	2200      	movs	r2, #0
 80088d4:	4619      	mov	r1, r3
 80088d6:	f001 f905 	bl	8009ae4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80088da:	bf00      	nop
}
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80088f2:	bf00      	nop
}
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008932:	2200      	movs	r2, #0
 8008934:	4619      	mov	r1, r3
 8008936:	f001 f8d5 	bl	8009ae4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f003 fc10 	bl	800c18a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	791b      	ldrb	r3, [r3, #4]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 ffbb 	bl	80098ec <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	795b      	ldrb	r3, [r3, #5]
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 ffb5 	bl	80098ec <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008996:	2200      	movs	r2, #0
 8008998:	4619      	mov	r1, r3
 800899a:	f001 f8a3 	bl	8009ae4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80089b6:	f107 030c 	add.w	r3, r7, #12
 80089ba:	f04f 32ff 	mov.w	r2, #4294967295
 80089be:	4618      	mov	r0, r3
 80089c0:	f001 f8d0 	bl	8009b64 <osMessageGet>
    if (event.status == osEventMessage)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b10      	cmp	r3, #16
 80089c8:	d1f2      	bne.n	80089b0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff fa9e 	bl	8007f0c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80089d0:	e7ee      	b.n	80089b0 <USBH_Process_OS+0x8>

080089d2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089ee:	2200      	movs	r2, #0
 80089f0:	4619      	mov	r1, r3
 80089f2:	f001 f877 	bl	8009ae4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008a12:	78fb      	ldrb	r3, [r7, #3]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a1e:	2100      	movs	r1, #0
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f864 	bl	8008aee <USBH_GetDescriptor>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10a      	bne.n	8008a46 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a3c:	78fa      	ldrb	r2, [r7, #3]
 8008a3e:	b292      	uxth	r2, r2
 8008a40:	4619      	mov	r1, r3
 8008a42:	f000 f918 	bl	8008c76 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	331c      	adds	r3, #28
 8008a60:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008a62:	887b      	ldrh	r3, [r7, #2]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f83d 	bl	8008aee <USBH_GetDescriptor>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d107      	bne.n	8008a8e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008a7e:	887b      	ldrh	r3, [r7, #2]
 8008a80:	461a      	mov	r2, r3
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f987 	bl	8008d98 <USBH_ParseCfgDesc>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b088      	sub	sp, #32
 8008a9c:	af02      	add	r7, sp, #8
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	607a      	str	r2, [r7, #4]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	72fb      	strb	r3, [r7, #11]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008ab4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008abc:	893b      	ldrh	r3, [r7, #8]
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 f812 	bl	8008aee <USBH_GetDescriptor>
 8008aca:	4603      	mov	r3, r0
 8008acc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d107      	bne.n	8008ae4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ada:	893a      	ldrh	r2, [r7, #8]
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 fb24 	bl	800912c <USBH_ParseStringDesc>
  }

  return status;
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	607b      	str	r3, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	72fb      	strb	r3, [r7, #11]
 8008afc:	4613      	mov	r3, r2
 8008afe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	789b      	ldrb	r3, [r3, #2]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d11c      	bne.n	8008b42 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008b08:	7afb      	ldrb	r3, [r7, #11]
 8008b0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2206      	movs	r2, #6
 8008b18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	893a      	ldrh	r2, [r7, #8]
 8008b1e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008b20:	893b      	ldrh	r3, [r7, #8]
 8008b22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b2a:	d104      	bne.n	8008b36 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f240 4209 	movw	r2, #1033	; 0x409
 8008b32:	829a      	strh	r2, [r3, #20]
 8008b34:	e002      	b.n	8008b3c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8b3a      	ldrh	r2, [r7, #24]
 8008b40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008b42:	8b3b      	ldrh	r3, [r7, #24]
 8008b44:	461a      	mov	r2, r3
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fb3d 	bl	80091c8 <USBH_CtlReq>
 8008b4e:	4603      	mov	r3, r0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	789b      	ldrb	r3, [r3, #2]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d10f      	bne.n	8008b8c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2205      	movs	r2, #5
 8008b76:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2100      	movs	r1, #0
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fb19 	bl	80091c8 <USBH_CtlReq>
 8008b96:	4603      	mov	r3, r0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	789b      	ldrb	r3, [r3, #2]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d10e      	bne.n	8008bd2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2209      	movs	r2, #9
 8008bbe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	887a      	ldrh	r2, [r7, #2]
 8008bc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 faf6 	bl	80091c8 <USBH_CtlReq>
 8008bdc:	4603      	mov	r3, r0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	789b      	ldrb	r3, [r3, #2]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d10f      	bne.n	8008c1a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2203      	movs	r2, #3
 8008c04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008c06:	78fb      	ldrb	r3, [r7, #3]
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fad2 	bl	80091c8 <USBH_CtlReq>
 8008c24:	4603      	mov	r3, r0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	789b      	ldrb	r3, [r3, #2]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d10f      	bne.n	8008c62 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 faae 	bl	80091c8 <USBH_CtlReq>
 8008c6c:	4603      	mov	r3, r0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	4613      	mov	r3, r2
 8008c82:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	781a      	ldrb	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	785a      	ldrb	r2, [r3, #1]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	3302      	adds	r3, #2
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	3303      	adds	r3, #3
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	021b      	lsls	r3, r3, #8
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	791a      	ldrb	r2, [r3, #4]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	795a      	ldrb	r2, [r3, #5]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	799a      	ldrb	r2, [r3, #6]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	79da      	ldrb	r2, [r3, #7]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	79db      	ldrb	r3, [r3, #7]
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	dc11      	bgt.n	8008cfc <USBH_ParseDevDesc+0x86>
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	db16      	blt.n	8008d0a <USBH_ParseDevDesc+0x94>
 8008cdc:	3b08      	subs	r3, #8
 8008cde:	2201      	movs	r2, #1
 8008ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	bf14      	ite	ne
 8008cf0:	2301      	movne	r3, #1
 8008cf2:	2300      	moveq	r3, #0
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d102      	bne.n	8008d00 <USBH_ParseDevDesc+0x8a>
 8008cfa:	e006      	b.n	8008d0a <USBH_ParseDevDesc+0x94>
 8008cfc:	2b40      	cmp	r3, #64	; 0x40
 8008cfe:	d104      	bne.n	8008d0a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	79da      	ldrb	r2, [r3, #7]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	71da      	strb	r2, [r3, #7]
      break;
 8008d08:	e003      	b.n	8008d12 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2240      	movs	r2, #64	; 0x40
 8008d0e:	71da      	strb	r2, [r3, #7]
      break;
 8008d10:	bf00      	nop
  }

  if (length > 8U)
 8008d12:	88fb      	ldrh	r3, [r7, #6]
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d939      	bls.n	8008d8c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	3309      	adds	r3, #9
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	021b      	lsls	r3, r3, #8
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	330a      	adds	r3, #10
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	330b      	adds	r3, #11
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	021b      	lsls	r3, r3, #8
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	330c      	adds	r3, #12
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	330d      	adds	r3, #13
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	021b      	lsls	r3, r3, #8
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	4313      	orrs	r3, r2
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	7b9a      	ldrb	r2, [r3, #14]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	7bda      	ldrb	r2, [r3, #15]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	7c1a      	ldrb	r2, [r3, #16]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	7c5a      	ldrb	r2, [r3, #17]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	745a      	strb	r2, [r3, #17]
  }
}
 8008d8c:	bf00      	nop
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08c      	sub	sp, #48	; 0x30
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	4613      	mov	r3, r2
 8008da4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008dac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008db8:	2300      	movs	r3, #0
 8008dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	781a      	ldrb	r2, [r3, #0]
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	785a      	ldrb	r2, [r3, #1]
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	3302      	adds	r3, #2
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	3303      	adds	r3, #3
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	021b      	lsls	r3, r3, #8
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	4313      	orrs	r3, r2
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008df4:	bf28      	it	cs
 8008df6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	791a      	ldrb	r2, [r3, #4]
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	795a      	ldrb	r2, [r3, #5]
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	799a      	ldrb	r2, [r3, #6]
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	79da      	ldrb	r2, [r3, #7]
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	7a1a      	ldrb	r2, [r3, #8]
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2b09      	cmp	r3, #9
 8008e2e:	d002      	beq.n	8008e36 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	2209      	movs	r2, #9
 8008e34:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008e36:	88fb      	ldrh	r3, [r7, #6]
 8008e38:	2b09      	cmp	r3, #9
 8008e3a:	f240 809d 	bls.w	8008f78 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008e3e:	2309      	movs	r3, #9
 8008e40:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e46:	e081      	b.n	8008f4c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e48:	f107 0316 	add.w	r3, r7, #22
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e50:	f000 f99f 	bl	8009192 <USBH_GetNextDesc>
 8008e54:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e58:	785b      	ldrb	r3, [r3, #1]
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d176      	bne.n	8008f4c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	2b09      	cmp	r3, #9
 8008e64:	d002      	beq.n	8008e6c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	2209      	movs	r2, #9
 8008e6a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e70:	221a      	movs	r2, #26
 8008e72:	fb02 f303 	mul.w	r3, r2, r3
 8008e76:	3308      	adds	r3, #8
 8008e78:	6a3a      	ldr	r2, [r7, #32]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	3302      	adds	r3, #2
 8008e7e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e82:	69f8      	ldr	r0, [r7, #28]
 8008e84:	f000 f87e 	bl	8008f84 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e92:	e043      	b.n	8008f1c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e94:	f107 0316 	add.w	r3, r7, #22
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e9c:	f000 f979 	bl	8009192 <USBH_GetNextDesc>
 8008ea0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b05      	cmp	r3, #5
 8008ea8:	d138      	bne.n	8008f1c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	795b      	ldrb	r3, [r3, #5]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d10f      	bne.n	8008ed2 <USBH_ParseCfgDesc+0x13a>
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	799b      	ldrb	r3, [r3, #6]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d10b      	bne.n	8008ed2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	79db      	ldrb	r3, [r3, #7]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10f      	bne.n	8008ee2 <USBH_ParseCfgDesc+0x14a>
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b09      	cmp	r3, #9
 8008ec8:	d00b      	beq.n	8008ee2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ecc:	2209      	movs	r2, #9
 8008ece:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ed0:	e007      	b.n	8008ee2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b07      	cmp	r3, #7
 8008ed8:	d004      	beq.n	8008ee4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008edc:	2207      	movs	r2, #7
 8008ede:	701a      	strb	r2, [r3, #0]
 8008ee0:	e000      	b.n	8008ee4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ee2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ee8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008eec:	3201      	adds	r2, #1
 8008eee:	00d2      	lsls	r2, r2, #3
 8008ef0:	211a      	movs	r1, #26
 8008ef2:	fb01 f303 	mul.w	r3, r1, r3
 8008ef6:	4413      	add	r3, r2
 8008ef8:	3308      	adds	r3, #8
 8008efa:	6a3a      	ldr	r2, [r7, #32]
 8008efc:	4413      	add	r3, r2
 8008efe:	3304      	adds	r3, #4
 8008f00:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f04:	69b9      	ldr	r1, [r7, #24]
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 f86b 	bl	8008fe2 <USBH_ParseEPDesc>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008f12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f16:	3301      	adds	r3, #1
 8008f18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	791b      	ldrb	r3, [r3, #4]
 8008f20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d204      	bcs.n	8008f32 <USBH_ParseCfgDesc+0x19a>
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	885a      	ldrh	r2, [r3, #2]
 8008f2c:	8afb      	ldrh	r3, [r7, #22]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d8b0      	bhi.n	8008e94 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	791b      	ldrb	r3, [r3, #4]
 8008f36:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d201      	bcs.n	8008f42 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e01c      	b.n	8008f7c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f46:	3301      	adds	r3, #1
 8008f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d805      	bhi.n	8008f60 <USBH_ParseCfgDesc+0x1c8>
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	885a      	ldrh	r2, [r3, #2]
 8008f58:	8afb      	ldrh	r3, [r7, #22]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	f63f af74 	bhi.w	8008e48 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	791b      	ldrb	r3, [r3, #4]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	bf28      	it	cs
 8008f68:	2302      	movcs	r3, #2
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d201      	bcs.n	8008f78 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e001      	b.n	8008f7c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008f78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3730      	adds	r7, #48	; 0x30
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781a      	ldrb	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	785a      	ldrb	r2, [r3, #1]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	789a      	ldrb	r2, [r3, #2]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	78da      	ldrb	r2, [r3, #3]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	791a      	ldrb	r2, [r3, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	795a      	ldrb	r2, [r3, #5]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	799a      	ldrb	r2, [r3, #6]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	79da      	ldrb	r2, [r3, #7]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	7a1a      	ldrb	r2, [r3, #8]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	721a      	strb	r2, [r3, #8]
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b087      	sub	sp, #28
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	781a      	ldrb	r2, [r3, #0]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	785a      	ldrb	r2, [r3, #1]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	789a      	ldrb	r2, [r3, #2]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	78da      	ldrb	r2, [r3, #3]
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3304      	adds	r3, #4
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	b29a      	uxth	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3305      	adds	r3, #5
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	b29b      	uxth	r3, r3
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	b29b      	uxth	r3, r3
 8009026:	4313      	orrs	r3, r2
 8009028:	b29a      	uxth	r2, r3
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	799a      	ldrb	r2, [r3, #6]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	889b      	ldrh	r3, [r3, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d102      	bne.n	8009044 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800903e:	2303      	movs	r3, #3
 8009040:	75fb      	strb	r3, [r7, #23]
 8009042:	e033      	b.n	80090ac <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	889b      	ldrh	r3, [r3, #4]
 8009048:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800904c:	f023 0307 	bic.w	r3, r3, #7
 8009050:	b29a      	uxth	r2, r3
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	889b      	ldrh	r3, [r3, #4]
 800905a:	b21a      	sxth	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3304      	adds	r3, #4
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	b299      	uxth	r1, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	3305      	adds	r3, #5
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	b29b      	uxth	r3, r3
 800906c:	021b      	lsls	r3, r3, #8
 800906e:	b29b      	uxth	r3, r3
 8009070:	430b      	orrs	r3, r1
 8009072:	b29b      	uxth	r3, r3
 8009074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009078:	2b00      	cmp	r3, #0
 800907a:	d110      	bne.n	800909e <USBH_ParseEPDesc+0xbc>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3304      	adds	r3, #4
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	b299      	uxth	r1, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3305      	adds	r3, #5
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	b29b      	uxth	r3, r3
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	b29b      	uxth	r3, r3
 8009090:	430b      	orrs	r3, r1
 8009092:	b29b      	uxth	r3, r3
 8009094:	b21b      	sxth	r3, r3
 8009096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800909a:	b21b      	sxth	r3, r3
 800909c:	e001      	b.n	80090a2 <USBH_ParseEPDesc+0xc0>
 800909e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090a2:	4313      	orrs	r3, r2
 80090a4:	b21b      	sxth	r3, r3
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d116      	bne.n	80090e4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	78db      	ldrb	r3, [r3, #3]
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d005      	beq.n	80090ce <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	78db      	ldrb	r3, [r3, #3]
 80090c6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d127      	bne.n	800911e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	799b      	ldrb	r3, [r3, #6]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <USBH_ParseEPDesc+0xfc>
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	799b      	ldrb	r3, [r3, #6]
 80090da:	2b10      	cmp	r3, #16
 80090dc:	d91f      	bls.n	800911e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80090de:	2303      	movs	r3, #3
 80090e0:	75fb      	strb	r3, [r7, #23]
 80090e2:	e01c      	b.n	800911e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	78db      	ldrb	r3, [r3, #3]
 80090e8:	f003 0303 	and.w	r3, r3, #3
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d10a      	bne.n	8009106 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	799b      	ldrb	r3, [r3, #6]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d003      	beq.n	8009100 <USBH_ParseEPDesc+0x11e>
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	799b      	ldrb	r3, [r3, #6]
 80090fc:	2b10      	cmp	r3, #16
 80090fe:	d90e      	bls.n	800911e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009100:	2303      	movs	r3, #3
 8009102:	75fb      	strb	r3, [r7, #23]
 8009104:	e00b      	b.n	800911e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	78db      	ldrb	r3, [r3, #3]
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	2b03      	cmp	r3, #3
 8009110:	d105      	bne.n	800911e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	799b      	ldrb	r3, [r3, #6]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800911a:	2303      	movs	r3, #3
 800911c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800911e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009120:	4618      	mov	r0, r3
 8009122:	371c      	adds	r7, #28
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	4613      	mov	r3, r2
 8009138:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3301      	adds	r3, #1
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b03      	cmp	r3, #3
 8009142:	d120      	bne.n	8009186 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	1e9a      	subs	r2, r3, #2
 800914a:	88fb      	ldrh	r3, [r7, #6]
 800914c:	4293      	cmp	r3, r2
 800914e:	bf28      	it	cs
 8009150:	4613      	movcs	r3, r2
 8009152:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	3302      	adds	r3, #2
 8009158:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800915a:	2300      	movs	r3, #0
 800915c:	82fb      	strh	r3, [r7, #22]
 800915e:	e00b      	b.n	8009178 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009160:	8afb      	ldrh	r3, [r7, #22]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	4413      	add	r3, r2
 8009166:	781a      	ldrb	r2, [r3, #0]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	3301      	adds	r3, #1
 8009170:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009172:	8afb      	ldrh	r3, [r7, #22]
 8009174:	3302      	adds	r3, #2
 8009176:	82fb      	strh	r3, [r7, #22]
 8009178:	8afa      	ldrh	r2, [r7, #22]
 800917a:	8abb      	ldrh	r3, [r7, #20]
 800917c:	429a      	cmp	r2, r3
 800917e:	d3ef      	bcc.n	8009160 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
  }
}
 8009186:	bf00      	nop
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009192:	b480      	push	{r7}
 8009194:	b085      	sub	sp, #20
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	881a      	ldrh	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	4413      	add	r3, r2
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4413      	add	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80091ba:	68fb      	ldr	r3, [r7, #12]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	4613      	mov	r3, r2
 80091d4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80091d6:	2301      	movs	r3, #1
 80091d8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	789b      	ldrb	r3, [r3, #2]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d002      	beq.n	80091e8 <USBH_CtlReq+0x20>
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d01d      	beq.n	8009222 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80091e6:	e043      	b.n	8009270 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	88fa      	ldrh	r2, [r7, #6]
 80091f2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2201      	movs	r2, #1
 80091f8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2202      	movs	r2, #2
 80091fe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009200:	2301      	movs	r3, #1
 8009202:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2203      	movs	r2, #3
 8009208:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009218:	2200      	movs	r2, #0
 800921a:	4619      	mov	r1, r3
 800921c:	f000 fc62 	bl	8009ae4 <osMessagePut>
      break;
 8009220:	e026      	b.n	8009270 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 f82a 	bl	800927c <USBH_HandleControl>
 8009228:	4603      	mov	r3, r0
 800922a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800922c:	7dfb      	ldrb	r3, [r7, #23]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <USBH_CtlReq+0x70>
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	2b03      	cmp	r3, #3
 8009236:	d106      	bne.n	8009246 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2201      	movs	r2, #1
 800923c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	761a      	strb	r2, [r3, #24]
 8009244:	e005      	b.n	8009252 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	2b02      	cmp	r3, #2
 800924a:	d102      	bne.n	8009252 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2203      	movs	r2, #3
 8009256:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009266:	2200      	movs	r2, #0
 8009268:	4619      	mov	r1, r3
 800926a:	f000 fc3b 	bl	8009ae4 <osMessagePut>
      break;
 800926e:	bf00      	nop
  }
  return status;
 8009270:	7dfb      	ldrb	r3, [r7, #23]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af02      	add	r7, sp, #8
 8009282:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009284:	2301      	movs	r3, #1
 8009286:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009288:	2300      	movs	r3, #0
 800928a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7e1b      	ldrb	r3, [r3, #24]
 8009290:	3b01      	subs	r3, #1
 8009292:	2b0a      	cmp	r3, #10
 8009294:	f200 8229 	bhi.w	80096ea <USBH_HandleControl+0x46e>
 8009298:	a201      	add	r2, pc, #4	; (adr r2, 80092a0 <USBH_HandleControl+0x24>)
 800929a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929e:	bf00      	nop
 80092a0:	080092cd 	.word	0x080092cd
 80092a4:	080092e7 	.word	0x080092e7
 80092a8:	08009389 	.word	0x08009389
 80092ac:	080093af 	.word	0x080093af
 80092b0:	0800943b 	.word	0x0800943b
 80092b4:	08009465 	.word	0x08009465
 80092b8:	08009527 	.word	0x08009527
 80092bc:	08009549 	.word	0x08009549
 80092c0:	080095db 	.word	0x080095db
 80092c4:	08009601 	.word	0x08009601
 80092c8:	08009693 	.word	0x08009693
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f103 0110 	add.w	r1, r3, #16
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	795b      	ldrb	r3, [r3, #5]
 80092d6:	461a      	mov	r2, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fa17 	bl	800970c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2202      	movs	r2, #2
 80092e2:	761a      	strb	r2, [r3, #24]
      break;
 80092e4:	e20c      	b.n	8009700 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	795b      	ldrb	r3, [r3, #5]
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f003 f83b 	bl	800c368 <USBH_LL_GetURBState>
 80092f2:	4603      	mov	r3, r0
 80092f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d12c      	bne.n	8009356 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	7c1b      	ldrb	r3, [r3, #16]
 8009300:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009304:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	8adb      	ldrh	r3, [r3, #22]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00a      	beq.n	8009324 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800930e:	7b7b      	ldrb	r3, [r7, #13]
 8009310:	2b80      	cmp	r3, #128	; 0x80
 8009312:	d103      	bne.n	800931c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2203      	movs	r2, #3
 8009318:	761a      	strb	r2, [r3, #24]
 800931a:	e00d      	b.n	8009338 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2205      	movs	r2, #5
 8009320:	761a      	strb	r2, [r3, #24]
 8009322:	e009      	b.n	8009338 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009324:	7b7b      	ldrb	r3, [r7, #13]
 8009326:	2b80      	cmp	r3, #128	; 0x80
 8009328:	d103      	bne.n	8009332 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2209      	movs	r2, #9
 800932e:	761a      	strb	r2, [r3, #24]
 8009330:	e002      	b.n	8009338 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2207      	movs	r2, #7
 8009336:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2203      	movs	r2, #3
 800933c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800934c:	2200      	movs	r2, #0
 800934e:	4619      	mov	r1, r3
 8009350:	f000 fbc8 	bl	8009ae4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009354:	e1cb      	b.n	80096ee <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009356:	7bbb      	ldrb	r3, [r7, #14]
 8009358:	2b04      	cmp	r3, #4
 800935a:	d003      	beq.n	8009364 <USBH_HandleControl+0xe8>
 800935c:	7bbb      	ldrb	r3, [r7, #14]
 800935e:	2b02      	cmp	r3, #2
 8009360:	f040 81c5 	bne.w	80096ee <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	220b      	movs	r2, #11
 8009368:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2203      	movs	r2, #3
 800936e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800937e:	2200      	movs	r2, #0
 8009380:	4619      	mov	r1, r3
 8009382:	f000 fbaf 	bl	8009ae4 <osMessagePut>
      break;
 8009386:	e1b2      	b.n	80096ee <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800938e:	b29a      	uxth	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6899      	ldr	r1, [r3, #8]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	899a      	ldrh	r2, [r3, #12]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	791b      	ldrb	r3, [r3, #4]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f9f2 	bl	800978a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2204      	movs	r2, #4
 80093aa:	761a      	strb	r2, [r3, #24]
      break;
 80093ac:	e1a8      	b.n	8009700 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	791b      	ldrb	r3, [r3, #4]
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f002 ffd7 	bl	800c368 <USBH_LL_GetURBState>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80093be:	7bbb      	ldrb	r3, [r7, #14]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d110      	bne.n	80093e6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2209      	movs	r2, #9
 80093c8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2203      	movs	r2, #3
 80093ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80093de:	2200      	movs	r2, #0
 80093e0:	4619      	mov	r1, r3
 80093e2:	f000 fb7f 	bl	8009ae4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80093e6:	7bbb      	ldrb	r3, [r7, #14]
 80093e8:	2b05      	cmp	r3, #5
 80093ea:	d110      	bne.n	800940e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80093ec:	2303      	movs	r3, #3
 80093ee:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2203      	movs	r2, #3
 80093f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009404:	2200      	movs	r2, #0
 8009406:	4619      	mov	r1, r3
 8009408:	f000 fb6c 	bl	8009ae4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800940c:	e171      	b.n	80096f2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	2b04      	cmp	r3, #4
 8009412:	f040 816e 	bne.w	80096f2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	220b      	movs	r2, #11
 800941a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2203      	movs	r2, #3
 8009420:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009430:	2200      	movs	r2, #0
 8009432:	4619      	mov	r1, r3
 8009434:	f000 fb56 	bl	8009ae4 <osMessagePut>
      break;
 8009438:	e15b      	b.n	80096f2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6899      	ldr	r1, [r3, #8]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	899a      	ldrh	r2, [r3, #12]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	795b      	ldrb	r3, [r3, #5]
 8009446:	2001      	movs	r0, #1
 8009448:	9000      	str	r0, [sp, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f978 	bl	8009740 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009456:	b29a      	uxth	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2206      	movs	r2, #6
 8009460:	761a      	strb	r2, [r3, #24]
      break;
 8009462:	e14d      	b.n	8009700 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	795b      	ldrb	r3, [r3, #5]
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f002 ff7c 	bl	800c368 <USBH_LL_GetURBState>
 8009470:	4603      	mov	r3, r0
 8009472:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d111      	bne.n	800949e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2207      	movs	r2, #7
 800947e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2203      	movs	r2, #3
 8009484:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009494:	2200      	movs	r2, #0
 8009496:	4619      	mov	r1, r3
 8009498:	f000 fb24 	bl	8009ae4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800949c:	e12b      	b.n	80096f6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800949e:	7bbb      	ldrb	r3, [r7, #14]
 80094a0:	2b05      	cmp	r3, #5
 80094a2:	d113      	bne.n	80094cc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	220c      	movs	r2, #12
 80094a8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80094aa:	2303      	movs	r3, #3
 80094ac:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2203      	movs	r2, #3
 80094b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094c2:	2200      	movs	r2, #0
 80094c4:	4619      	mov	r1, r3
 80094c6:	f000 fb0d 	bl	8009ae4 <osMessagePut>
      break;
 80094ca:	e114      	b.n	80096f6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d111      	bne.n	80094f6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2205      	movs	r2, #5
 80094d6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2203      	movs	r2, #3
 80094dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094ec:	2200      	movs	r2, #0
 80094ee:	4619      	mov	r1, r3
 80094f0:	f000 faf8 	bl	8009ae4 <osMessagePut>
      break;
 80094f4:	e0ff      	b.n	80096f6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	2b04      	cmp	r3, #4
 80094fa:	f040 80fc 	bne.w	80096f6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	220b      	movs	r2, #11
 8009502:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009504:	2302      	movs	r3, #2
 8009506:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2203      	movs	r2, #3
 800950c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800951c:	2200      	movs	r2, #0
 800951e:	4619      	mov	r1, r3
 8009520:	f000 fae0 	bl	8009ae4 <osMessagePut>
      break;
 8009524:	e0e7      	b.n	80096f6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	791b      	ldrb	r3, [r3, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	2100      	movs	r1, #0
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f92b 	bl	800978a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800953a:	b29a      	uxth	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2208      	movs	r2, #8
 8009544:	761a      	strb	r2, [r3, #24]

      break;
 8009546:	e0db      	b.n	8009700 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	791b      	ldrb	r3, [r3, #4]
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f002 ff0a 	bl	800c368 <USBH_LL_GetURBState>
 8009554:	4603      	mov	r3, r0
 8009556:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009558:	7bbb      	ldrb	r3, [r7, #14]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d113      	bne.n	8009586 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	220d      	movs	r2, #13
 8009562:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2203      	movs	r2, #3
 800956c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800957c:	2200      	movs	r2, #0
 800957e:	4619      	mov	r1, r3
 8009580:	f000 fab0 	bl	8009ae4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009584:	e0b9      	b.n	80096fa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	2b04      	cmp	r3, #4
 800958a:	d111      	bne.n	80095b0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	220b      	movs	r2, #11
 8009590:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2203      	movs	r2, #3
 8009596:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095a6:	2200      	movs	r2, #0
 80095a8:	4619      	mov	r1, r3
 80095aa:	f000 fa9b 	bl	8009ae4 <osMessagePut>
      break;
 80095ae:	e0a4      	b.n	80096fa <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80095b0:	7bbb      	ldrb	r3, [r7, #14]
 80095b2:	2b05      	cmp	r3, #5
 80095b4:	f040 80a1 	bne.w	80096fa <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80095b8:	2303      	movs	r3, #3
 80095ba:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2203      	movs	r2, #3
 80095c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095d0:	2200      	movs	r2, #0
 80095d2:	4619      	mov	r1, r3
 80095d4:	f000 fa86 	bl	8009ae4 <osMessagePut>
      break;
 80095d8:	e08f      	b.n	80096fa <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	795b      	ldrb	r3, [r3, #5]
 80095de:	2201      	movs	r2, #1
 80095e0:	9200      	str	r2, [sp, #0]
 80095e2:	2200      	movs	r2, #0
 80095e4:	2100      	movs	r1, #0
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f8aa 	bl	8009740 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	220a      	movs	r2, #10
 80095fc:	761a      	strb	r2, [r3, #24]
      break;
 80095fe:	e07f      	b.n	8009700 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	795b      	ldrb	r3, [r3, #5]
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f002 feae 	bl	800c368 <USBH_LL_GetURBState>
 800960c:	4603      	mov	r3, r0
 800960e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d113      	bne.n	800963e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	220d      	movs	r2, #13
 800961e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2203      	movs	r2, #3
 8009624:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009634:	2200      	movs	r2, #0
 8009636:	4619      	mov	r1, r3
 8009638:	f000 fa54 	bl	8009ae4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800963c:	e05f      	b.n	80096fe <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	2b02      	cmp	r3, #2
 8009642:	d111      	bne.n	8009668 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2209      	movs	r2, #9
 8009648:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2203      	movs	r2, #3
 800964e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800965e:	2200      	movs	r2, #0
 8009660:	4619      	mov	r1, r3
 8009662:	f000 fa3f 	bl	8009ae4 <osMessagePut>
      break;
 8009666:	e04a      	b.n	80096fe <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	2b04      	cmp	r3, #4
 800966c:	d147      	bne.n	80096fe <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	220b      	movs	r2, #11
 8009672:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2203      	movs	r2, #3
 8009678:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009688:	2200      	movs	r2, #0
 800968a:	4619      	mov	r1, r3
 800968c:	f000 fa2a 	bl	8009ae4 <osMessagePut>
      break;
 8009690:	e035      	b.n	80096fe <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	7e5b      	ldrb	r3, [r3, #25]
 8009696:	3301      	adds	r3, #1
 8009698:	b2da      	uxtb	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	765a      	strb	r2, [r3, #25]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	7e5b      	ldrb	r3, [r3, #25]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d806      	bhi.n	80096b4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80096b2:	e025      	b.n	8009700 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096ba:	2106      	movs	r1, #6
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	795b      	ldrb	r3, [r3, #5]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f90d 	bl	80098ec <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	791b      	ldrb	r3, [r3, #4]
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f907 	bl	80098ec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80096e4:	2302      	movs	r3, #2
 80096e6:	73fb      	strb	r3, [r7, #15]
      break;
 80096e8:	e00a      	b.n	8009700 <USBH_HandleControl+0x484>

    default:
      break;
 80096ea:	bf00      	nop
 80096ec:	e008      	b.n	8009700 <USBH_HandleControl+0x484>
      break;
 80096ee:	bf00      	nop
 80096f0:	e006      	b.n	8009700 <USBH_HandleControl+0x484>
      break;
 80096f2:	bf00      	nop
 80096f4:	e004      	b.n	8009700 <USBH_HandleControl+0x484>
      break;
 80096f6:	bf00      	nop
 80096f8:	e002      	b.n	8009700 <USBH_HandleControl+0x484>
      break;
 80096fa:	bf00      	nop
 80096fc:	e000      	b.n	8009700 <USBH_HandleControl+0x484>
      break;
 80096fe:	bf00      	nop
  }

  return status;
 8009700:	7bfb      	ldrb	r3, [r7, #15]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop

0800970c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b088      	sub	sp, #32
 8009710:	af04      	add	r7, sp, #16
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	4613      	mov	r3, r2
 8009718:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800971a:	79f9      	ldrb	r1, [r7, #7]
 800971c:	2300      	movs	r3, #0
 800971e:	9303      	str	r3, [sp, #12]
 8009720:	2308      	movs	r3, #8
 8009722:	9302      	str	r3, [sp, #8]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	2300      	movs	r3, #0
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	2300      	movs	r3, #0
 800972e:	2200      	movs	r2, #0
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f002 fde8 	bl	800c306 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b088      	sub	sp, #32
 8009744:	af04      	add	r7, sp, #16
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	4611      	mov	r1, r2
 800974c:	461a      	mov	r2, r3
 800974e:	460b      	mov	r3, r1
 8009750:	80fb      	strh	r3, [r7, #6]
 8009752:	4613      	mov	r3, r2
 8009754:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009764:	7979      	ldrb	r1, [r7, #5]
 8009766:	7e3b      	ldrb	r3, [r7, #24]
 8009768:	9303      	str	r3, [sp, #12]
 800976a:	88fb      	ldrh	r3, [r7, #6]
 800976c:	9302      	str	r3, [sp, #8]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	2301      	movs	r3, #1
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	2300      	movs	r3, #0
 8009778:	2200      	movs	r2, #0
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f002 fdc3 	bl	800c306 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b088      	sub	sp, #32
 800978e:	af04      	add	r7, sp, #16
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	4611      	mov	r1, r2
 8009796:	461a      	mov	r2, r3
 8009798:	460b      	mov	r3, r1
 800979a:	80fb      	strh	r3, [r7, #6]
 800979c:	4613      	mov	r3, r2
 800979e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097a0:	7979      	ldrb	r1, [r7, #5]
 80097a2:	2300      	movs	r3, #0
 80097a4:	9303      	str	r3, [sp, #12]
 80097a6:	88fb      	ldrh	r3, [r7, #6]
 80097a8:	9302      	str	r3, [sp, #8]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	2301      	movs	r3, #1
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	2300      	movs	r3, #0
 80097b4:	2201      	movs	r2, #1
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f002 fda5 	bl	800c306 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80097bc:	2300      	movs	r3, #0

}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b088      	sub	sp, #32
 80097ca:	af04      	add	r7, sp, #16
 80097cc:	60f8      	str	r0, [r7, #12]
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	4611      	mov	r1, r2
 80097d2:	461a      	mov	r2, r3
 80097d4:	460b      	mov	r3, r1
 80097d6:	80fb      	strh	r3, [r7, #6]
 80097d8:	4613      	mov	r3, r2
 80097da:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80097e6:	2300      	movs	r3, #0
 80097e8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097ea:	7979      	ldrb	r1, [r7, #5]
 80097ec:	7e3b      	ldrb	r3, [r7, #24]
 80097ee:	9303      	str	r3, [sp, #12]
 80097f0:	88fb      	ldrh	r3, [r7, #6]
 80097f2:	9302      	str	r3, [sp, #8]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	2301      	movs	r3, #1
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	2302      	movs	r3, #2
 80097fe:	2200      	movs	r2, #0
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f002 fd80 	bl	800c306 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af04      	add	r7, sp, #16
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	4611      	mov	r1, r2
 800981c:	461a      	mov	r2, r3
 800981e:	460b      	mov	r3, r1
 8009820:	80fb      	strh	r3, [r7, #6]
 8009822:	4613      	mov	r3, r2
 8009824:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009826:	7979      	ldrb	r1, [r7, #5]
 8009828:	2300      	movs	r3, #0
 800982a:	9303      	str	r3, [sp, #12]
 800982c:	88fb      	ldrh	r3, [r7, #6]
 800982e:	9302      	str	r3, [sp, #8]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	2301      	movs	r3, #1
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	2302      	movs	r3, #2
 800983a:	2201      	movs	r2, #1
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f002 fd62 	bl	800c306 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af04      	add	r7, sp, #16
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	4608      	mov	r0, r1
 8009856:	4611      	mov	r1, r2
 8009858:	461a      	mov	r2, r3
 800985a:	4603      	mov	r3, r0
 800985c:	70fb      	strb	r3, [r7, #3]
 800985e:	460b      	mov	r3, r1
 8009860:	70bb      	strb	r3, [r7, #2]
 8009862:	4613      	mov	r3, r2
 8009864:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009866:	7878      	ldrb	r0, [r7, #1]
 8009868:	78ba      	ldrb	r2, [r7, #2]
 800986a:	78f9      	ldrb	r1, [r7, #3]
 800986c:	8b3b      	ldrh	r3, [r7, #24]
 800986e:	9302      	str	r3, [sp, #8]
 8009870:	7d3b      	ldrb	r3, [r7, #20]
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	7c3b      	ldrb	r3, [r7, #16]
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	4603      	mov	r3, r0
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f002 fcf5 	bl	800c26a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b082      	sub	sp, #8
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	460b      	mov	r3, r1
 8009894:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	4619      	mov	r1, r3
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f002 fd14 	bl	800c2c8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f836 	bl	8009928 <USBH_GetFreePipe>
 80098bc:	4603      	mov	r3, r0
 80098be:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80098c0:	89fb      	ldrh	r3, [r7, #14]
 80098c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d00a      	beq.n	80098e0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	89fb      	ldrh	r3, [r7, #14]
 80098ce:	f003 030f 	and.w	r3, r3, #15
 80098d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	33e0      	adds	r3, #224	; 0xe0
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80098e0:	89fb      	ldrh	r3, [r7, #14]
 80098e2:	b2db      	uxtb	r3, r3
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	2b0f      	cmp	r3, #15
 80098fc:	d80d      	bhi.n	800991a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	33e0      	adds	r3, #224	; 0xe0
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	78fb      	ldrb	r3, [r7, #3]
 800990c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	33e0      	adds	r3, #224	; 0xe0
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	440b      	add	r3, r1
 8009918:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
 8009938:	e00f      	b.n	800995a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	33e0      	adds	r3, #224	; 0xe0
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	b29b      	uxth	r3, r3
 8009952:	e007      	b.n	8009964 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009954:	7bfb      	ldrb	r3, [r7, #15]
 8009956:	3301      	adds	r3, #1
 8009958:	73fb      	strb	r3, [r7, #15]
 800995a:	7bfb      	ldrb	r3, [r7, #15]
 800995c:	2b0f      	cmp	r3, #15
 800995e:	d9ec      	bls.n	800993a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009960:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009964:	4618      	mov	r0, r3
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800997a:	2300      	movs	r3, #0
 800997c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800997e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009982:	2b84      	cmp	r3, #132	; 0x84
 8009984:	d005      	beq.n	8009992 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009986:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4413      	add	r3, r2
 800998e:	3303      	adds	r3, #3
 8009990:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009992:	68fb      	ldr	r3, [r7, #12]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099a6:	f3ef 8305 	mrs	r3, IPSR
 80099aa:	607b      	str	r3, [r7, #4]
  return(result);
 80099ac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	bf14      	ite	ne
 80099b2:	2301      	movne	r3, #1
 80099b4:	2300      	moveq	r3, #0
 80099b6:	b2db      	uxtb	r3, r3
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80099c8:	f001 f90a 	bl	800abe0 <vTaskStartScheduler>
  
  return osOK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80099d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d4:	b089      	sub	sp, #36	; 0x24
 80099d6:	af04      	add	r7, sp, #16
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d020      	beq.n	8009a26 <osThreadCreate+0x54>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d01c      	beq.n	8009a26 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685c      	ldr	r4, [r3, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681d      	ldr	r5, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	691e      	ldr	r6, [r3, #16]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7ff ffb6 	bl	8009970 <makeFreeRtosPriority>
 8009a04:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a0e:	9202      	str	r2, [sp, #8]
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	9100      	str	r1, [sp, #0]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	4632      	mov	r2, r6
 8009a18:	4629      	mov	r1, r5
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f000 ff0e 	bl	800a83c <xTaskCreateStatic>
 8009a20:	4603      	mov	r3, r0
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	e01c      	b.n	8009a60 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685c      	ldr	r4, [r3, #4]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a32:	b29e      	uxth	r6, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff ff98 	bl	8009970 <makeFreeRtosPriority>
 8009a40:	4602      	mov	r2, r0
 8009a42:	f107 030c 	add.w	r3, r7, #12
 8009a46:	9301      	str	r3, [sp, #4]
 8009a48:	9200      	str	r2, [sp, #0]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	4632      	mov	r2, r6
 8009a4e:	4629      	mov	r1, r5
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 ff50 	bl	800a8f6 <xTaskCreate>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d001      	beq.n	8009a60 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	e000      	b.n	8009a62 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009a60:	68fb      	ldr	r3, [r7, #12]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a6a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b084      	sub	sp, #16
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <osDelay+0x16>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	e000      	b.n	8009a82 <osDelay+0x18>
 8009a80:	2301      	movs	r3, #1
 8009a82:	4618      	mov	r0, r3
 8009a84:	f001 f878 	bl	800ab78 <vTaskDelay>
  
  return osOK;
 8009a88:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009a92:	b590      	push	{r4, r7, lr}
 8009a94:	b085      	sub	sp, #20
 8009a96:	af02      	add	r7, sp, #8
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d011      	beq.n	8009ac8 <osMessageCreate+0x36>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00d      	beq.n	8009ac8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6859      	ldr	r1, [r3, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	2400      	movs	r4, #0
 8009abe:	9400      	str	r4, [sp, #0]
 8009ac0:	f000 f9e0 	bl	8009e84 <xQueueGenericCreateStatic>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	e008      	b.n	8009ada <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6818      	ldr	r0, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	f000 fa4e 	bl	8009f74 <xQueueGenericCreate>
 8009ad8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd90      	pop	{r4, r7, pc}
	...

08009ae4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <osMessagePut+0x1e>
    ticks = 1;
 8009afe:	2301      	movs	r3, #1
 8009b00:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009b02:	f7ff ff4d 	bl	80099a0 <inHandlerMode>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d018      	beq.n	8009b3e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009b0c:	f107 0210 	add.w	r2, r7, #16
 8009b10:	f107 0108 	add.w	r1, r7, #8
 8009b14:	2300      	movs	r3, #0
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f000 fb84 	bl	800a224 <xQueueGenericSendFromISR>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d001      	beq.n	8009b26 <osMessagePut+0x42>
      return osErrorOS;
 8009b22:	23ff      	movs	r3, #255	; 0xff
 8009b24:	e018      	b.n	8009b58 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d014      	beq.n	8009b56 <osMessagePut+0x72>
 8009b2c:	4b0c      	ldr	r3, [pc, #48]	; (8009b60 <osMessagePut+0x7c>)
 8009b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	e00b      	b.n	8009b56 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009b3e:	f107 0108 	add.w	r1, r7, #8
 8009b42:	2300      	movs	r3, #0
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f000 fa6e 	bl	800a028 <xQueueGenericSend>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d001      	beq.n	8009b56 <osMessagePut+0x72>
      return osErrorOS;
 8009b52:	23ff      	movs	r3, #255	; 0xff
 8009b54:	e000      	b.n	8009b58 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	e000ed04 	.word	0xe000ed04

08009b64 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009b64:	b590      	push	{r4, r7, lr}
 8009b66:	b08b      	sub	sp, #44	; 0x2c
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009b74:	2300      	movs	r3, #0
 8009b76:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10a      	bne.n	8009b94 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009b7e:	2380      	movs	r3, #128	; 0x80
 8009b80:	617b      	str	r3, [r7, #20]
    return event;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	461c      	mov	r4, r3
 8009b86:	f107 0314 	add.w	r3, r7, #20
 8009b8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b92:	e054      	b.n	8009c3e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009b94:	2300      	movs	r3, #0
 8009b96:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba2:	d103      	bne.n	8009bac <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8009baa:	e009      	b.n	8009bc0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d006      	beq.n	8009bc0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d101      	bne.n	8009bc0 <osMessageGet+0x5c>
      ticks = 1;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009bc0:	f7ff feee 	bl	80099a0 <inHandlerMode>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d01c      	beq.n	8009c04 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009bca:	f107 0220 	add.w	r2, r7, #32
 8009bce:	f107 0314 	add.w	r3, r7, #20
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	68b8      	ldr	r0, [r7, #8]
 8009bd8:	f000 fca0 	bl	800a51c <xQueueReceiveFromISR>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d102      	bne.n	8009be8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009be2:	2310      	movs	r3, #16
 8009be4:	617b      	str	r3, [r7, #20]
 8009be6:	e001      	b.n	8009bec <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009bec:	6a3b      	ldr	r3, [r7, #32]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d01d      	beq.n	8009c2e <osMessageGet+0xca>
 8009bf2:	4b15      	ldr	r3, [pc, #84]	; (8009c48 <osMessageGet+0xe4>)
 8009bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	e014      	b.n	8009c2e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009c04:	f107 0314 	add.w	r3, r7, #20
 8009c08:	3304      	adds	r3, #4
 8009c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	68b8      	ldr	r0, [r7, #8]
 8009c10:	f000 fba4 	bl	800a35c <xQueueReceive>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d102      	bne.n	8009c20 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009c1a:	2310      	movs	r3, #16
 8009c1c:	617b      	str	r3, [r7, #20]
 8009c1e:	e006      	b.n	8009c2e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <osMessageGet+0xc6>
 8009c26:	2300      	movs	r3, #0
 8009c28:	e000      	b.n	8009c2c <osMessageGet+0xc8>
 8009c2a:	2340      	movs	r3, #64	; 0x40
 8009c2c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	461c      	mov	r4, r3
 8009c32:	f107 0314 	add.w	r3, r7, #20
 8009c36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	372c      	adds	r7, #44	; 0x2c
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd90      	pop	{r4, r7, pc}
 8009c46:	bf00      	nop
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f103 0208 	add.w	r2, r3, #8
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f04f 32ff 	mov.w	r2, #4294967295
 8009c64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f103 0208 	add.w	r2, r3, #8
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f103 0208 	add.w	r2, r3, #8
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c9a:	bf00      	nop
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b085      	sub	sp, #20
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	1c5a      	adds	r2, r3, #1
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	601a      	str	r2, [r3, #0]
}
 8009ce2:	bf00      	nop
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d04:	d103      	bne.n	8009d0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	e00c      	b.n	8009d28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	3308      	adds	r3, #8
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	e002      	b.n	8009d1c <vListInsert+0x2e>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d2f6      	bcs.n	8009d16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	1c5a      	adds	r2, r3, #1
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	601a      	str	r2, [r3, #0]
}
 8009d54:	bf00      	nop
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	6892      	ldr	r2, [r2, #8]
 8009d76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	6852      	ldr	r2, [r2, #4]
 8009d80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d103      	bne.n	8009d94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689a      	ldr	r2, [r3, #8]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	1e5a      	subs	r2, r3, #1
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009dde:	f001 fd59 	bl	800b894 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dea:	68f9      	ldr	r1, [r7, #12]
 8009dec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009dee:	fb01 f303 	mul.w	r3, r1, r3
 8009df2:	441a      	add	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	68f9      	ldr	r1, [r7, #12]
 8009e12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e14:	fb01 f303 	mul.w	r3, r1, r3
 8009e18:	441a      	add	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	22ff      	movs	r2, #255	; 0xff
 8009e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	22ff      	movs	r2, #255	; 0xff
 8009e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d114      	bne.n	8009e5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d01a      	beq.n	8009e72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	3310      	adds	r3, #16
 8009e40:	4618      	mov	r0, r3
 8009e42:	f001 f933 	bl	800b0ac <xTaskRemoveFromEventList>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d012      	beq.n	8009e72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e4c:	4b0c      	ldr	r3, [pc, #48]	; (8009e80 <xQueueGenericReset+0xcc>)
 8009e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	e009      	b.n	8009e72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3310      	adds	r3, #16
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7ff fef2 	bl	8009c4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3324      	adds	r3, #36	; 0x24
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff feed 	bl	8009c4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e72:	f001 fd3f 	bl	800b8f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e76:	2301      	movs	r3, #1
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	e000ed04 	.word	0xe000ed04

08009e84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08e      	sub	sp, #56	; 0x38
 8009e88:	af02      	add	r7, sp, #8
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10a      	bne.n	8009eae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009eaa:	bf00      	nop
 8009eac:	e7fe      	b.n	8009eac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <xQueueGenericCreateStatic+0x52>
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <xQueueGenericCreateStatic+0x56>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <xQueueGenericCreateStatic+0x58>
 8009eda:	2300      	movs	r3, #0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	623b      	str	r3, [r7, #32]
}
 8009ef2:	bf00      	nop
 8009ef4:	e7fe      	b.n	8009ef4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d102      	bne.n	8009f02 <xQueueGenericCreateStatic+0x7e>
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <xQueueGenericCreateStatic+0x82>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e000      	b.n	8009f08 <xQueueGenericCreateStatic+0x84>
 8009f06:	2300      	movs	r3, #0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	61fb      	str	r3, [r7, #28]
}
 8009f1e:	bf00      	nop
 8009f20:	e7fe      	b.n	8009f20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f22:	2348      	movs	r3, #72	; 0x48
 8009f24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	2b48      	cmp	r3, #72	; 0x48
 8009f2a:	d00a      	beq.n	8009f42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	61bb      	str	r3, [r7, #24]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00d      	beq.n	8009f6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	9300      	str	r3, [sp, #0]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	68b9      	ldr	r1, [r7, #8]
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f000 f83f 	bl	8009fe8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3730      	adds	r7, #48	; 0x30
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b08a      	sub	sp, #40	; 0x28
 8009f78:	af02      	add	r7, sp, #8
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	613b      	str	r3, [r7, #16]
}
 8009f9a:	bf00      	nop
 8009f9c:	e7fe      	b.n	8009f9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	fb02 f303 	mul.w	r3, r2, r3
 8009fa6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	3348      	adds	r3, #72	; 0x48
 8009fac:	4618      	mov	r0, r3
 8009fae:	f001 fd93 	bl	800bad8 <pvPortMalloc>
 8009fb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d011      	beq.n	8009fde <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	3348      	adds	r3, #72	; 0x48
 8009fc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fcc:	79fa      	ldrb	r2, [r7, #7]
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	68b9      	ldr	r1, [r7, #8]
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 f805 	bl	8009fe8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fde:	69bb      	ldr	r3, [r7, #24]
	}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3720      	adds	r7, #32
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d103      	bne.n	800a004 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	e002      	b.n	800a00a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a016:	2101      	movs	r1, #1
 800a018:	69b8      	ldr	r0, [r7, #24]
 800a01a:	f7ff fecb 	bl	8009db4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08e      	sub	sp, #56	; 0x38
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a036:	2300      	movs	r3, #0
 800a038:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <xQueueGenericSend+0x32>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d103      	bne.n	800a068 <xQueueGenericSend+0x40>
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <xQueueGenericSend+0x44>
 800a068:	2301      	movs	r3, #1
 800a06a:	e000      	b.n	800a06e <xQueueGenericSend+0x46>
 800a06c:	2300      	movs	r3, #0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <xQueueGenericSend+0x60>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a084:	bf00      	nop
 800a086:	e7fe      	b.n	800a086 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d103      	bne.n	800a096 <xQueueGenericSend+0x6e>
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a092:	2b01      	cmp	r3, #1
 800a094:	d101      	bne.n	800a09a <xQueueGenericSend+0x72>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <xQueueGenericSend+0x74>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	623b      	str	r3, [r7, #32]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0b6:	f001 f9b7 	bl	800b428 <xTaskGetSchedulerState>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <xQueueGenericSend+0x9e>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <xQueueGenericSend+0xa2>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e000      	b.n	800a0cc <xQueueGenericSend+0xa4>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10a      	bne.n	800a0e6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	61fb      	str	r3, [r7, #28]
}
 800a0e2:	bf00      	nop
 800a0e4:	e7fe      	b.n	800a0e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0e6:	f001 fbd5 	bl	800b894 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d302      	bcc.n	800a0fc <xQueueGenericSend+0xd4>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d129      	bne.n	800a150 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0fc:	683a      	ldr	r2, [r7, #0]
 800a0fe:	68b9      	ldr	r1, [r7, #8]
 800a100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a102:	f000 fa8b 	bl	800a61c <prvCopyDataToQueue>
 800a106:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d010      	beq.n	800a132 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	3324      	adds	r3, #36	; 0x24
 800a114:	4618      	mov	r0, r3
 800a116:	f000 ffc9 	bl	800b0ac <xTaskRemoveFromEventList>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d013      	beq.n	800a148 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a120:	4b3f      	ldr	r3, [pc, #252]	; (800a220 <xQueueGenericSend+0x1f8>)
 800a122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a126:	601a      	str	r2, [r3, #0]
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	e00a      	b.n	800a148 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	2b00      	cmp	r3, #0
 800a136:	d007      	beq.n	800a148 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a138:	4b39      	ldr	r3, [pc, #228]	; (800a220 <xQueueGenericSend+0x1f8>)
 800a13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a148:	f001 fbd4 	bl	800b8f4 <vPortExitCritical>
				return pdPASS;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e063      	b.n	800a218 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d103      	bne.n	800a15e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a156:	f001 fbcd 	bl	800b8f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a15a:	2300      	movs	r3, #0
 800a15c:	e05c      	b.n	800a218 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a160:	2b00      	cmp	r3, #0
 800a162:	d106      	bne.n	800a172 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a164:	f107 0314 	add.w	r3, r7, #20
 800a168:	4618      	mov	r0, r3
 800a16a:	f001 f801 	bl	800b170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a16e:	2301      	movs	r3, #1
 800a170:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a172:	f001 fbbf 	bl	800b8f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a176:	f000 fd93 	bl	800aca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a17a:	f001 fb8b 	bl	800b894 <vPortEnterCritical>
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a184:	b25b      	sxtb	r3, r3
 800a186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18a:	d103      	bne.n	800a194 <xQueueGenericSend+0x16c>
 800a18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a19a:	b25b      	sxtb	r3, r3
 800a19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a0:	d103      	bne.n	800a1aa <xQueueGenericSend+0x182>
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1aa:	f001 fba3 	bl	800b8f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1ae:	1d3a      	adds	r2, r7, #4
 800a1b0:	f107 0314 	add.w	r3, r7, #20
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 fff0 	bl	800b19c <xTaskCheckForTimeOut>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d124      	bne.n	800a20c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a1c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1c4:	f000 fb22 	bl	800a80c <prvIsQueueFull>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d018      	beq.n	800a200 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	3310      	adds	r3, #16
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 ff44 	bl	800b064 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a1dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1de:	f000 faad 	bl	800a73c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a1e2:	f000 fd6b 	bl	800acbc <xTaskResumeAll>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f47f af7c 	bne.w	800a0e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a1ee:	4b0c      	ldr	r3, [pc, #48]	; (800a220 <xQueueGenericSend+0x1f8>)
 800a1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	e772      	b.n	800a0e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a202:	f000 fa9b 	bl	800a73c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a206:	f000 fd59 	bl	800acbc <xTaskResumeAll>
 800a20a:	e76c      	b.n	800a0e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a20c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a20e:	f000 fa95 	bl	800a73c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a212:	f000 fd53 	bl	800acbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a216:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3738      	adds	r7, #56	; 0x38
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	e000ed04 	.word	0xe000ed04

0800a224 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b090      	sub	sp, #64	; 0x40
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10a      	bne.n	800a252 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a24e:	bf00      	nop
 800a250:	e7fe      	b.n	800a250 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d103      	bne.n	800a260 <xQueueGenericSendFromISR+0x3c>
 800a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <xQueueGenericSendFromISR+0x40>
 800a260:	2301      	movs	r3, #1
 800a262:	e000      	b.n	800a266 <xQueueGenericSendFromISR+0x42>
 800a264:	2300      	movs	r3, #0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a27c:	bf00      	nop
 800a27e:	e7fe      	b.n	800a27e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2b02      	cmp	r3, #2
 800a284:	d103      	bne.n	800a28e <xQueueGenericSendFromISR+0x6a>
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d101      	bne.n	800a292 <xQueueGenericSendFromISR+0x6e>
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <xQueueGenericSendFromISR+0x70>
 800a292:	2300      	movs	r3, #0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	623b      	str	r3, [r7, #32]
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2ae:	f001 fbd3 	bl	800ba58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a2b2:	f3ef 8211 	mrs	r2, BASEPRI
 800a2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	61fa      	str	r2, [r7, #28]
 800a2c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a2ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d302      	bcc.n	800a2e0 <xQueueGenericSendFromISR+0xbc>
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d12f      	bne.n	800a340 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	68b9      	ldr	r1, [r7, #8]
 800a2f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2f6:	f000 f991 	bl	800a61c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d112      	bne.n	800a32a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d016      	beq.n	800a33a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	3324      	adds	r3, #36	; 0x24
 800a310:	4618      	mov	r0, r3
 800a312:	f000 fecb 	bl	800b0ac <xTaskRemoveFromEventList>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00e      	beq.n	800a33a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00b      	beq.n	800a33a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	e007      	b.n	800a33a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a32a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a32e:	3301      	adds	r3, #1
 800a330:	b2db      	uxtb	r3, r3
 800a332:	b25a      	sxtb	r2, r3
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a33a:	2301      	movs	r3, #1
 800a33c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a33e:	e001      	b.n	800a344 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a340:	2300      	movs	r3, #0
 800a342:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a346:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a34e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a352:	4618      	mov	r0, r3
 800a354:	3740      	adds	r7, #64	; 0x40
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08c      	sub	sp, #48	; 0x30
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a368:	2300      	movs	r3, #0
 800a36a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10a      	bne.n	800a38c <xQueueReceive+0x30>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	623b      	str	r3, [r7, #32]
}
 800a388:	bf00      	nop
 800a38a:	e7fe      	b.n	800a38a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d103      	bne.n	800a39a <xQueueReceive+0x3e>
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <xQueueReceive+0x42>
 800a39a:	2301      	movs	r3, #1
 800a39c:	e000      	b.n	800a3a0 <xQueueReceive+0x44>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10a      	bne.n	800a3ba <xQueueReceive+0x5e>
	__asm volatile
 800a3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	61fb      	str	r3, [r7, #28]
}
 800a3b6:	bf00      	nop
 800a3b8:	e7fe      	b.n	800a3b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3ba:	f001 f835 	bl	800b428 <xTaskGetSchedulerState>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d102      	bne.n	800a3ca <xQueueReceive+0x6e>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <xQueueReceive+0x72>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e000      	b.n	800a3d0 <xQueueReceive+0x74>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10a      	bne.n	800a3ea <xQueueReceive+0x8e>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	61bb      	str	r3, [r7, #24]
}
 800a3e6:	bf00      	nop
 800a3e8:	e7fe      	b.n	800a3e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3ea:	f001 fa53 	bl	800b894 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d01f      	beq.n	800a43a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3fe:	f000 f977 	bl	800a6f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	1e5a      	subs	r2, r3, #1
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00f      	beq.n	800a432 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a414:	3310      	adds	r3, #16
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fe48 	bl	800b0ac <xTaskRemoveFromEventList>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d007      	beq.n	800a432 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a422:	4b3d      	ldr	r3, [pc, #244]	; (800a518 <xQueueReceive+0x1bc>)
 800a424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a432:	f001 fa5f 	bl	800b8f4 <vPortExitCritical>
				return pdPASS;
 800a436:	2301      	movs	r3, #1
 800a438:	e069      	b.n	800a50e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d103      	bne.n	800a448 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a440:	f001 fa58 	bl	800b8f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a444:	2300      	movs	r3, #0
 800a446:	e062      	b.n	800a50e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d106      	bne.n	800a45c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a44e:	f107 0310 	add.w	r3, r7, #16
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fe8c 	bl	800b170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a458:	2301      	movs	r3, #1
 800a45a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a45c:	f001 fa4a 	bl	800b8f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a460:	f000 fc1e 	bl	800aca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a464:	f001 fa16 	bl	800b894 <vPortEnterCritical>
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a46e:	b25b      	sxtb	r3, r3
 800a470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a474:	d103      	bne.n	800a47e <xQueueReceive+0x122>
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a484:	b25b      	sxtb	r3, r3
 800a486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a48a:	d103      	bne.n	800a494 <xQueueReceive+0x138>
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a494:	f001 fa2e 	bl	800b8f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a498:	1d3a      	adds	r2, r7, #4
 800a49a:	f107 0310 	add.w	r3, r7, #16
 800a49e:	4611      	mov	r1, r2
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fe7b 	bl	800b19c <xTaskCheckForTimeOut>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d123      	bne.n	800a4f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ae:	f000 f997 	bl	800a7e0 <prvIsQueueEmpty>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d017      	beq.n	800a4e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ba:	3324      	adds	r3, #36	; 0x24
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	4611      	mov	r1, r2
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 fdcf 	bl	800b064 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c8:	f000 f938 	bl	800a73c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4cc:	f000 fbf6 	bl	800acbc <xTaskResumeAll>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d189      	bne.n	800a3ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a4d6:	4b10      	ldr	r3, [pc, #64]	; (800a518 <xQueueReceive+0x1bc>)
 800a4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	e780      	b.n	800a3ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ea:	f000 f927 	bl	800a73c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4ee:	f000 fbe5 	bl	800acbc <xTaskResumeAll>
 800a4f2:	e77a      	b.n	800a3ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f6:	f000 f921 	bl	800a73c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4fa:	f000 fbdf 	bl	800acbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a500:	f000 f96e 	bl	800a7e0 <prvIsQueueEmpty>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	f43f af6f 	beq.w	800a3ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a50c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3730      	adds	r7, #48	; 0x30
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	e000ed04 	.word	0xe000ed04

0800a51c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08e      	sub	sp, #56	; 0x38
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10a      	bne.n	800a548 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	623b      	str	r3, [r7, #32]
}
 800a544:	bf00      	nop
 800a546:	e7fe      	b.n	800a546 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d103      	bne.n	800a556 <xQueueReceiveFromISR+0x3a>
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <xQueueReceiveFromISR+0x3e>
 800a556:	2301      	movs	r3, #1
 800a558:	e000      	b.n	800a55c <xQueueReceiveFromISR+0x40>
 800a55a:	2300      	movs	r3, #0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	61fb      	str	r3, [r7, #28]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a576:	f001 fa6f 	bl	800ba58 <vPortValidateInterruptPriority>
	__asm volatile
 800a57a:	f3ef 8211 	mrs	r2, BASEPRI
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	61ba      	str	r2, [r7, #24]
 800a590:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a592:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a594:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d02f      	beq.n	800a602 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5ac:	68b9      	ldr	r1, [r7, #8]
 800a5ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5b0:	f000 f89e 	bl	800a6f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	1e5a      	subs	r2, r3, #1
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a5bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c4:	d112      	bne.n	800a5ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d016      	beq.n	800a5fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	3310      	adds	r3, #16
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 fd6a 	bl	800b0ac <xTaskRemoveFromEventList>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00e      	beq.n	800a5fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00b      	beq.n	800a5fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	e007      	b.n	800a5fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	b25a      	sxtb	r2, r3
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a600:	e001      	b.n	800a606 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a602:	2300      	movs	r3, #0
 800a604:	637b      	str	r3, [r7, #52]	; 0x34
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	f383 8811 	msr	BASEPRI, r3
}
 800a610:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a614:	4618      	mov	r0, r3
 800a616:	3738      	adds	r7, #56	; 0x38
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a628:	2300      	movs	r3, #0
 800a62a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a630:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10d      	bne.n	800a656 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d14d      	bne.n	800a6de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	4618      	mov	r0, r3
 800a648:	f000 ff0c 	bl	800b464 <xTaskPriorityDisinherit>
 800a64c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	609a      	str	r2, [r3, #8]
 800a654:	e043      	b.n	800a6de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d119      	bne.n	800a690 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6858      	ldr	r0, [r3, #4]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a664:	461a      	mov	r2, r3
 800a666:	68b9      	ldr	r1, [r7, #8]
 800a668:	f001 ff66 	bl	800c538 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a674:	441a      	add	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	429a      	cmp	r2, r3
 800a684:	d32b      	bcc.n	800a6de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	605a      	str	r2, [r3, #4]
 800a68e:	e026      	b.n	800a6de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	68d8      	ldr	r0, [r3, #12]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a698:	461a      	mov	r2, r3
 800a69a:	68b9      	ldr	r1, [r7, #8]
 800a69c:	f001 ff4c 	bl	800c538 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	68da      	ldr	r2, [r3, #12]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a8:	425b      	negs	r3, r3
 800a6aa:	441a      	add	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d207      	bcs.n	800a6cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c4:	425b      	negs	r3, r3
 800a6c6:	441a      	add	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d105      	bne.n	800a6de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a6e6:	697b      	ldr	r3, [r7, #20]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d018      	beq.n	800a734 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68da      	ldr	r2, [r3, #12]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70a:	441a      	add	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68da      	ldr	r2, [r3, #12]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d303      	bcc.n	800a724 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68d9      	ldr	r1, [r3, #12]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72c:	461a      	mov	r2, r3
 800a72e:	6838      	ldr	r0, [r7, #0]
 800a730:	f001 ff02 	bl	800c538 <memcpy>
	}
}
 800a734:	bf00      	nop
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a744:	f001 f8a6 	bl	800b894 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a74e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a750:	e011      	b.n	800a776 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	2b00      	cmp	r3, #0
 800a758:	d012      	beq.n	800a780 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3324      	adds	r3, #36	; 0x24
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 fca4 	bl	800b0ac <xTaskRemoveFromEventList>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a76a:	f000 fd79 	bl	800b260 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	3b01      	subs	r3, #1
 800a772:	b2db      	uxtb	r3, r3
 800a774:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dce9      	bgt.n	800a752 <prvUnlockQueue+0x16>
 800a77e:	e000      	b.n	800a782 <prvUnlockQueue+0x46>
					break;
 800a780:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	22ff      	movs	r2, #255	; 0xff
 800a786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a78a:	f001 f8b3 	bl	800b8f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a78e:	f001 f881 	bl	800b894 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a798:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a79a:	e011      	b.n	800a7c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d012      	beq.n	800a7ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3310      	adds	r3, #16
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fc7f 	bl	800b0ac <xTaskRemoveFromEventList>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7b4:	f000 fd54 	bl	800b260 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	dce9      	bgt.n	800a79c <prvUnlockQueue+0x60>
 800a7c8:	e000      	b.n	800a7cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	22ff      	movs	r2, #255	; 0xff
 800a7d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a7d4:	f001 f88e 	bl	800b8f4 <vPortExitCritical>
}
 800a7d8:	bf00      	nop
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7e8:	f001 f854 	bl	800b894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d102      	bne.n	800a7fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e001      	b.n	800a7fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7fe:	f001 f879 	bl	800b8f4 <vPortExitCritical>

	return xReturn;
 800a802:	68fb      	ldr	r3, [r7, #12]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a814:	f001 f83e 	bl	800b894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a820:	429a      	cmp	r2, r3
 800a822:	d102      	bne.n	800a82a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a824:	2301      	movs	r3, #1
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	e001      	b.n	800a82e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a82e:	f001 f861 	bl	800b8f4 <vPortExitCritical>

	return xReturn;
 800a832:	68fb      	ldr	r3, [r7, #12]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08e      	sub	sp, #56	; 0x38
 800a840:	af04      	add	r7, sp, #16
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	623b      	str	r3, [r7, #32]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10a      	bne.n	800a882 <xTaskCreateStatic+0x46>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	61fb      	str	r3, [r7, #28]
}
 800a87e:	bf00      	nop
 800a880:	e7fe      	b.n	800a880 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a882:	2358      	movs	r3, #88	; 0x58
 800a884:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	2b58      	cmp	r3, #88	; 0x58
 800a88a:	d00a      	beq.n	800a8a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	61bb      	str	r3, [r7, #24]
}
 800a89e:	bf00      	nop
 800a8a0:	e7fe      	b.n	800a8a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a8a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d01e      	beq.n	800a8e8 <xTaskCreateStatic+0xac>
 800a8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d01b      	beq.n	800a8e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	2202      	movs	r2, #2
 800a8be:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9303      	str	r3, [sp, #12]
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	9302      	str	r3, [sp, #8]
 800a8ca:	f107 0314 	add.w	r3, r7, #20
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	68b9      	ldr	r1, [r7, #8]
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 f850 	bl	800a980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8e2:	f000 f8df 	bl	800aaa4 <prvAddNewTaskToReadyList>
 800a8e6:	e001      	b.n	800a8ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8ec:	697b      	ldr	r3, [r7, #20]
	}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3728      	adds	r7, #40	; 0x28
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b08c      	sub	sp, #48	; 0x30
 800a8fa:	af04      	add	r7, sp, #16
 800a8fc:	60f8      	str	r0, [r7, #12]
 800a8fe:	60b9      	str	r1, [r7, #8]
 800a900:	603b      	str	r3, [r7, #0]
 800a902:	4613      	mov	r3, r2
 800a904:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a906:	88fb      	ldrh	r3, [r7, #6]
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4618      	mov	r0, r3
 800a90c:	f001 f8e4 	bl	800bad8 <pvPortMalloc>
 800a910:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00e      	beq.n	800a936 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a918:	2058      	movs	r0, #88	; 0x58
 800a91a:	f001 f8dd 	bl	800bad8 <pvPortMalloc>
 800a91e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d003      	beq.n	800a92e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	631a      	str	r2, [r3, #48]	; 0x30
 800a92c:	e005      	b.n	800a93a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a92e:	6978      	ldr	r0, [r7, #20]
 800a930:	f001 f9a2 	bl	800bc78 <vPortFree>
 800a934:	e001      	b.n	800a93a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a936:	2300      	movs	r3, #0
 800a938:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d017      	beq.n	800a970 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a948:	88fa      	ldrh	r2, [r7, #6]
 800a94a:	2300      	movs	r3, #0
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	9302      	str	r3, [sp, #8]
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68b9      	ldr	r1, [r7, #8]
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 f80e 	bl	800a980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a964:	69f8      	ldr	r0, [r7, #28]
 800a966:	f000 f89d 	bl	800aaa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a96a:	2301      	movs	r3, #1
 800a96c:	61bb      	str	r3, [r7, #24]
 800a96e:	e002      	b.n	800a976 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a970:	f04f 33ff 	mov.w	r3, #4294967295
 800a974:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a976:	69bb      	ldr	r3, [r7, #24]
	}
 800a978:	4618      	mov	r0, r3
 800a97a:	3720      	adds	r7, #32
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b088      	sub	sp, #32
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	461a      	mov	r2, r3
 800a998:	21a5      	movs	r1, #165	; 0xa5
 800a99a:	f001 fddb 	bl	800c554 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	f023 0307 	bic.w	r3, r3, #7
 800a9b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	f003 0307 	and.w	r3, r3, #7
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00a      	beq.n	800a9d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	617b      	str	r3, [r7, #20]
}
 800a9d4:	bf00      	nop
 800a9d6:	e7fe      	b.n	800a9d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d01f      	beq.n	800aa1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9de:	2300      	movs	r3, #0
 800a9e0:	61fb      	str	r3, [r7, #28]
 800a9e2:	e012      	b.n	800aa0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	7819      	ldrb	r1, [r3, #0]
 800a9ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	3334      	adds	r3, #52	; 0x34
 800a9f4:	460a      	mov	r2, r1
 800a9f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d006      	beq.n	800aa12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	3301      	adds	r3, #1
 800aa08:	61fb      	str	r3, [r7, #28]
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	2b0f      	cmp	r3, #15
 800aa0e:	d9e9      	bls.n	800a9e4 <prvInitialiseNewTask+0x64>
 800aa10:	e000      	b.n	800aa14 <prvInitialiseNewTask+0x94>
			{
				break;
 800aa12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa1c:	e003      	b.n	800aa26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa28:	2b06      	cmp	r3, #6
 800aa2a:	d901      	bls.n	800aa30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa2c:	2306      	movs	r3, #6
 800aa2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa3a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3e:	2200      	movs	r2, #0
 800aa40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	3304      	adds	r3, #4
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7ff f920 	bl	8009c8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4e:	3318      	adds	r3, #24
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7ff f91b 	bl	8009c8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	f1c3 0207 	rsb	r2, r3, #7
 800aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	2200      	movs	r2, #0
 800aa70:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	2200      	movs	r2, #0
 800aa76:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	68f9      	ldr	r1, [r7, #12]
 800aa84:	69b8      	ldr	r0, [r7, #24]
 800aa86:	f000 fdd9 	bl	800b63c <pxPortInitialiseStack>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d002      	beq.n	800aa9c <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa9c:	bf00      	nop
 800aa9e:	3720      	adds	r7, #32
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aaac:	f000 fef2 	bl	800b894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aab0:	4b2a      	ldr	r3, [pc, #168]	; (800ab5c <prvAddNewTaskToReadyList+0xb8>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3301      	adds	r3, #1
 800aab6:	4a29      	ldr	r2, [pc, #164]	; (800ab5c <prvAddNewTaskToReadyList+0xb8>)
 800aab8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aaba:	4b29      	ldr	r3, [pc, #164]	; (800ab60 <prvAddNewTaskToReadyList+0xbc>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d109      	bne.n	800aad6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aac2:	4a27      	ldr	r2, [pc, #156]	; (800ab60 <prvAddNewTaskToReadyList+0xbc>)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aac8:	4b24      	ldr	r3, [pc, #144]	; (800ab5c <prvAddNewTaskToReadyList+0xb8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d110      	bne.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aad0:	f000 fbec 	bl	800b2ac <prvInitialiseTaskLists>
 800aad4:	e00d      	b.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aad6:	4b23      	ldr	r3, [pc, #140]	; (800ab64 <prvAddNewTaskToReadyList+0xc0>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d109      	bne.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aade:	4b20      	ldr	r3, [pc, #128]	; (800ab60 <prvAddNewTaskToReadyList+0xbc>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d802      	bhi.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aaec:	4a1c      	ldr	r2, [pc, #112]	; (800ab60 <prvAddNewTaskToReadyList+0xbc>)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aaf2:	4b1d      	ldr	r3, [pc, #116]	; (800ab68 <prvAddNewTaskToReadyList+0xc4>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	4a1b      	ldr	r2, [pc, #108]	; (800ab68 <prvAddNewTaskToReadyList+0xc4>)
 800aafa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab00:	2201      	movs	r2, #1
 800ab02:	409a      	lsls	r2, r3
 800ab04:	4b19      	ldr	r3, [pc, #100]	; (800ab6c <prvAddNewTaskToReadyList+0xc8>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	4a18      	ldr	r2, [pc, #96]	; (800ab6c <prvAddNewTaskToReadyList+0xc8>)
 800ab0c:	6013      	str	r3, [r2, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4a15      	ldr	r2, [pc, #84]	; (800ab70 <prvAddNewTaskToReadyList+0xcc>)
 800ab1c:	441a      	add	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3304      	adds	r3, #4
 800ab22:	4619      	mov	r1, r3
 800ab24:	4610      	mov	r0, r2
 800ab26:	f7ff f8be 	bl	8009ca6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab2a:	f000 fee3 	bl	800b8f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	; (800ab64 <prvAddNewTaskToReadyList+0xc0>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00e      	beq.n	800ab54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab36:	4b0a      	ldr	r3, [pc, #40]	; (800ab60 <prvAddNewTaskToReadyList+0xbc>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d207      	bcs.n	800ab54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab44:	4b0b      	ldr	r3, [pc, #44]	; (800ab74 <prvAddNewTaskToReadyList+0xd0>)
 800ab46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	200006b8 	.word	0x200006b8
 800ab60:	200005b8 	.word	0x200005b8
 800ab64:	200006c4 	.word	0x200006c4
 800ab68:	200006d4 	.word	0x200006d4
 800ab6c:	200006c0 	.word	0x200006c0
 800ab70:	200005bc 	.word	0x200005bc
 800ab74:	e000ed04 	.word	0xe000ed04

0800ab78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab80:	2300      	movs	r3, #0
 800ab82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d017      	beq.n	800abba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab8a:	4b13      	ldr	r3, [pc, #76]	; (800abd8 <vTaskDelay+0x60>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00a      	beq.n	800aba8 <vTaskDelay+0x30>
	__asm volatile
 800ab92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	60bb      	str	r3, [r7, #8]
}
 800aba4:	bf00      	nop
 800aba6:	e7fe      	b.n	800aba6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aba8:	f000 f87a 	bl	800aca0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800abac:	2100      	movs	r1, #0
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 fcde 	bl	800b570 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800abb4:	f000 f882 	bl	800acbc <xTaskResumeAll>
 800abb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d107      	bne.n	800abd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800abc0:	4b06      	ldr	r3, [pc, #24]	; (800abdc <vTaskDelay+0x64>)
 800abc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abc6:	601a      	str	r2, [r3, #0]
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800abd0:	bf00      	nop
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	200006e0 	.word	0x200006e0
 800abdc:	e000ed04 	.word	0xe000ed04

0800abe0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b08a      	sub	sp, #40	; 0x28
 800abe4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800abea:	2300      	movs	r3, #0
 800abec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800abee:	463a      	mov	r2, r7
 800abf0:	1d39      	adds	r1, r7, #4
 800abf2:	f107 0308 	add.w	r3, r7, #8
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7f5 fce6 	bl	80005c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	9202      	str	r2, [sp, #8]
 800ac04:	9301      	str	r3, [sp, #4]
 800ac06:	2300      	movs	r3, #0
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	460a      	mov	r2, r1
 800ac0e:	491e      	ldr	r1, [pc, #120]	; (800ac88 <vTaskStartScheduler+0xa8>)
 800ac10:	481e      	ldr	r0, [pc, #120]	; (800ac8c <vTaskStartScheduler+0xac>)
 800ac12:	f7ff fe13 	bl	800a83c <xTaskCreateStatic>
 800ac16:	4603      	mov	r3, r0
 800ac18:	4a1d      	ldr	r2, [pc, #116]	; (800ac90 <vTaskStartScheduler+0xb0>)
 800ac1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac1c:	4b1c      	ldr	r3, [pc, #112]	; (800ac90 <vTaskStartScheduler+0xb0>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d002      	beq.n	800ac2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac24:	2301      	movs	r3, #1
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	e001      	b.n	800ac2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d116      	bne.n	800ac62 <vTaskStartScheduler+0x82>
	__asm volatile
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	613b      	str	r3, [r7, #16]
}
 800ac46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac48:	4b12      	ldr	r3, [pc, #72]	; (800ac94 <vTaskStartScheduler+0xb4>)
 800ac4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac50:	4b11      	ldr	r3, [pc, #68]	; (800ac98 <vTaskStartScheduler+0xb8>)
 800ac52:	2201      	movs	r2, #1
 800ac54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac56:	4b11      	ldr	r3, [pc, #68]	; (800ac9c <vTaskStartScheduler+0xbc>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac5c:	f000 fd78 	bl	800b750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac60:	e00e      	b.n	800ac80 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac68:	d10a      	bne.n	800ac80 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	60fb      	str	r3, [r7, #12]
}
 800ac7c:	bf00      	nop
 800ac7e:	e7fe      	b.n	800ac7e <vTaskStartScheduler+0x9e>
}
 800ac80:	bf00      	nop
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	0800d514 	.word	0x0800d514
 800ac8c:	0800b279 	.word	0x0800b279
 800ac90:	200006dc 	.word	0x200006dc
 800ac94:	200006d8 	.word	0x200006d8
 800ac98:	200006c4 	.word	0x200006c4
 800ac9c:	200006bc 	.word	0x200006bc

0800aca0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aca0:	b480      	push	{r7}
 800aca2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aca4:	4b04      	ldr	r3, [pc, #16]	; (800acb8 <vTaskSuspendAll+0x18>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3301      	adds	r3, #1
 800acaa:	4a03      	ldr	r2, [pc, #12]	; (800acb8 <vTaskSuspendAll+0x18>)
 800acac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800acae:	bf00      	nop
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	200006e0 	.word	0x200006e0

0800acbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800acc2:	2300      	movs	r3, #0
 800acc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800acc6:	2300      	movs	r3, #0
 800acc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800acca:	4b41      	ldr	r3, [pc, #260]	; (800add0 <xTaskResumeAll+0x114>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d10a      	bne.n	800ace8 <xTaskResumeAll+0x2c>
	__asm volatile
 800acd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	603b      	str	r3, [r7, #0]
}
 800ace4:	bf00      	nop
 800ace6:	e7fe      	b.n	800ace6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ace8:	f000 fdd4 	bl	800b894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800acec:	4b38      	ldr	r3, [pc, #224]	; (800add0 <xTaskResumeAll+0x114>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	4a37      	ldr	r2, [pc, #220]	; (800add0 <xTaskResumeAll+0x114>)
 800acf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acf6:	4b36      	ldr	r3, [pc, #216]	; (800add0 <xTaskResumeAll+0x114>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d161      	bne.n	800adc2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800acfe:	4b35      	ldr	r3, [pc, #212]	; (800add4 <xTaskResumeAll+0x118>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d05d      	beq.n	800adc2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad06:	e02e      	b.n	800ad66 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad08:	4b33      	ldr	r3, [pc, #204]	; (800add8 <xTaskResumeAll+0x11c>)
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	3318      	adds	r3, #24
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7ff f823 	bl	8009d60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff f81e 	bl	8009d60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad28:	2201      	movs	r2, #1
 800ad2a:	409a      	lsls	r2, r3
 800ad2c:	4b2b      	ldr	r3, [pc, #172]	; (800addc <xTaskResumeAll+0x120>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	4a2a      	ldr	r2, [pc, #168]	; (800addc <xTaskResumeAll+0x120>)
 800ad34:	6013      	str	r3, [r2, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4a27      	ldr	r2, [pc, #156]	; (800ade0 <xTaskResumeAll+0x124>)
 800ad44:	441a      	add	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	3304      	adds	r3, #4
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	f7fe ffaa 	bl	8009ca6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad56:	4b23      	ldr	r3, [pc, #140]	; (800ade4 <xTaskResumeAll+0x128>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d302      	bcc.n	800ad66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ad60:	4b21      	ldr	r3, [pc, #132]	; (800ade8 <xTaskResumeAll+0x12c>)
 800ad62:	2201      	movs	r2, #1
 800ad64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad66:	4b1c      	ldr	r3, [pc, #112]	; (800add8 <xTaskResumeAll+0x11c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1cc      	bne.n	800ad08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d001      	beq.n	800ad78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad74:	f000 fb38 	bl	800b3e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad78:	4b1c      	ldr	r3, [pc, #112]	; (800adec <xTaskResumeAll+0x130>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d010      	beq.n	800ada6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad84:	f000 f836 	bl	800adf4 <xTaskIncrementTick>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d002      	beq.n	800ad94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ad8e:	4b16      	ldr	r3, [pc, #88]	; (800ade8 <xTaskResumeAll+0x12c>)
 800ad90:	2201      	movs	r2, #1
 800ad92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1f1      	bne.n	800ad84 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ada0:	4b12      	ldr	r3, [pc, #72]	; (800adec <xTaskResumeAll+0x130>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ada6:	4b10      	ldr	r3, [pc, #64]	; (800ade8 <xTaskResumeAll+0x12c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d009      	beq.n	800adc2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800adae:	2301      	movs	r3, #1
 800adb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800adb2:	4b0f      	ldr	r3, [pc, #60]	; (800adf0 <xTaskResumeAll+0x134>)
 800adb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adb8:	601a      	str	r2, [r3, #0]
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800adc2:	f000 fd97 	bl	800b8f4 <vPortExitCritical>

	return xAlreadyYielded;
 800adc6:	68bb      	ldr	r3, [r7, #8]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	200006e0 	.word	0x200006e0
 800add4:	200006b8 	.word	0x200006b8
 800add8:	20000678 	.word	0x20000678
 800addc:	200006c0 	.word	0x200006c0
 800ade0:	200005bc 	.word	0x200005bc
 800ade4:	200005b8 	.word	0x200005b8
 800ade8:	200006cc 	.word	0x200006cc
 800adec:	200006c8 	.word	0x200006c8
 800adf0:	e000ed04 	.word	0xe000ed04

0800adf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800adfa:	2300      	movs	r3, #0
 800adfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adfe:	4b4e      	ldr	r3, [pc, #312]	; (800af38 <xTaskIncrementTick+0x144>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f040 808e 	bne.w	800af24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae08:	4b4c      	ldr	r3, [pc, #304]	; (800af3c <xTaskIncrementTick+0x148>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae10:	4a4a      	ldr	r2, [pc, #296]	; (800af3c <xTaskIncrementTick+0x148>)
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d120      	bne.n	800ae5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae1c:	4b48      	ldr	r3, [pc, #288]	; (800af40 <xTaskIncrementTick+0x14c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <xTaskIncrementTick+0x48>
	__asm volatile
 800ae26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2a:	f383 8811 	msr	BASEPRI, r3
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	603b      	str	r3, [r7, #0]
}
 800ae38:	bf00      	nop
 800ae3a:	e7fe      	b.n	800ae3a <xTaskIncrementTick+0x46>
 800ae3c:	4b40      	ldr	r3, [pc, #256]	; (800af40 <xTaskIncrementTick+0x14c>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	60fb      	str	r3, [r7, #12]
 800ae42:	4b40      	ldr	r3, [pc, #256]	; (800af44 <xTaskIncrementTick+0x150>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a3e      	ldr	r2, [pc, #248]	; (800af40 <xTaskIncrementTick+0x14c>)
 800ae48:	6013      	str	r3, [r2, #0]
 800ae4a:	4a3e      	ldr	r2, [pc, #248]	; (800af44 <xTaskIncrementTick+0x150>)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6013      	str	r3, [r2, #0]
 800ae50:	4b3d      	ldr	r3, [pc, #244]	; (800af48 <xTaskIncrementTick+0x154>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3301      	adds	r3, #1
 800ae56:	4a3c      	ldr	r2, [pc, #240]	; (800af48 <xTaskIncrementTick+0x154>)
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	f000 fac5 	bl	800b3e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae5e:	4b3b      	ldr	r3, [pc, #236]	; (800af4c <xTaskIncrementTick+0x158>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d348      	bcc.n	800aefa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae68:	4b35      	ldr	r3, [pc, #212]	; (800af40 <xTaskIncrementTick+0x14c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d104      	bne.n	800ae7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae72:	4b36      	ldr	r3, [pc, #216]	; (800af4c <xTaskIncrementTick+0x158>)
 800ae74:	f04f 32ff 	mov.w	r2, #4294967295
 800ae78:	601a      	str	r2, [r3, #0]
					break;
 800ae7a:	e03e      	b.n	800aefa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae7c:	4b30      	ldr	r3, [pc, #192]	; (800af40 <xTaskIncrementTick+0x14c>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d203      	bcs.n	800ae9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae94:	4a2d      	ldr	r2, [pc, #180]	; (800af4c <xTaskIncrementTick+0x158>)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae9a:	e02e      	b.n	800aefa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fe ff5d 	bl	8009d60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d004      	beq.n	800aeb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	3318      	adds	r3, #24
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fe ff54 	bl	8009d60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebc:	2201      	movs	r2, #1
 800aebe:	409a      	lsls	r2, r3
 800aec0:	4b23      	ldr	r3, [pc, #140]	; (800af50 <xTaskIncrementTick+0x15c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	4a22      	ldr	r2, [pc, #136]	; (800af50 <xTaskIncrementTick+0x15c>)
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aece:	4613      	mov	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4a1f      	ldr	r2, [pc, #124]	; (800af54 <xTaskIncrementTick+0x160>)
 800aed8:	441a      	add	r2, r3
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	3304      	adds	r3, #4
 800aede:	4619      	mov	r1, r3
 800aee0:	4610      	mov	r0, r2
 800aee2:	f7fe fee0 	bl	8009ca6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeea:	4b1b      	ldr	r3, [pc, #108]	; (800af58 <xTaskIncrementTick+0x164>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d3b9      	bcc.n	800ae68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aef4:	2301      	movs	r3, #1
 800aef6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aef8:	e7b6      	b.n	800ae68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aefa:	4b17      	ldr	r3, [pc, #92]	; (800af58 <xTaskIncrementTick+0x164>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af00:	4914      	ldr	r1, [pc, #80]	; (800af54 <xTaskIncrementTick+0x160>)
 800af02:	4613      	mov	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4413      	add	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	440b      	add	r3, r1
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d901      	bls.n	800af16 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800af12:	2301      	movs	r3, #1
 800af14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af16:	4b11      	ldr	r3, [pc, #68]	; (800af5c <xTaskIncrementTick+0x168>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d007      	beq.n	800af2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800af1e:	2301      	movs	r3, #1
 800af20:	617b      	str	r3, [r7, #20]
 800af22:	e004      	b.n	800af2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af24:	4b0e      	ldr	r3, [pc, #56]	; (800af60 <xTaskIncrementTick+0x16c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3301      	adds	r3, #1
 800af2a:	4a0d      	ldr	r2, [pc, #52]	; (800af60 <xTaskIncrementTick+0x16c>)
 800af2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af2e:	697b      	ldr	r3, [r7, #20]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3718      	adds	r7, #24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	200006e0 	.word	0x200006e0
 800af3c:	200006bc 	.word	0x200006bc
 800af40:	20000670 	.word	0x20000670
 800af44:	20000674 	.word	0x20000674
 800af48:	200006d0 	.word	0x200006d0
 800af4c:	200006d8 	.word	0x200006d8
 800af50:	200006c0 	.word	0x200006c0
 800af54:	200005bc 	.word	0x200005bc
 800af58:	200005b8 	.word	0x200005b8
 800af5c:	200006cc 	.word	0x200006cc
 800af60:	200006c8 	.word	0x200006c8

0800af64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b088      	sub	sp, #32
 800af68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af6a:	4b39      	ldr	r3, [pc, #228]	; (800b050 <vTaskSwitchContext+0xec>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af72:	4b38      	ldr	r3, [pc, #224]	; (800b054 <vTaskSwitchContext+0xf0>)
 800af74:	2201      	movs	r2, #1
 800af76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af78:	e066      	b.n	800b048 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800af7a:	4b36      	ldr	r3, [pc, #216]	; (800b054 <vTaskSwitchContext+0xf0>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800af80:	4b35      	ldr	r3, [pc, #212]	; (800b058 <vTaskSwitchContext+0xf4>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af86:	61fb      	str	r3, [r7, #28]
 800af88:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800af8c:	61bb      	str	r3, [r7, #24]
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	69ba      	ldr	r2, [r7, #24]
 800af94:	429a      	cmp	r2, r3
 800af96:	d111      	bne.n	800afbc <vTaskSwitchContext+0x58>
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	3304      	adds	r3, #4
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d10b      	bne.n	800afbc <vTaskSwitchContext+0x58>
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	3308      	adds	r3, #8
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	69ba      	ldr	r2, [r7, #24]
 800afac:	429a      	cmp	r2, r3
 800afae:	d105      	bne.n	800afbc <vTaskSwitchContext+0x58>
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	330c      	adds	r3, #12
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	69ba      	ldr	r2, [r7, #24]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d008      	beq.n	800afce <vTaskSwitchContext+0x6a>
 800afbc:	4b26      	ldr	r3, [pc, #152]	; (800b058 <vTaskSwitchContext+0xf4>)
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	4b25      	ldr	r3, [pc, #148]	; (800b058 <vTaskSwitchContext+0xf4>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3334      	adds	r3, #52	; 0x34
 800afc6:	4619      	mov	r1, r3
 800afc8:	4610      	mov	r0, r2
 800afca:	f7f5 faea 	bl	80005a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afce:	4b23      	ldr	r3, [pc, #140]	; (800b05c <vTaskSwitchContext+0xf8>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	fab3 f383 	clz	r3, r3
 800afda:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800afdc:	7afb      	ldrb	r3, [r7, #11]
 800afde:	f1c3 031f 	rsb	r3, r3, #31
 800afe2:	617b      	str	r3, [r7, #20]
 800afe4:	491e      	ldr	r1, [pc, #120]	; (800b060 <vTaskSwitchContext+0xfc>)
 800afe6:	697a      	ldr	r2, [r7, #20]
 800afe8:	4613      	mov	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4413      	add	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	440b      	add	r3, r1
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10a      	bne.n	800b00e <vTaskSwitchContext+0xaa>
	__asm volatile
 800aff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	607b      	str	r3, [r7, #4]
}
 800b00a:	bf00      	nop
 800b00c:	e7fe      	b.n	800b00c <vTaskSwitchContext+0xa8>
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4a11      	ldr	r2, [pc, #68]	; (800b060 <vTaskSwitchContext+0xfc>)
 800b01a:	4413      	add	r3, r2
 800b01c:	613b      	str	r3, [r7, #16]
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	605a      	str	r2, [r3, #4]
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	3308      	adds	r3, #8
 800b030:	429a      	cmp	r2, r3
 800b032:	d104      	bne.n	800b03e <vTaskSwitchContext+0xda>
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	605a      	str	r2, [r3, #4]
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	4a04      	ldr	r2, [pc, #16]	; (800b058 <vTaskSwitchContext+0xf4>)
 800b046:	6013      	str	r3, [r2, #0]
}
 800b048:	bf00      	nop
 800b04a:	3720      	adds	r7, #32
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	200006e0 	.word	0x200006e0
 800b054:	200006cc 	.word	0x200006cc
 800b058:	200005b8 	.word	0x200005b8
 800b05c:	200006c0 	.word	0x200006c0
 800b060:	200005bc 	.word	0x200005bc

0800b064 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	60fb      	str	r3, [r7, #12]
}
 800b086:	bf00      	nop
 800b088:	e7fe      	b.n	800b088 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b08a:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <vTaskPlaceOnEventList+0x44>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3318      	adds	r3, #24
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7fe fe2b 	bl	8009cee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b098:	2101      	movs	r1, #1
 800b09a:	6838      	ldr	r0, [r7, #0]
 800b09c:	f000 fa68 	bl	800b570 <prvAddCurrentTaskToDelayedList>
}
 800b0a0:	bf00      	nop
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	200005b8 	.word	0x200005b8

0800b0ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d10a      	bne.n	800b0d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c6:	f383 8811 	msr	BASEPRI, r3
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	60fb      	str	r3, [r7, #12]
}
 800b0d4:	bf00      	nop
 800b0d6:	e7fe      	b.n	800b0d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	3318      	adds	r3, #24
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fe fe3f 	bl	8009d60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0e2:	4b1d      	ldr	r3, [pc, #116]	; (800b158 <xTaskRemoveFromEventList+0xac>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d11c      	bne.n	800b124 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fe fe36 	bl	8009d60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	409a      	lsls	r2, r3
 800b0fc:	4b17      	ldr	r3, [pc, #92]	; (800b15c <xTaskRemoveFromEventList+0xb0>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4313      	orrs	r3, r2
 800b102:	4a16      	ldr	r2, [pc, #88]	; (800b15c <xTaskRemoveFromEventList+0xb0>)
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10a:	4613      	mov	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4a13      	ldr	r2, [pc, #76]	; (800b160 <xTaskRemoveFromEventList+0xb4>)
 800b114:	441a      	add	r2, r3
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	3304      	adds	r3, #4
 800b11a:	4619      	mov	r1, r3
 800b11c:	4610      	mov	r0, r2
 800b11e:	f7fe fdc2 	bl	8009ca6 <vListInsertEnd>
 800b122:	e005      	b.n	800b130 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	3318      	adds	r3, #24
 800b128:	4619      	mov	r1, r3
 800b12a:	480e      	ldr	r0, [pc, #56]	; (800b164 <xTaskRemoveFromEventList+0xb8>)
 800b12c:	f7fe fdbb 	bl	8009ca6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b134:	4b0c      	ldr	r3, [pc, #48]	; (800b168 <xTaskRemoveFromEventList+0xbc>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d905      	bls.n	800b14a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b13e:	2301      	movs	r3, #1
 800b140:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b142:	4b0a      	ldr	r3, [pc, #40]	; (800b16c <xTaskRemoveFromEventList+0xc0>)
 800b144:	2201      	movs	r2, #1
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	e001      	b.n	800b14e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b14a:	2300      	movs	r3, #0
 800b14c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b14e:	697b      	ldr	r3, [r7, #20]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3718      	adds	r7, #24
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	200006e0 	.word	0x200006e0
 800b15c:	200006c0 	.word	0x200006c0
 800b160:	200005bc 	.word	0x200005bc
 800b164:	20000678 	.word	0x20000678
 800b168:	200005b8 	.word	0x200005b8
 800b16c:	200006cc 	.word	0x200006cc

0800b170 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b178:	4b06      	ldr	r3, [pc, #24]	; (800b194 <vTaskInternalSetTimeOutState+0x24>)
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b180:	4b05      	ldr	r3, [pc, #20]	; (800b198 <vTaskInternalSetTimeOutState+0x28>)
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	605a      	str	r2, [r3, #4]
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	200006d0 	.word	0x200006d0
 800b198:	200006bc 	.word	0x200006bc

0800b19c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	613b      	str	r3, [r7, #16]
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10a      	bne.n	800b1de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1cc:	f383 8811 	msr	BASEPRI, r3
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	60fb      	str	r3, [r7, #12]
}
 800b1da:	bf00      	nop
 800b1dc:	e7fe      	b.n	800b1dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b1de:	f000 fb59 	bl	800b894 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b1e2:	4b1d      	ldr	r3, [pc, #116]	; (800b258 <xTaskCheckForTimeOut+0xbc>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	69ba      	ldr	r2, [r7, #24]
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fa:	d102      	bne.n	800b202 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	61fb      	str	r3, [r7, #28]
 800b200:	e023      	b.n	800b24a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	4b15      	ldr	r3, [pc, #84]	; (800b25c <xTaskCheckForTimeOut+0xc0>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d007      	beq.n	800b21e <xTaskCheckForTimeOut+0x82>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	69ba      	ldr	r2, [r7, #24]
 800b214:	429a      	cmp	r2, r3
 800b216:	d302      	bcc.n	800b21e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b218:	2301      	movs	r3, #1
 800b21a:	61fb      	str	r3, [r7, #28]
 800b21c:	e015      	b.n	800b24a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	429a      	cmp	r2, r3
 800b226:	d20b      	bcs.n	800b240 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	1ad2      	subs	r2, r2, r3
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7ff ff9b 	bl	800b170 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b23a:	2300      	movs	r3, #0
 800b23c:	61fb      	str	r3, [r7, #28]
 800b23e:	e004      	b.n	800b24a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2200      	movs	r2, #0
 800b244:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b246:	2301      	movs	r3, #1
 800b248:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b24a:	f000 fb53 	bl	800b8f4 <vPortExitCritical>

	return xReturn;
 800b24e:	69fb      	ldr	r3, [r7, #28]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3720      	adds	r7, #32
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	200006bc 	.word	0x200006bc
 800b25c:	200006d0 	.word	0x200006d0

0800b260 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b260:	b480      	push	{r7}
 800b262:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b264:	4b03      	ldr	r3, [pc, #12]	; (800b274 <vTaskMissedYield+0x14>)
 800b266:	2201      	movs	r2, #1
 800b268:	601a      	str	r2, [r3, #0]
}
 800b26a:	bf00      	nop
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr
 800b274:	200006cc 	.word	0x200006cc

0800b278 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b280:	f000 f854 	bl	800b32c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b284:	4b07      	ldr	r3, [pc, #28]	; (800b2a4 <prvIdleTask+0x2c>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d907      	bls.n	800b29c <prvIdleTask+0x24>
			{
				taskYIELD();
 800b28c:	4b06      	ldr	r3, [pc, #24]	; (800b2a8 <prvIdleTask+0x30>)
 800b28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b29c:	f7f5 f97a 	bl	8000594 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b2a0:	e7ee      	b.n	800b280 <prvIdleTask+0x8>
 800b2a2:	bf00      	nop
 800b2a4:	200005bc 	.word	0x200005bc
 800b2a8:	e000ed04 	.word	0xe000ed04

0800b2ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	607b      	str	r3, [r7, #4]
 800b2b6:	e00c      	b.n	800b2d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4a12      	ldr	r2, [pc, #72]	; (800b30c <prvInitialiseTaskLists+0x60>)
 800b2c4:	4413      	add	r3, r2
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fe fcc0 	bl	8009c4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	607b      	str	r3, [r7, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b06      	cmp	r3, #6
 800b2d6:	d9ef      	bls.n	800b2b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2d8:	480d      	ldr	r0, [pc, #52]	; (800b310 <prvInitialiseTaskLists+0x64>)
 800b2da:	f7fe fcb7 	bl	8009c4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2de:	480d      	ldr	r0, [pc, #52]	; (800b314 <prvInitialiseTaskLists+0x68>)
 800b2e0:	f7fe fcb4 	bl	8009c4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2e4:	480c      	ldr	r0, [pc, #48]	; (800b318 <prvInitialiseTaskLists+0x6c>)
 800b2e6:	f7fe fcb1 	bl	8009c4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2ea:	480c      	ldr	r0, [pc, #48]	; (800b31c <prvInitialiseTaskLists+0x70>)
 800b2ec:	f7fe fcae 	bl	8009c4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2f0:	480b      	ldr	r0, [pc, #44]	; (800b320 <prvInitialiseTaskLists+0x74>)
 800b2f2:	f7fe fcab 	bl	8009c4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <prvInitialiseTaskLists+0x78>)
 800b2f8:	4a05      	ldr	r2, [pc, #20]	; (800b310 <prvInitialiseTaskLists+0x64>)
 800b2fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2fc:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <prvInitialiseTaskLists+0x7c>)
 800b2fe:	4a05      	ldr	r2, [pc, #20]	; (800b314 <prvInitialiseTaskLists+0x68>)
 800b300:	601a      	str	r2, [r3, #0]
}
 800b302:	bf00      	nop
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	200005bc 	.word	0x200005bc
 800b310:	20000648 	.word	0x20000648
 800b314:	2000065c 	.word	0x2000065c
 800b318:	20000678 	.word	0x20000678
 800b31c:	2000068c 	.word	0x2000068c
 800b320:	200006a4 	.word	0x200006a4
 800b324:	20000670 	.word	0x20000670
 800b328:	20000674 	.word	0x20000674

0800b32c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b332:	e019      	b.n	800b368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b334:	f000 faae 	bl	800b894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b338:	4b10      	ldr	r3, [pc, #64]	; (800b37c <prvCheckTasksWaitingTermination+0x50>)
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3304      	adds	r3, #4
 800b344:	4618      	mov	r0, r3
 800b346:	f7fe fd0b 	bl	8009d60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b34a:	4b0d      	ldr	r3, [pc, #52]	; (800b380 <prvCheckTasksWaitingTermination+0x54>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	3b01      	subs	r3, #1
 800b350:	4a0b      	ldr	r2, [pc, #44]	; (800b380 <prvCheckTasksWaitingTermination+0x54>)
 800b352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b354:	4b0b      	ldr	r3, [pc, #44]	; (800b384 <prvCheckTasksWaitingTermination+0x58>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3b01      	subs	r3, #1
 800b35a:	4a0a      	ldr	r2, [pc, #40]	; (800b384 <prvCheckTasksWaitingTermination+0x58>)
 800b35c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b35e:	f000 fac9 	bl	800b8f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f810 	bl	800b388 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b368:	4b06      	ldr	r3, [pc, #24]	; (800b384 <prvCheckTasksWaitingTermination+0x58>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1e1      	bne.n	800b334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b370:	bf00      	nop
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	2000068c 	.word	0x2000068c
 800b380:	200006b8 	.word	0x200006b8
 800b384:	200006a0 	.word	0x200006a0

0800b388 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b396:	2b00      	cmp	r3, #0
 800b398:	d108      	bne.n	800b3ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 fc6a 	bl	800bc78 <vPortFree>
				vPortFree( pxTCB );
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fc67 	bl	800bc78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b3aa:	e018      	b.n	800b3de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d103      	bne.n	800b3be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fc5e 	bl	800bc78 <vPortFree>
	}
 800b3bc:	e00f      	b.n	800b3de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	d00a      	beq.n	800b3de <prvDeleteTCB+0x56>
	__asm volatile
 800b3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3cc:	f383 8811 	msr	BASEPRI, r3
 800b3d0:	f3bf 8f6f 	isb	sy
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	60fb      	str	r3, [r7, #12]
}
 800b3da:	bf00      	nop
 800b3dc:	e7fe      	b.n	800b3dc <prvDeleteTCB+0x54>
	}
 800b3de:	bf00      	nop
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
	...

0800b3e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <prvResetNextTaskUnblockTime+0x38>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d104      	bne.n	800b402 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <prvResetNextTaskUnblockTime+0x3c>)
 800b3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b400:	e008      	b.n	800b414 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b402:	4b07      	ldr	r3, [pc, #28]	; (800b420 <prvResetNextTaskUnblockTime+0x38>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	4a04      	ldr	r2, [pc, #16]	; (800b424 <prvResetNextTaskUnblockTime+0x3c>)
 800b412:	6013      	str	r3, [r2, #0]
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	20000670 	.word	0x20000670
 800b424:	200006d8 	.word	0x200006d8

0800b428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b42e:	4b0b      	ldr	r3, [pc, #44]	; (800b45c <xTaskGetSchedulerState+0x34>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d102      	bne.n	800b43c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b436:	2301      	movs	r3, #1
 800b438:	607b      	str	r3, [r7, #4]
 800b43a:	e008      	b.n	800b44e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b43c:	4b08      	ldr	r3, [pc, #32]	; (800b460 <xTaskGetSchedulerState+0x38>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d102      	bne.n	800b44a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b444:	2302      	movs	r3, #2
 800b446:	607b      	str	r3, [r7, #4]
 800b448:	e001      	b.n	800b44e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b44a:	2300      	movs	r3, #0
 800b44c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b44e:	687b      	ldr	r3, [r7, #4]
	}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	200006c4 	.word	0x200006c4
 800b460:	200006e0 	.word	0x200006e0

0800b464 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b470:	2300      	movs	r3, #0
 800b472:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d06e      	beq.n	800b558 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b47a:	4b3a      	ldr	r3, [pc, #232]	; (800b564 <xTaskPriorityDisinherit+0x100>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	429a      	cmp	r2, r3
 800b482:	d00a      	beq.n	800b49a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	60fb      	str	r3, [r7, #12]
}
 800b496:	bf00      	nop
 800b498:	e7fe      	b.n	800b498 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10a      	bne.n	800b4b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	60bb      	str	r3, [r7, #8]
}
 800b4b4:	bf00      	nop
 800b4b6:	e7fe      	b.n	800b4b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4bc:	1e5a      	subs	r2, r3, #1
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d044      	beq.n	800b558 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d140      	bne.n	800b558 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fe fc40 	bl	8009d60 <uxListRemove>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d115      	bne.n	800b512 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ea:	491f      	ldr	r1, [pc, #124]	; (800b568 <xTaskPriorityDisinherit+0x104>)
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	440b      	add	r3, r1
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10a      	bne.n	800b512 <xTaskPriorityDisinherit+0xae>
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b500:	2201      	movs	r2, #1
 800b502:	fa02 f303 	lsl.w	r3, r2, r3
 800b506:	43da      	mvns	r2, r3
 800b508:	4b18      	ldr	r3, [pc, #96]	; (800b56c <xTaskPriorityDisinherit+0x108>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4013      	ands	r3, r2
 800b50e:	4a17      	ldr	r2, [pc, #92]	; (800b56c <xTaskPriorityDisinherit+0x108>)
 800b510:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51e:	f1c3 0207 	rsb	r2, r3, #7
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52a:	2201      	movs	r2, #1
 800b52c:	409a      	lsls	r2, r3
 800b52e:	4b0f      	ldr	r3, [pc, #60]	; (800b56c <xTaskPriorityDisinherit+0x108>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4313      	orrs	r3, r2
 800b534:	4a0d      	ldr	r2, [pc, #52]	; (800b56c <xTaskPriorityDisinherit+0x108>)
 800b536:	6013      	str	r3, [r2, #0]
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b53c:	4613      	mov	r3, r2
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4413      	add	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4a08      	ldr	r2, [pc, #32]	; (800b568 <xTaskPriorityDisinherit+0x104>)
 800b546:	441a      	add	r2, r3
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	3304      	adds	r3, #4
 800b54c:	4619      	mov	r1, r3
 800b54e:	4610      	mov	r0, r2
 800b550:	f7fe fba9 	bl	8009ca6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b554:	2301      	movs	r3, #1
 800b556:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b558:	697b      	ldr	r3, [r7, #20]
	}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	200005b8 	.word	0x200005b8
 800b568:	200005bc 	.word	0x200005bc
 800b56c:	200006c0 	.word	0x200006c0

0800b570 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b57a:	4b29      	ldr	r3, [pc, #164]	; (800b620 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b580:	4b28      	ldr	r3, [pc, #160]	; (800b624 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3304      	adds	r3, #4
 800b586:	4618      	mov	r0, r3
 800b588:	f7fe fbea 	bl	8009d60 <uxListRemove>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10b      	bne.n	800b5aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b592:	4b24      	ldr	r3, [pc, #144]	; (800b624 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	2201      	movs	r2, #1
 800b59a:	fa02 f303 	lsl.w	r3, r2, r3
 800b59e:	43da      	mvns	r2, r3
 800b5a0:	4b21      	ldr	r3, [pc, #132]	; (800b628 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	4a20      	ldr	r2, [pc, #128]	; (800b628 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b5a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b0:	d10a      	bne.n	800b5c8 <prvAddCurrentTaskToDelayedList+0x58>
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d007      	beq.n	800b5c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5b8:	4b1a      	ldr	r3, [pc, #104]	; (800b624 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3304      	adds	r3, #4
 800b5be:	4619      	mov	r1, r3
 800b5c0:	481a      	ldr	r0, [pc, #104]	; (800b62c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b5c2:	f7fe fb70 	bl	8009ca6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b5c6:	e026      	b.n	800b616 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b5d0:	4b14      	ldr	r3, [pc, #80]	; (800b624 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d209      	bcs.n	800b5f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5e0:	4b13      	ldr	r3, [pc, #76]	; (800b630 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	4b0f      	ldr	r3, [pc, #60]	; (800b624 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	f7fe fb7e 	bl	8009cee <vListInsert>
}
 800b5f2:	e010      	b.n	800b616 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5f4:	4b0f      	ldr	r3, [pc, #60]	; (800b634 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	4b0a      	ldr	r3, [pc, #40]	; (800b624 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	4619      	mov	r1, r3
 800b600:	4610      	mov	r0, r2
 800b602:	f7fe fb74 	bl	8009cee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b606:	4b0c      	ldr	r3, [pc, #48]	; (800b638 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d202      	bcs.n	800b616 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b610:	4a09      	ldr	r2, [pc, #36]	; (800b638 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	6013      	str	r3, [r2, #0]
}
 800b616:	bf00      	nop
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	200006bc 	.word	0x200006bc
 800b624:	200005b8 	.word	0x200005b8
 800b628:	200006c0 	.word	0x200006c0
 800b62c:	200006a4 	.word	0x200006a4
 800b630:	20000674 	.word	0x20000674
 800b634:	20000670 	.word	0x20000670
 800b638:	200006d8 	.word	0x200006d8

0800b63c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	3b04      	subs	r3, #4
 800b64c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	3b04      	subs	r3, #4
 800b65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	f023 0201 	bic.w	r2, r3, #1
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	3b04      	subs	r3, #4
 800b66a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b66c:	4a0c      	ldr	r2, [pc, #48]	; (800b6a0 <pxPortInitialiseStack+0x64>)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	3b14      	subs	r3, #20
 800b676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3b04      	subs	r3, #4
 800b682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f06f 0202 	mvn.w	r2, #2
 800b68a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	3b20      	subs	r3, #32
 800b690:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b692:	68fb      	ldr	r3, [r7, #12]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	0800b6a5 	.word	0x0800b6a5

0800b6a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6ae:	4b12      	ldr	r3, [pc, #72]	; (800b6f8 <prvTaskExitError+0x54>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b6:	d00a      	beq.n	800b6ce <prvTaskExitError+0x2a>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	60fb      	str	r3, [r7, #12]
}
 800b6ca:	bf00      	nop
 800b6cc:	e7fe      	b.n	800b6cc <prvTaskExitError+0x28>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	60bb      	str	r3, [r7, #8]
}
 800b6e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b6e2:	bf00      	nop
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d0fc      	beq.n	800b6e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6ea:	bf00      	nop
 800b6ec:	bf00      	nop
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	2000002c 	.word	0x2000002c
 800b6fc:	00000000 	.word	0x00000000

0800b700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b700:	4b07      	ldr	r3, [pc, #28]	; (800b720 <pxCurrentTCBConst2>)
 800b702:	6819      	ldr	r1, [r3, #0]
 800b704:	6808      	ldr	r0, [r1, #0]
 800b706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70a:	f380 8809 	msr	PSP, r0
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f04f 0000 	mov.w	r0, #0
 800b716:	f380 8811 	msr	BASEPRI, r0
 800b71a:	4770      	bx	lr
 800b71c:	f3af 8000 	nop.w

0800b720 <pxCurrentTCBConst2>:
 800b720:	200005b8 	.word	0x200005b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b724:	bf00      	nop
 800b726:	bf00      	nop

0800b728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b728:	4808      	ldr	r0, [pc, #32]	; (800b74c <prvPortStartFirstTask+0x24>)
 800b72a:	6800      	ldr	r0, [r0, #0]
 800b72c:	6800      	ldr	r0, [r0, #0]
 800b72e:	f380 8808 	msr	MSP, r0
 800b732:	f04f 0000 	mov.w	r0, #0
 800b736:	f380 8814 	msr	CONTROL, r0
 800b73a:	b662      	cpsie	i
 800b73c:	b661      	cpsie	f
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	df00      	svc	0
 800b748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b74a:	bf00      	nop
 800b74c:	e000ed08 	.word	0xe000ed08

0800b750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b756:	4b46      	ldr	r3, [pc, #280]	; (800b870 <xPortStartScheduler+0x120>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a46      	ldr	r2, [pc, #280]	; (800b874 <xPortStartScheduler+0x124>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d10a      	bne.n	800b776 <xPortStartScheduler+0x26>
	__asm volatile
 800b760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	613b      	str	r3, [r7, #16]
}
 800b772:	bf00      	nop
 800b774:	e7fe      	b.n	800b774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b776:	4b3e      	ldr	r3, [pc, #248]	; (800b870 <xPortStartScheduler+0x120>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a3f      	ldr	r2, [pc, #252]	; (800b878 <xPortStartScheduler+0x128>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d10a      	bne.n	800b796 <xPortStartScheduler+0x46>
	__asm volatile
 800b780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	60fb      	str	r3, [r7, #12]
}
 800b792:	bf00      	nop
 800b794:	e7fe      	b.n	800b794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b796:	4b39      	ldr	r3, [pc, #228]	; (800b87c <xPortStartScheduler+0x12c>)
 800b798:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	22ff      	movs	r2, #255	; 0xff
 800b7a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7b0:	78fb      	ldrb	r3, [r7, #3]
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b7b8:	b2da      	uxtb	r2, r3
 800b7ba:	4b31      	ldr	r3, [pc, #196]	; (800b880 <xPortStartScheduler+0x130>)
 800b7bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7be:	4b31      	ldr	r3, [pc, #196]	; (800b884 <xPortStartScheduler+0x134>)
 800b7c0:	2207      	movs	r2, #7
 800b7c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7c4:	e009      	b.n	800b7da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b7c6:	4b2f      	ldr	r3, [pc, #188]	; (800b884 <xPortStartScheduler+0x134>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	4a2d      	ldr	r2, [pc, #180]	; (800b884 <xPortStartScheduler+0x134>)
 800b7ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7d0:	78fb      	ldrb	r3, [r7, #3]
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7da:	78fb      	ldrb	r3, [r7, #3]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7e2:	2b80      	cmp	r3, #128	; 0x80
 800b7e4:	d0ef      	beq.n	800b7c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7e6:	4b27      	ldr	r3, [pc, #156]	; (800b884 <xPortStartScheduler+0x134>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f1c3 0307 	rsb	r3, r3, #7
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	d00a      	beq.n	800b808 <xPortStartScheduler+0xb8>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	60bb      	str	r3, [r7, #8]
}
 800b804:	bf00      	nop
 800b806:	e7fe      	b.n	800b806 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b808:	4b1e      	ldr	r3, [pc, #120]	; (800b884 <xPortStartScheduler+0x134>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	021b      	lsls	r3, r3, #8
 800b80e:	4a1d      	ldr	r2, [pc, #116]	; (800b884 <xPortStartScheduler+0x134>)
 800b810:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b812:	4b1c      	ldr	r3, [pc, #112]	; (800b884 <xPortStartScheduler+0x134>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b81a:	4a1a      	ldr	r2, [pc, #104]	; (800b884 <xPortStartScheduler+0x134>)
 800b81c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	b2da      	uxtb	r2, r3
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b826:	4b18      	ldr	r3, [pc, #96]	; (800b888 <xPortStartScheduler+0x138>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a17      	ldr	r2, [pc, #92]	; (800b888 <xPortStartScheduler+0x138>)
 800b82c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b832:	4b15      	ldr	r3, [pc, #84]	; (800b888 <xPortStartScheduler+0x138>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a14      	ldr	r2, [pc, #80]	; (800b888 <xPortStartScheduler+0x138>)
 800b838:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b83c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b83e:	f000 f8dd 	bl	800b9fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b842:	4b12      	ldr	r3, [pc, #72]	; (800b88c <xPortStartScheduler+0x13c>)
 800b844:	2200      	movs	r2, #0
 800b846:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b848:	f000 f8fc 	bl	800ba44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b84c:	4b10      	ldr	r3, [pc, #64]	; (800b890 <xPortStartScheduler+0x140>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a0f      	ldr	r2, [pc, #60]	; (800b890 <xPortStartScheduler+0x140>)
 800b852:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b856:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b858:	f7ff ff66 	bl	800b728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b85c:	f7ff fb82 	bl	800af64 <vTaskSwitchContext>
	prvTaskExitError();
 800b860:	f7ff ff20 	bl	800b6a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3718      	adds	r7, #24
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	e000ed00 	.word	0xe000ed00
 800b874:	410fc271 	.word	0x410fc271
 800b878:	410fc270 	.word	0x410fc270
 800b87c:	e000e400 	.word	0xe000e400
 800b880:	200006e4 	.word	0x200006e4
 800b884:	200006e8 	.word	0x200006e8
 800b888:	e000ed20 	.word	0xe000ed20
 800b88c:	2000002c 	.word	0x2000002c
 800b890:	e000ef34 	.word	0xe000ef34

0800b894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	607b      	str	r3, [r7, #4]
}
 800b8ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b8ae:	4b0f      	ldr	r3, [pc, #60]	; (800b8ec <vPortEnterCritical+0x58>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	4a0d      	ldr	r2, [pc, #52]	; (800b8ec <vPortEnterCritical+0x58>)
 800b8b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b8b8:	4b0c      	ldr	r3, [pc, #48]	; (800b8ec <vPortEnterCritical+0x58>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d10f      	bne.n	800b8e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b8c0:	4b0b      	ldr	r3, [pc, #44]	; (800b8f0 <vPortEnterCritical+0x5c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00a      	beq.n	800b8e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	603b      	str	r3, [r7, #0]
}
 800b8dc:	bf00      	nop
 800b8de:	e7fe      	b.n	800b8de <vPortEnterCritical+0x4a>
	}
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	2000002c 	.word	0x2000002c
 800b8f0:	e000ed04 	.word	0xe000ed04

0800b8f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8fa:	4b12      	ldr	r3, [pc, #72]	; (800b944 <vPortExitCritical+0x50>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10a      	bne.n	800b918 <vPortExitCritical+0x24>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	607b      	str	r3, [r7, #4]
}
 800b914:	bf00      	nop
 800b916:	e7fe      	b.n	800b916 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b918:	4b0a      	ldr	r3, [pc, #40]	; (800b944 <vPortExitCritical+0x50>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	4a09      	ldr	r2, [pc, #36]	; (800b944 <vPortExitCritical+0x50>)
 800b920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b922:	4b08      	ldr	r3, [pc, #32]	; (800b944 <vPortExitCritical+0x50>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d105      	bne.n	800b936 <vPortExitCritical+0x42>
 800b92a:	2300      	movs	r3, #0
 800b92c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	f383 8811 	msr	BASEPRI, r3
}
 800b934:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b936:	bf00      	nop
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	2000002c 	.word	0x2000002c
	...

0800b950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b950:	f3ef 8009 	mrs	r0, PSP
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	4b15      	ldr	r3, [pc, #84]	; (800b9b0 <pxCurrentTCBConst>)
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	f01e 0f10 	tst.w	lr, #16
 800b960:	bf08      	it	eq
 800b962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96a:	6010      	str	r0, [r2, #0]
 800b96c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b970:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b974:	f380 8811 	msr	BASEPRI, r0
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f7ff faf0 	bl	800af64 <vTaskSwitchContext>
 800b984:	f04f 0000 	mov.w	r0, #0
 800b988:	f380 8811 	msr	BASEPRI, r0
 800b98c:	bc09      	pop	{r0, r3}
 800b98e:	6819      	ldr	r1, [r3, #0]
 800b990:	6808      	ldr	r0, [r1, #0]
 800b992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b996:	f01e 0f10 	tst.w	lr, #16
 800b99a:	bf08      	it	eq
 800b99c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9a0:	f380 8809 	msr	PSP, r0
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	f3af 8000 	nop.w

0800b9b0 <pxCurrentTCBConst>:
 800b9b0:	200005b8 	.word	0x200005b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b9b4:	bf00      	nop
 800b9b6:	bf00      	nop

0800b9b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	607b      	str	r3, [r7, #4]
}
 800b9d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b9d2:	f7ff fa0f 	bl	800adf4 <xTaskIncrementTick>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d003      	beq.n	800b9e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b9dc:	4b06      	ldr	r3, [pc, #24]	; (800b9f8 <SysTick_Handler+0x40>)
 800b9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9e2:	601a      	str	r2, [r3, #0]
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	f383 8811 	msr	BASEPRI, r3
}
 800b9ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b9f0:	bf00      	nop
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	e000ed04 	.word	0xe000ed04

0800b9fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba00:	4b0b      	ldr	r3, [pc, #44]	; (800ba30 <vPortSetupTimerInterrupt+0x34>)
 800ba02:	2200      	movs	r2, #0
 800ba04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba06:	4b0b      	ldr	r3, [pc, #44]	; (800ba34 <vPortSetupTimerInterrupt+0x38>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba0c:	4b0a      	ldr	r3, [pc, #40]	; (800ba38 <vPortSetupTimerInterrupt+0x3c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a0a      	ldr	r2, [pc, #40]	; (800ba3c <vPortSetupTimerInterrupt+0x40>)
 800ba12:	fba2 2303 	umull	r2, r3, r2, r3
 800ba16:	099b      	lsrs	r3, r3, #6
 800ba18:	4a09      	ldr	r2, [pc, #36]	; (800ba40 <vPortSetupTimerInterrupt+0x44>)
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba1e:	4b04      	ldr	r3, [pc, #16]	; (800ba30 <vPortSetupTimerInterrupt+0x34>)
 800ba20:	2207      	movs	r2, #7
 800ba22:	601a      	str	r2, [r3, #0]
}
 800ba24:	bf00      	nop
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	e000e010 	.word	0xe000e010
 800ba34:	e000e018 	.word	0xe000e018
 800ba38:	20000000 	.word	0x20000000
 800ba3c:	10624dd3 	.word	0x10624dd3
 800ba40:	e000e014 	.word	0xe000e014

0800ba44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ba54 <vPortEnableVFP+0x10>
 800ba48:	6801      	ldr	r1, [r0, #0]
 800ba4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ba4e:	6001      	str	r1, [r0, #0]
 800ba50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba52:	bf00      	nop
 800ba54:	e000ed88 	.word	0xe000ed88

0800ba58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba5e:	f3ef 8305 	mrs	r3, IPSR
 800ba62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2b0f      	cmp	r3, #15
 800ba68:	d914      	bls.n	800ba94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba6a:	4a17      	ldr	r2, [pc, #92]	; (800bac8 <vPortValidateInterruptPriority+0x70>)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4413      	add	r3, r2
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba74:	4b15      	ldr	r3, [pc, #84]	; (800bacc <vPortValidateInterruptPriority+0x74>)
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	7afa      	ldrb	r2, [r7, #11]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d20a      	bcs.n	800ba94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	607b      	str	r3, [r7, #4]
}
 800ba90:	bf00      	nop
 800ba92:	e7fe      	b.n	800ba92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba94:	4b0e      	ldr	r3, [pc, #56]	; (800bad0 <vPortValidateInterruptPriority+0x78>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba9c:	4b0d      	ldr	r3, [pc, #52]	; (800bad4 <vPortValidateInterruptPriority+0x7c>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d90a      	bls.n	800baba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	603b      	str	r3, [r7, #0]
}
 800bab6:	bf00      	nop
 800bab8:	e7fe      	b.n	800bab8 <vPortValidateInterruptPriority+0x60>
	}
 800baba:	bf00      	nop
 800babc:	3714      	adds	r7, #20
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	e000e3f0 	.word	0xe000e3f0
 800bacc:	200006e4 	.word	0x200006e4
 800bad0:	e000ed0c 	.word	0xe000ed0c
 800bad4:	200006e8 	.word	0x200006e8

0800bad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b08a      	sub	sp, #40	; 0x28
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bae0:	2300      	movs	r3, #0
 800bae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bae4:	f7ff f8dc 	bl	800aca0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bae8:	4b5d      	ldr	r3, [pc, #372]	; (800bc60 <pvPortMalloc+0x188>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d101      	bne.n	800baf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800baf0:	f000 f924 	bl	800bd3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800baf4:	4b5b      	ldr	r3, [pc, #364]	; (800bc64 <pvPortMalloc+0x18c>)
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4013      	ands	r3, r2
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f040 8093 	bne.w	800bc28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d01d      	beq.n	800bb44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bb08:	2208      	movs	r2, #8
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f003 0307 	and.w	r3, r3, #7
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d014      	beq.n	800bb44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f023 0307 	bic.w	r3, r3, #7
 800bb20:	3308      	adds	r3, #8
 800bb22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f003 0307 	and.w	r3, r3, #7
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00a      	beq.n	800bb44 <pvPortMalloc+0x6c>
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	617b      	str	r3, [r7, #20]
}
 800bb40:	bf00      	nop
 800bb42:	e7fe      	b.n	800bb42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d06e      	beq.n	800bc28 <pvPortMalloc+0x150>
 800bb4a:	4b47      	ldr	r3, [pc, #284]	; (800bc68 <pvPortMalloc+0x190>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d869      	bhi.n	800bc28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb54:	4b45      	ldr	r3, [pc, #276]	; (800bc6c <pvPortMalloc+0x194>)
 800bb56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb58:	4b44      	ldr	r3, [pc, #272]	; (800bc6c <pvPortMalloc+0x194>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb5e:	e004      	b.n	800bb6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d903      	bls.n	800bb7c <pvPortMalloc+0xa4>
 800bb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1f1      	bne.n	800bb60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb7c:	4b38      	ldr	r3, [pc, #224]	; (800bc60 <pvPortMalloc+0x188>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d050      	beq.n	800bc28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2208      	movs	r2, #8
 800bb8c:	4413      	add	r3, r2
 800bb8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	1ad2      	subs	r2, r2, r3
 800bba0:	2308      	movs	r3, #8
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d91f      	bls.n	800bbe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4413      	add	r3, r2
 800bbae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	f003 0307 	and.w	r3, r3, #7
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00a      	beq.n	800bbd0 <pvPortMalloc+0xf8>
	__asm volatile
 800bbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	613b      	str	r3, [r7, #16]
}
 800bbcc:	bf00      	nop
 800bbce:	e7fe      	b.n	800bbce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	685a      	ldr	r2, [r3, #4]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	1ad2      	subs	r2, r2, r3
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bbe2:	69b8      	ldr	r0, [r7, #24]
 800bbe4:	f000 f90c 	bl	800be00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bbe8:	4b1f      	ldr	r3, [pc, #124]	; (800bc68 <pvPortMalloc+0x190>)
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	4a1d      	ldr	r2, [pc, #116]	; (800bc68 <pvPortMalloc+0x190>)
 800bbf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bbf6:	4b1c      	ldr	r3, [pc, #112]	; (800bc68 <pvPortMalloc+0x190>)
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	4b1d      	ldr	r3, [pc, #116]	; (800bc70 <pvPortMalloc+0x198>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d203      	bcs.n	800bc0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc02:	4b19      	ldr	r3, [pc, #100]	; (800bc68 <pvPortMalloc+0x190>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a1a      	ldr	r2, [pc, #104]	; (800bc70 <pvPortMalloc+0x198>)
 800bc08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0c:	685a      	ldr	r2, [r3, #4]
 800bc0e:	4b15      	ldr	r3, [pc, #84]	; (800bc64 <pvPortMalloc+0x18c>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	431a      	orrs	r2, r3
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc1e:	4b15      	ldr	r3, [pc, #84]	; (800bc74 <pvPortMalloc+0x19c>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	3301      	adds	r3, #1
 800bc24:	4a13      	ldr	r2, [pc, #76]	; (800bc74 <pvPortMalloc+0x19c>)
 800bc26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc28:	f7ff f848 	bl	800acbc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800bc32:	f7f4 fcc1 	bl	80005b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	f003 0307 	and.w	r3, r3, #7
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00a      	beq.n	800bc56 <pvPortMalloc+0x17e>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	60fb      	str	r3, [r7, #12]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <pvPortMalloc+0x17c>
	return pvReturn;
 800bc56:	69fb      	ldr	r3, [r7, #28]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3728      	adds	r7, #40	; 0x28
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	200086f4 	.word	0x200086f4
 800bc64:	20008708 	.word	0x20008708
 800bc68:	200086f8 	.word	0x200086f8
 800bc6c:	200086ec 	.word	0x200086ec
 800bc70:	200086fc 	.word	0x200086fc
 800bc74:	20008700 	.word	0x20008700

0800bc78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d04d      	beq.n	800bd26 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc8a:	2308      	movs	r3, #8
 800bc8c:	425b      	negs	r3, r3
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	4413      	add	r3, r2
 800bc92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	685a      	ldr	r2, [r3, #4]
 800bc9c:	4b24      	ldr	r3, [pc, #144]	; (800bd30 <vPortFree+0xb8>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4013      	ands	r3, r2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10a      	bne.n	800bcbc <vPortFree+0x44>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	60fb      	str	r3, [r7, #12]
}
 800bcb8:	bf00      	nop
 800bcba:	e7fe      	b.n	800bcba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00a      	beq.n	800bcda <vPortFree+0x62>
	__asm volatile
 800bcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	60bb      	str	r3, [r7, #8]
}
 800bcd6:	bf00      	nop
 800bcd8:	e7fe      	b.n	800bcd8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	685a      	ldr	r2, [r3, #4]
 800bcde:	4b14      	ldr	r3, [pc, #80]	; (800bd30 <vPortFree+0xb8>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4013      	ands	r3, r2
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d01e      	beq.n	800bd26 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d11a      	bne.n	800bd26 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	4b0e      	ldr	r3, [pc, #56]	; (800bd30 <vPortFree+0xb8>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	43db      	mvns	r3, r3
 800bcfa:	401a      	ands	r2, r3
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd00:	f7fe ffce 	bl	800aca0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	4b0a      	ldr	r3, [pc, #40]	; (800bd34 <vPortFree+0xbc>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	4a09      	ldr	r2, [pc, #36]	; (800bd34 <vPortFree+0xbc>)
 800bd10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd12:	6938      	ldr	r0, [r7, #16]
 800bd14:	f000 f874 	bl	800be00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd18:	4b07      	ldr	r3, [pc, #28]	; (800bd38 <vPortFree+0xc0>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	4a06      	ldr	r2, [pc, #24]	; (800bd38 <vPortFree+0xc0>)
 800bd20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd22:	f7fe ffcb 	bl	800acbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd26:	bf00      	nop
 800bd28:	3718      	adds	r7, #24
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	20008708 	.word	0x20008708
 800bd34:	200086f8 	.word	0x200086f8
 800bd38:	20008704 	.word	0x20008704

0800bd3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd48:	4b27      	ldr	r3, [pc, #156]	; (800bde8 <prvHeapInit+0xac>)
 800bd4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f003 0307 	and.w	r3, r3, #7
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00c      	beq.n	800bd70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	3307      	adds	r3, #7
 800bd5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f023 0307 	bic.w	r3, r3, #7
 800bd62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	4a1f      	ldr	r2, [pc, #124]	; (800bde8 <prvHeapInit+0xac>)
 800bd6c:	4413      	add	r3, r2
 800bd6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd74:	4a1d      	ldr	r2, [pc, #116]	; (800bdec <prvHeapInit+0xb0>)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd7a:	4b1c      	ldr	r3, [pc, #112]	; (800bdec <prvHeapInit+0xb0>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	4413      	add	r3, r2
 800bd86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd88:	2208      	movs	r2, #8
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	1a9b      	subs	r3, r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f023 0307 	bic.w	r3, r3, #7
 800bd96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	4a15      	ldr	r2, [pc, #84]	; (800bdf0 <prvHeapInit+0xb4>)
 800bd9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd9e:	4b14      	ldr	r3, [pc, #80]	; (800bdf0 <prvHeapInit+0xb4>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2200      	movs	r2, #0
 800bda4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bda6:	4b12      	ldr	r3, [pc, #72]	; (800bdf0 <prvHeapInit+0xb4>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	1ad2      	subs	r2, r2, r3
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bdbc:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <prvHeapInit+0xb4>)
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	4a0a      	ldr	r2, [pc, #40]	; (800bdf4 <prvHeapInit+0xb8>)
 800bdca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	4a09      	ldr	r2, [pc, #36]	; (800bdf8 <prvHeapInit+0xbc>)
 800bdd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bdd4:	4b09      	ldr	r3, [pc, #36]	; (800bdfc <prvHeapInit+0xc0>)
 800bdd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bdda:	601a      	str	r2, [r3, #0]
}
 800bddc:	bf00      	nop
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr
 800bde8:	200006ec 	.word	0x200006ec
 800bdec:	200086ec 	.word	0x200086ec
 800bdf0:	200086f4 	.word	0x200086f4
 800bdf4:	200086fc 	.word	0x200086fc
 800bdf8:	200086f8 	.word	0x200086f8
 800bdfc:	20008708 	.word	0x20008708

0800be00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be08:	4b28      	ldr	r3, [pc, #160]	; (800beac <prvInsertBlockIntoFreeList+0xac>)
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	e002      	b.n	800be14 <prvInsertBlockIntoFreeList+0x14>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	60fb      	str	r3, [r7, #12]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d8f7      	bhi.n	800be0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	4413      	add	r3, r2
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d108      	bne.n	800be42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	685a      	ldr	r2, [r3, #4]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	441a      	add	r2, r3
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	441a      	add	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	429a      	cmp	r2, r3
 800be54:	d118      	bne.n	800be88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	4b15      	ldr	r3, [pc, #84]	; (800beb0 <prvInsertBlockIntoFreeList+0xb0>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d00d      	beq.n	800be7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	441a      	add	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	601a      	str	r2, [r3, #0]
 800be7c:	e008      	b.n	800be90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be7e:	4b0c      	ldr	r3, [pc, #48]	; (800beb0 <prvInsertBlockIntoFreeList+0xb0>)
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	601a      	str	r2, [r3, #0]
 800be86:	e003      	b.n	800be90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	d002      	beq.n	800be9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be9e:	bf00      	nop
 800bea0:	3714      	adds	r7, #20
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	200086ec 	.word	0x200086ec
 800beb0:	200086f4 	.word	0x200086f4

0800beb4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800beb8:	2200      	movs	r2, #0
 800beba:	490e      	ldr	r1, [pc, #56]	; (800bef4 <MX_USB_HOST_Init+0x40>)
 800bebc:	480e      	ldr	r0, [pc, #56]	; (800bef8 <MX_USB_HOST_Init+0x44>)
 800bebe:	f7fb fed3 	bl	8007c68 <USBH_Init>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bec8:	f7f4 ff8a 	bl	8000de0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800becc:	490b      	ldr	r1, [pc, #44]	; (800befc <MX_USB_HOST_Init+0x48>)
 800bece:	480a      	ldr	r0, [pc, #40]	; (800bef8 <MX_USB_HOST_Init+0x44>)
 800bed0:	f7fb ff80 	bl	8007dd4 <USBH_RegisterClass>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800beda:	f7f4 ff81 	bl	8000de0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800bede:	4806      	ldr	r0, [pc, #24]	; (800bef8 <MX_USB_HOST_Init+0x44>)
 800bee0:	f7fc f804 	bl	8007eec <USBH_Start>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800beea:	f7f4 ff79 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800beee:	bf00      	nop
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	0800bf01 	.word	0x0800bf01
 800bef8:	2000870c 	.word	0x2000870c
 800befc:	2000000c 	.word	0x2000000c

0800bf00 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bf0c:	78fb      	ldrb	r3, [r7, #3]
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	2b04      	cmp	r3, #4
 800bf12:	d819      	bhi.n	800bf48 <USBH_UserProcess+0x48>
 800bf14:	a201      	add	r2, pc, #4	; (adr r2, 800bf1c <USBH_UserProcess+0x1c>)
 800bf16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1a:	bf00      	nop
 800bf1c:	0800bf49 	.word	0x0800bf49
 800bf20:	0800bf39 	.word	0x0800bf39
 800bf24:	0800bf49 	.word	0x0800bf49
 800bf28:	0800bf41 	.word	0x0800bf41
 800bf2c:	0800bf31 	.word	0x0800bf31
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bf30:	4b09      	ldr	r3, [pc, #36]	; (800bf58 <USBH_UserProcess+0x58>)
 800bf32:	2203      	movs	r2, #3
 800bf34:	701a      	strb	r2, [r3, #0]
  break;
 800bf36:	e008      	b.n	800bf4a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bf38:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <USBH_UserProcess+0x58>)
 800bf3a:	2202      	movs	r2, #2
 800bf3c:	701a      	strb	r2, [r3, #0]
  break;
 800bf3e:	e004      	b.n	800bf4a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bf40:	4b05      	ldr	r3, [pc, #20]	; (800bf58 <USBH_UserProcess+0x58>)
 800bf42:	2201      	movs	r2, #1
 800bf44:	701a      	strb	r2, [r3, #0]
  break;
 800bf46:	e000      	b.n	800bf4a <USBH_UserProcess+0x4a>

  default:
  break;
 800bf48:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bf4a:	bf00      	nop
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	20008af0 	.word	0x20008af0

0800bf5c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08a      	sub	sp, #40	; 0x28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf64:	f107 0314 	add.w	r3, r7, #20
 800bf68:	2200      	movs	r2, #0
 800bf6a:	601a      	str	r2, [r3, #0]
 800bf6c:	605a      	str	r2, [r3, #4]
 800bf6e:	609a      	str	r2, [r3, #8]
 800bf70:	60da      	str	r2, [r3, #12]
 800bf72:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a24      	ldr	r2, [pc, #144]	; (800c00c <HAL_HCD_MspInit+0xb0>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d141      	bne.n	800c002 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf7e:	2300      	movs	r3, #0
 800bf80:	613b      	str	r3, [r7, #16]
 800bf82:	4b23      	ldr	r3, [pc, #140]	; (800c010 <HAL_HCD_MspInit+0xb4>)
 800bf84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf86:	4a22      	ldr	r2, [pc, #136]	; (800c010 <HAL_HCD_MspInit+0xb4>)
 800bf88:	f043 0302 	orr.w	r3, r3, #2
 800bf8c:	6313      	str	r3, [r2, #48]	; 0x30
 800bf8e:	4b20      	ldr	r3, [pc, #128]	; (800c010 <HAL_HCD_MspInit+0xb4>)
 800bf90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf92:	f003 0302 	and.w	r3, r3, #2
 800bf96:	613b      	str	r3, [r7, #16]
 800bf98:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800bf9a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800bf9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfa0:	2302      	movs	r3, #2
 800bfa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800bfac:	230c      	movs	r3, #12
 800bfae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfb0:	f107 0314 	add.w	r3, r7, #20
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	4817      	ldr	r0, [pc, #92]	; (800c014 <HAL_HCD_MspInit+0xb8>)
 800bfb8:	f7f5 ff60 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800bfbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800bfca:	f107 0314 	add.w	r3, r7, #20
 800bfce:	4619      	mov	r1, r3
 800bfd0:	4810      	ldr	r0, [pc, #64]	; (800c014 <HAL_HCD_MspInit+0xb8>)
 800bfd2:	f7f5 ff53 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60fb      	str	r3, [r7, #12]
 800bfda:	4b0d      	ldr	r3, [pc, #52]	; (800c010 <HAL_HCD_MspInit+0xb4>)
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfde:	4a0c      	ldr	r2, [pc, #48]	; (800c010 <HAL_HCD_MspInit+0xb4>)
 800bfe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bfe4:	6313      	str	r3, [r2, #48]	; 0x30
 800bfe6:	4b0a      	ldr	r3, [pc, #40]	; (800c010 <HAL_HCD_MspInit+0xb4>)
 800bfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfee:	60fb      	str	r3, [r7, #12]
 800bff0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800bff2:	2200      	movs	r2, #0
 800bff4:	2105      	movs	r1, #5
 800bff6:	204d      	movs	r0, #77	; 0x4d
 800bff8:	f7f5 fd0e 	bl	8001a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800bffc:	204d      	movs	r0, #77	; 0x4d
 800bffe:	f7f5 fd27 	bl	8001a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c002:	bf00      	nop
 800c004:	3728      	adds	r7, #40	; 0x28
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	40040000 	.word	0x40040000
 800c010:	40023800 	.word	0x40023800
 800c014:	40020400 	.word	0x40020400

0800c018 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c026:	4618      	mov	r0, r3
 800c028:	f7fc fc17 	bl	800885a <USBH_LL_IncTimer>
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c042:	4618      	mov	r0, r3
 800c044:	f7fc fc5b 	bl	80088fe <USBH_LL_Connect>
}
 800c048:	bf00      	nop
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fc fc70 	bl	8008944 <USBH_LL_Disconnect>
}
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	460b      	mov	r3, r1
 800c076:	70fb      	strb	r3, [r7, #3]
 800c078:	4613      	mov	r3, r2
 800c07a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c082:	4618      	mov	r0, r3
 800c084:	f7fc fca5 	bl	80089d2 <USBH_LL_NotifyURBChange>
#endif
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fc fc05 	bl	80088ae <USBH_LL_PortEnabled>
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fc fc11 	bl	80088e2 <USBH_LL_PortDisabled>
}
 800c0c0:	bf00      	nop
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d132      	bne.n	800c140 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800c0da:	4a1c      	ldr	r2, [pc, #112]	; (800c14c <USBH_LL_Init+0x84>)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4a19      	ldr	r2, [pc, #100]	; (800c14c <USBH_LL_Init+0x84>)
 800c0e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c0ea:	4b18      	ldr	r3, [pc, #96]	; (800c14c <USBH_LL_Init+0x84>)
 800c0ec:	4a18      	ldr	r2, [pc, #96]	; (800c150 <USBH_LL_Init+0x88>)
 800c0ee:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800c0f0:	4b16      	ldr	r3, [pc, #88]	; (800c14c <USBH_LL_Init+0x84>)
 800c0f2:	220c      	movs	r2, #12
 800c0f4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800c0f6:	4b15      	ldr	r3, [pc, #84]	; (800c14c <USBH_LL_Init+0x84>)
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c0fc:	4b13      	ldr	r3, [pc, #76]	; (800c14c <USBH_LL_Init+0x84>)
 800c0fe:	2200      	movs	r2, #0
 800c100:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c102:	4b12      	ldr	r3, [pc, #72]	; (800c14c <USBH_LL_Init+0x84>)
 800c104:	2202      	movs	r2, #2
 800c106:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c108:	4b10      	ldr	r3, [pc, #64]	; (800c14c <USBH_LL_Init+0x84>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c10e:	4b0f      	ldr	r3, [pc, #60]	; (800c14c <USBH_LL_Init+0x84>)
 800c110:	2200      	movs	r2, #0
 800c112:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c114:	4b0d      	ldr	r3, [pc, #52]	; (800c14c <USBH_LL_Init+0x84>)
 800c116:	2200      	movs	r2, #0
 800c118:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c11a:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <USBH_LL_Init+0x84>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800c120:	480a      	ldr	r0, [pc, #40]	; (800c14c <USBH_LL_Init+0x84>)
 800c122:	f7f6 f870 	bl	8002206 <HAL_HCD_Init>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800c12c:	f7f4 fe58 	bl	8000de0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800c130:	4806      	ldr	r0, [pc, #24]	; (800c14c <USBH_LL_Init+0x84>)
 800c132:	f7f6 fc54 	bl	80029de <HAL_HCD_GetCurrentFrame>
 800c136:	4603      	mov	r3, r0
 800c138:	4619      	mov	r1, r3
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f7fc fb7e 	bl	800883c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20008af4 	.word	0x20008af4
 800c150:	40040000 	.word	0x40040000

0800c154 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c160:	2300      	movs	r3, #0
 800c162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7f6 fbc1 	bl	80028f2 <HAL_HCD_Start>
 800c170:	4603      	mov	r3, r0
 800c172:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c174:	7bfb      	ldrb	r3, [r7, #15]
 800c176:	4618      	mov	r0, r3
 800c178:	f000 f95c 	bl	800c434 <USBH_Get_USB_Status>
 800c17c:	4603      	mov	r3, r0
 800c17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c180:	7bbb      	ldrb	r3, [r7, #14]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b084      	sub	sp, #16
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7f6 fbc9 	bl	8002938 <HAL_HCD_Stop>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1aa:	7bfb      	ldrb	r3, [r7, #15]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f000 f941 	bl	800c434 <USBH_Get_USB_Status>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7f6 fc11 	bl	80029fa <HAL_HCD_GetCurrentSpeed>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d00c      	beq.n	800c1f8 <USBH_LL_GetSpeed+0x38>
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	d80d      	bhi.n	800c1fe <USBH_LL_GetSpeed+0x3e>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <USBH_LL_GetSpeed+0x2c>
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d003      	beq.n	800c1f2 <USBH_LL_GetSpeed+0x32>
 800c1ea:	e008      	b.n	800c1fe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c1f0:	e008      	b.n	800c204 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	73fb      	strb	r3, [r7, #15]
    break;
 800c1f6:	e005      	b.n	800c204 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c1fc:	e002      	b.n	800c204 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c1fe:	2301      	movs	r3, #1
 800c200:	73fb      	strb	r3, [r7, #15]
    break;
 800c202:	bf00      	nop
  }
  return  speed;
 800c204:	7bfb      	ldrb	r3, [r7, #15]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b084      	sub	sp, #16
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c224:	4618      	mov	r0, r3
 800c226:	f7f6 fba4 	bl	8002972 <HAL_HCD_ResetPort>
 800c22a:	4603      	mov	r3, r0
 800c22c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c22e:	7bfb      	ldrb	r3, [r7, #15]
 800c230:	4618      	mov	r0, r3
 800c232:	f000 f8ff 	bl	800c434 <USBH_Get_USB_Status>
 800c236:	4603      	mov	r3, r0
 800c238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c23a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	460b      	mov	r3, r1
 800c24e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c256:	78fa      	ldrb	r2, [r7, #3]
 800c258:	4611      	mov	r1, r2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7f6 fbab 	bl	80029b6 <HAL_HCD_HC_GetXferCount>
 800c260:	4603      	mov	r3, r0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c26a:	b590      	push	{r4, r7, lr}
 800c26c:	b089      	sub	sp, #36	; 0x24
 800c26e:	af04      	add	r7, sp, #16
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	4608      	mov	r0, r1
 800c274:	4611      	mov	r1, r2
 800c276:	461a      	mov	r2, r3
 800c278:	4603      	mov	r3, r0
 800c27a:	70fb      	strb	r3, [r7, #3]
 800c27c:	460b      	mov	r3, r1
 800c27e:	70bb      	strb	r3, [r7, #2]
 800c280:	4613      	mov	r3, r2
 800c282:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c284:	2300      	movs	r3, #0
 800c286:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c292:	787c      	ldrb	r4, [r7, #1]
 800c294:	78ba      	ldrb	r2, [r7, #2]
 800c296:	78f9      	ldrb	r1, [r7, #3]
 800c298:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c29a:	9302      	str	r3, [sp, #8]
 800c29c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	4623      	mov	r3, r4
 800c2aa:	f7f6 f80e 	bl	80022ca <HAL_HCD_HC_Init>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f000 f8bd 	bl	800c434 <USBH_Get_USB_Status>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd90      	pop	{r4, r7, pc}

0800c2c8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2e2:	78fa      	ldrb	r2, [r7, #3]
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7f6 f87e 	bl	80023e8 <HAL_HCD_HC_Halt>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 f89e 	bl	800c434 <USBH_Get_USB_Status>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c306:	b590      	push	{r4, r7, lr}
 800c308:	b089      	sub	sp, #36	; 0x24
 800c30a:	af04      	add	r7, sp, #16
 800c30c:	6078      	str	r0, [r7, #4]
 800c30e:	4608      	mov	r0, r1
 800c310:	4611      	mov	r1, r2
 800c312:	461a      	mov	r2, r3
 800c314:	4603      	mov	r3, r0
 800c316:	70fb      	strb	r3, [r7, #3]
 800c318:	460b      	mov	r3, r1
 800c31a:	70bb      	strb	r3, [r7, #2]
 800c31c:	4613      	mov	r3, r2
 800c31e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c32e:	787c      	ldrb	r4, [r7, #1]
 800c330:	78ba      	ldrb	r2, [r7, #2]
 800c332:	78f9      	ldrb	r1, [r7, #3]
 800c334:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c338:	9303      	str	r3, [sp, #12]
 800c33a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c33c:	9302      	str	r3, [sp, #8]
 800c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c340:	9301      	str	r3, [sp, #4]
 800c342:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	4623      	mov	r3, r4
 800c34a:	f7f6 f871 	bl	8002430 <HAL_HCD_HC_SubmitRequest>
 800c34e:	4603      	mov	r3, r0
 800c350:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c352:	7bfb      	ldrb	r3, [r7, #15]
 800c354:	4618      	mov	r0, r3
 800c356:	f000 f86d 	bl	800c434 <USBH_Get_USB_Status>
 800c35a:	4603      	mov	r3, r0
 800c35c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	bd90      	pop	{r4, r7, pc}

0800c368 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	460b      	mov	r3, r1
 800c372:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c37a:	78fa      	ldrb	r2, [r7, #3]
 800c37c:	4611      	mov	r1, r2
 800c37e:	4618      	mov	r0, r3
 800c380:	f7f6 fb05 	bl	800298e <HAL_HCD_HC_GetURBState>
 800c384:	4603      	mov	r3, r0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3708      	adds	r7, #8
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b082      	sub	sp, #8
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	460b      	mov	r3, r1
 800c398:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d103      	bne.n	800c3ac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800c3a4:	78fb      	ldrb	r3, [r7, #3]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 f870 	bl	800c48c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c3ac:	20c8      	movs	r0, #200	; 0xc8
 800c3ae:	f7f5 fa57 	bl	8001860 <HAL_Delay>
  return USBH_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	70fb      	strb	r3, [r7, #3]
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3d2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c3d4:	78fb      	ldrb	r3, [r7, #3]
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	212c      	movs	r1, #44	; 0x2c
 800c3da:	fb01 f303 	mul.w	r3, r1, r3
 800c3de:	4413      	add	r3, r2
 800c3e0:	333b      	adds	r3, #59	; 0x3b
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d009      	beq.n	800c3fc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c3e8:	78fb      	ldrb	r3, [r7, #3]
 800c3ea:	68fa      	ldr	r2, [r7, #12]
 800c3ec:	212c      	movs	r1, #44	; 0x2c
 800c3ee:	fb01 f303 	mul.w	r3, r1, r3
 800c3f2:	4413      	add	r3, r2
 800c3f4:	3354      	adds	r3, #84	; 0x54
 800c3f6:	78ba      	ldrb	r2, [r7, #2]
 800c3f8:	701a      	strb	r2, [r3, #0]
 800c3fa:	e008      	b.n	800c40e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c3fc:	78fb      	ldrb	r3, [r7, #3]
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	212c      	movs	r1, #44	; 0x2c
 800c402:	fb01 f303 	mul.w	r3, r1, r3
 800c406:	4413      	add	r3, r2
 800c408:	3355      	adds	r3, #85	; 0x55
 800c40a:	78ba      	ldrb	r2, [r7, #2]
 800c40c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7f5 fa1b 	bl	8001860 <HAL_Delay>
}
 800c42a:	bf00      	nop
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
	...

0800c434 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c434:	b480      	push	{r7}
 800c436:	b085      	sub	sp, #20
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c43e:	2300      	movs	r3, #0
 800c440:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c442:	79fb      	ldrb	r3, [r7, #7]
 800c444:	2b03      	cmp	r3, #3
 800c446:	d817      	bhi.n	800c478 <USBH_Get_USB_Status+0x44>
 800c448:	a201      	add	r2, pc, #4	; (adr r2, 800c450 <USBH_Get_USB_Status+0x1c>)
 800c44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c44e:	bf00      	nop
 800c450:	0800c461 	.word	0x0800c461
 800c454:	0800c467 	.word	0x0800c467
 800c458:	0800c46d 	.word	0x0800c46d
 800c45c:	0800c473 	.word	0x0800c473
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	73fb      	strb	r3, [r7, #15]
    break;
 800c464:	e00b      	b.n	800c47e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c466:	2302      	movs	r3, #2
 800c468:	73fb      	strb	r3, [r7, #15]
    break;
 800c46a:	e008      	b.n	800c47e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c46c:	2301      	movs	r3, #1
 800c46e:	73fb      	strb	r3, [r7, #15]
    break;
 800c470:	e005      	b.n	800c47e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c472:	2302      	movs	r3, #2
 800c474:	73fb      	strb	r3, [r7, #15]
    break;
 800c476:	e002      	b.n	800c47e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c478:	2302      	movs	r3, #2
 800c47a:	73fb      	strb	r3, [r7, #15]
    break;
 800c47c:	bf00      	nop
  }
  return usb_status;
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c480:	4618      	mov	r0, r3
 800c482:	3714      	adds	r7, #20
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	4603      	mov	r3, r0
 800c494:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c496:	79fb      	ldrb	r3, [r7, #7]
 800c498:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800c49a:	79fb      	ldrb	r3, [r7, #7]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	73fb      	strb	r3, [r7, #15]
 800c4a4:	e001      	b.n	800c4aa <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800c4aa:	7bfb      	ldrb	r3, [r7, #15]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	2110      	movs	r1, #16
 800c4b0:	4803      	ldr	r0, [pc, #12]	; (800c4c0 <MX_DriverVbusHS+0x34>)
 800c4b2:	f7f5 fe8f 	bl	80021d4 <HAL_GPIO_WritePin>
}
 800c4b6:	bf00      	nop
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	40020800 	.word	0x40020800

0800c4c4 <__errno>:
 800c4c4:	4b01      	ldr	r3, [pc, #4]	; (800c4cc <__errno+0x8>)
 800c4c6:	6818      	ldr	r0, [r3, #0]
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	20000030 	.word	0x20000030

0800c4d0 <__libc_init_array>:
 800c4d0:	b570      	push	{r4, r5, r6, lr}
 800c4d2:	4d0d      	ldr	r5, [pc, #52]	; (800c508 <__libc_init_array+0x38>)
 800c4d4:	4c0d      	ldr	r4, [pc, #52]	; (800c50c <__libc_init_array+0x3c>)
 800c4d6:	1b64      	subs	r4, r4, r5
 800c4d8:	10a4      	asrs	r4, r4, #2
 800c4da:	2600      	movs	r6, #0
 800c4dc:	42a6      	cmp	r6, r4
 800c4de:	d109      	bne.n	800c4f4 <__libc_init_array+0x24>
 800c4e0:	4d0b      	ldr	r5, [pc, #44]	; (800c510 <__libc_init_array+0x40>)
 800c4e2:	4c0c      	ldr	r4, [pc, #48]	; (800c514 <__libc_init_array+0x44>)
 800c4e4:	f000 ffcc 	bl	800d480 <_init>
 800c4e8:	1b64      	subs	r4, r4, r5
 800c4ea:	10a4      	asrs	r4, r4, #2
 800c4ec:	2600      	movs	r6, #0
 800c4ee:	42a6      	cmp	r6, r4
 800c4f0:	d105      	bne.n	800c4fe <__libc_init_array+0x2e>
 800c4f2:	bd70      	pop	{r4, r5, r6, pc}
 800c4f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f8:	4798      	blx	r3
 800c4fa:	3601      	adds	r6, #1
 800c4fc:	e7ee      	b.n	800c4dc <__libc_init_array+0xc>
 800c4fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800c502:	4798      	blx	r3
 800c504:	3601      	adds	r6, #1
 800c506:	e7f2      	b.n	800c4ee <__libc_init_array+0x1e>
 800c508:	0800d5d4 	.word	0x0800d5d4
 800c50c:	0800d5d4 	.word	0x0800d5d4
 800c510:	0800d5d4 	.word	0x0800d5d4
 800c514:	0800d5d8 	.word	0x0800d5d8

0800c518 <malloc>:
 800c518:	4b02      	ldr	r3, [pc, #8]	; (800c524 <malloc+0xc>)
 800c51a:	4601      	mov	r1, r0
 800c51c:	6818      	ldr	r0, [r3, #0]
 800c51e:	f000 b88d 	b.w	800c63c <_malloc_r>
 800c522:	bf00      	nop
 800c524:	20000030 	.word	0x20000030

0800c528 <free>:
 800c528:	4b02      	ldr	r3, [pc, #8]	; (800c534 <free+0xc>)
 800c52a:	4601      	mov	r1, r0
 800c52c:	6818      	ldr	r0, [r3, #0]
 800c52e:	f000 b819 	b.w	800c564 <_free_r>
 800c532:	bf00      	nop
 800c534:	20000030 	.word	0x20000030

0800c538 <memcpy>:
 800c538:	440a      	add	r2, r1
 800c53a:	4291      	cmp	r1, r2
 800c53c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c540:	d100      	bne.n	800c544 <memcpy+0xc>
 800c542:	4770      	bx	lr
 800c544:	b510      	push	{r4, lr}
 800c546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c54a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c54e:	4291      	cmp	r1, r2
 800c550:	d1f9      	bne.n	800c546 <memcpy+0xe>
 800c552:	bd10      	pop	{r4, pc}

0800c554 <memset>:
 800c554:	4402      	add	r2, r0
 800c556:	4603      	mov	r3, r0
 800c558:	4293      	cmp	r3, r2
 800c55a:	d100      	bne.n	800c55e <memset+0xa>
 800c55c:	4770      	bx	lr
 800c55e:	f803 1b01 	strb.w	r1, [r3], #1
 800c562:	e7f9      	b.n	800c558 <memset+0x4>

0800c564 <_free_r>:
 800c564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c566:	2900      	cmp	r1, #0
 800c568:	d044      	beq.n	800c5f4 <_free_r+0x90>
 800c56a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c56e:	9001      	str	r0, [sp, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	f1a1 0404 	sub.w	r4, r1, #4
 800c576:	bfb8      	it	lt
 800c578:	18e4      	addlt	r4, r4, r3
 800c57a:	f000 f9f3 	bl	800c964 <__malloc_lock>
 800c57e:	4a1e      	ldr	r2, [pc, #120]	; (800c5f8 <_free_r+0x94>)
 800c580:	9801      	ldr	r0, [sp, #4]
 800c582:	6813      	ldr	r3, [r2, #0]
 800c584:	b933      	cbnz	r3, 800c594 <_free_r+0x30>
 800c586:	6063      	str	r3, [r4, #4]
 800c588:	6014      	str	r4, [r2, #0]
 800c58a:	b003      	add	sp, #12
 800c58c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c590:	f000 b9ee 	b.w	800c970 <__malloc_unlock>
 800c594:	42a3      	cmp	r3, r4
 800c596:	d908      	bls.n	800c5aa <_free_r+0x46>
 800c598:	6825      	ldr	r5, [r4, #0]
 800c59a:	1961      	adds	r1, r4, r5
 800c59c:	428b      	cmp	r3, r1
 800c59e:	bf01      	itttt	eq
 800c5a0:	6819      	ldreq	r1, [r3, #0]
 800c5a2:	685b      	ldreq	r3, [r3, #4]
 800c5a4:	1949      	addeq	r1, r1, r5
 800c5a6:	6021      	streq	r1, [r4, #0]
 800c5a8:	e7ed      	b.n	800c586 <_free_r+0x22>
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	b10b      	cbz	r3, 800c5b4 <_free_r+0x50>
 800c5b0:	42a3      	cmp	r3, r4
 800c5b2:	d9fa      	bls.n	800c5aa <_free_r+0x46>
 800c5b4:	6811      	ldr	r1, [r2, #0]
 800c5b6:	1855      	adds	r5, r2, r1
 800c5b8:	42a5      	cmp	r5, r4
 800c5ba:	d10b      	bne.n	800c5d4 <_free_r+0x70>
 800c5bc:	6824      	ldr	r4, [r4, #0]
 800c5be:	4421      	add	r1, r4
 800c5c0:	1854      	adds	r4, r2, r1
 800c5c2:	42a3      	cmp	r3, r4
 800c5c4:	6011      	str	r1, [r2, #0]
 800c5c6:	d1e0      	bne.n	800c58a <_free_r+0x26>
 800c5c8:	681c      	ldr	r4, [r3, #0]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	6053      	str	r3, [r2, #4]
 800c5ce:	4421      	add	r1, r4
 800c5d0:	6011      	str	r1, [r2, #0]
 800c5d2:	e7da      	b.n	800c58a <_free_r+0x26>
 800c5d4:	d902      	bls.n	800c5dc <_free_r+0x78>
 800c5d6:	230c      	movs	r3, #12
 800c5d8:	6003      	str	r3, [r0, #0]
 800c5da:	e7d6      	b.n	800c58a <_free_r+0x26>
 800c5dc:	6825      	ldr	r5, [r4, #0]
 800c5de:	1961      	adds	r1, r4, r5
 800c5e0:	428b      	cmp	r3, r1
 800c5e2:	bf04      	itt	eq
 800c5e4:	6819      	ldreq	r1, [r3, #0]
 800c5e6:	685b      	ldreq	r3, [r3, #4]
 800c5e8:	6063      	str	r3, [r4, #4]
 800c5ea:	bf04      	itt	eq
 800c5ec:	1949      	addeq	r1, r1, r5
 800c5ee:	6021      	streq	r1, [r4, #0]
 800c5f0:	6054      	str	r4, [r2, #4]
 800c5f2:	e7ca      	b.n	800c58a <_free_r+0x26>
 800c5f4:	b003      	add	sp, #12
 800c5f6:	bd30      	pop	{r4, r5, pc}
 800c5f8:	20008df8 	.word	0x20008df8

0800c5fc <sbrk_aligned>:
 800c5fc:	b570      	push	{r4, r5, r6, lr}
 800c5fe:	4e0e      	ldr	r6, [pc, #56]	; (800c638 <sbrk_aligned+0x3c>)
 800c600:	460c      	mov	r4, r1
 800c602:	6831      	ldr	r1, [r6, #0]
 800c604:	4605      	mov	r5, r0
 800c606:	b911      	cbnz	r1, 800c60e <sbrk_aligned+0x12>
 800c608:	f000 f88c 	bl	800c724 <_sbrk_r>
 800c60c:	6030      	str	r0, [r6, #0]
 800c60e:	4621      	mov	r1, r4
 800c610:	4628      	mov	r0, r5
 800c612:	f000 f887 	bl	800c724 <_sbrk_r>
 800c616:	1c43      	adds	r3, r0, #1
 800c618:	d00a      	beq.n	800c630 <sbrk_aligned+0x34>
 800c61a:	1cc4      	adds	r4, r0, #3
 800c61c:	f024 0403 	bic.w	r4, r4, #3
 800c620:	42a0      	cmp	r0, r4
 800c622:	d007      	beq.n	800c634 <sbrk_aligned+0x38>
 800c624:	1a21      	subs	r1, r4, r0
 800c626:	4628      	mov	r0, r5
 800c628:	f000 f87c 	bl	800c724 <_sbrk_r>
 800c62c:	3001      	adds	r0, #1
 800c62e:	d101      	bne.n	800c634 <sbrk_aligned+0x38>
 800c630:	f04f 34ff 	mov.w	r4, #4294967295
 800c634:	4620      	mov	r0, r4
 800c636:	bd70      	pop	{r4, r5, r6, pc}
 800c638:	20008dfc 	.word	0x20008dfc

0800c63c <_malloc_r>:
 800c63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c640:	1ccd      	adds	r5, r1, #3
 800c642:	f025 0503 	bic.w	r5, r5, #3
 800c646:	3508      	adds	r5, #8
 800c648:	2d0c      	cmp	r5, #12
 800c64a:	bf38      	it	cc
 800c64c:	250c      	movcc	r5, #12
 800c64e:	2d00      	cmp	r5, #0
 800c650:	4607      	mov	r7, r0
 800c652:	db01      	blt.n	800c658 <_malloc_r+0x1c>
 800c654:	42a9      	cmp	r1, r5
 800c656:	d905      	bls.n	800c664 <_malloc_r+0x28>
 800c658:	230c      	movs	r3, #12
 800c65a:	603b      	str	r3, [r7, #0]
 800c65c:	2600      	movs	r6, #0
 800c65e:	4630      	mov	r0, r6
 800c660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c664:	4e2e      	ldr	r6, [pc, #184]	; (800c720 <_malloc_r+0xe4>)
 800c666:	f000 f97d 	bl	800c964 <__malloc_lock>
 800c66a:	6833      	ldr	r3, [r6, #0]
 800c66c:	461c      	mov	r4, r3
 800c66e:	bb34      	cbnz	r4, 800c6be <_malloc_r+0x82>
 800c670:	4629      	mov	r1, r5
 800c672:	4638      	mov	r0, r7
 800c674:	f7ff ffc2 	bl	800c5fc <sbrk_aligned>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	4604      	mov	r4, r0
 800c67c:	d14d      	bne.n	800c71a <_malloc_r+0xde>
 800c67e:	6834      	ldr	r4, [r6, #0]
 800c680:	4626      	mov	r6, r4
 800c682:	2e00      	cmp	r6, #0
 800c684:	d140      	bne.n	800c708 <_malloc_r+0xcc>
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	4631      	mov	r1, r6
 800c68a:	4638      	mov	r0, r7
 800c68c:	eb04 0803 	add.w	r8, r4, r3
 800c690:	f000 f848 	bl	800c724 <_sbrk_r>
 800c694:	4580      	cmp	r8, r0
 800c696:	d13a      	bne.n	800c70e <_malloc_r+0xd2>
 800c698:	6821      	ldr	r1, [r4, #0]
 800c69a:	3503      	adds	r5, #3
 800c69c:	1a6d      	subs	r5, r5, r1
 800c69e:	f025 0503 	bic.w	r5, r5, #3
 800c6a2:	3508      	adds	r5, #8
 800c6a4:	2d0c      	cmp	r5, #12
 800c6a6:	bf38      	it	cc
 800c6a8:	250c      	movcc	r5, #12
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	4638      	mov	r0, r7
 800c6ae:	f7ff ffa5 	bl	800c5fc <sbrk_aligned>
 800c6b2:	3001      	adds	r0, #1
 800c6b4:	d02b      	beq.n	800c70e <_malloc_r+0xd2>
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	442b      	add	r3, r5
 800c6ba:	6023      	str	r3, [r4, #0]
 800c6bc:	e00e      	b.n	800c6dc <_malloc_r+0xa0>
 800c6be:	6822      	ldr	r2, [r4, #0]
 800c6c0:	1b52      	subs	r2, r2, r5
 800c6c2:	d41e      	bmi.n	800c702 <_malloc_r+0xc6>
 800c6c4:	2a0b      	cmp	r2, #11
 800c6c6:	d916      	bls.n	800c6f6 <_malloc_r+0xba>
 800c6c8:	1961      	adds	r1, r4, r5
 800c6ca:	42a3      	cmp	r3, r4
 800c6cc:	6025      	str	r5, [r4, #0]
 800c6ce:	bf18      	it	ne
 800c6d0:	6059      	strne	r1, [r3, #4]
 800c6d2:	6863      	ldr	r3, [r4, #4]
 800c6d4:	bf08      	it	eq
 800c6d6:	6031      	streq	r1, [r6, #0]
 800c6d8:	5162      	str	r2, [r4, r5]
 800c6da:	604b      	str	r3, [r1, #4]
 800c6dc:	4638      	mov	r0, r7
 800c6de:	f104 060b 	add.w	r6, r4, #11
 800c6e2:	f000 f945 	bl	800c970 <__malloc_unlock>
 800c6e6:	f026 0607 	bic.w	r6, r6, #7
 800c6ea:	1d23      	adds	r3, r4, #4
 800c6ec:	1af2      	subs	r2, r6, r3
 800c6ee:	d0b6      	beq.n	800c65e <_malloc_r+0x22>
 800c6f0:	1b9b      	subs	r3, r3, r6
 800c6f2:	50a3      	str	r3, [r4, r2]
 800c6f4:	e7b3      	b.n	800c65e <_malloc_r+0x22>
 800c6f6:	6862      	ldr	r2, [r4, #4]
 800c6f8:	42a3      	cmp	r3, r4
 800c6fa:	bf0c      	ite	eq
 800c6fc:	6032      	streq	r2, [r6, #0]
 800c6fe:	605a      	strne	r2, [r3, #4]
 800c700:	e7ec      	b.n	800c6dc <_malloc_r+0xa0>
 800c702:	4623      	mov	r3, r4
 800c704:	6864      	ldr	r4, [r4, #4]
 800c706:	e7b2      	b.n	800c66e <_malloc_r+0x32>
 800c708:	4634      	mov	r4, r6
 800c70a:	6876      	ldr	r6, [r6, #4]
 800c70c:	e7b9      	b.n	800c682 <_malloc_r+0x46>
 800c70e:	230c      	movs	r3, #12
 800c710:	603b      	str	r3, [r7, #0]
 800c712:	4638      	mov	r0, r7
 800c714:	f000 f92c 	bl	800c970 <__malloc_unlock>
 800c718:	e7a1      	b.n	800c65e <_malloc_r+0x22>
 800c71a:	6025      	str	r5, [r4, #0]
 800c71c:	e7de      	b.n	800c6dc <_malloc_r+0xa0>
 800c71e:	bf00      	nop
 800c720:	20008df8 	.word	0x20008df8

0800c724 <_sbrk_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4d06      	ldr	r5, [pc, #24]	; (800c740 <_sbrk_r+0x1c>)
 800c728:	2300      	movs	r3, #0
 800c72a:	4604      	mov	r4, r0
 800c72c:	4608      	mov	r0, r1
 800c72e:	602b      	str	r3, [r5, #0]
 800c730:	f7f4 ffe2 	bl	80016f8 <_sbrk>
 800c734:	1c43      	adds	r3, r0, #1
 800c736:	d102      	bne.n	800c73e <_sbrk_r+0x1a>
 800c738:	682b      	ldr	r3, [r5, #0]
 800c73a:	b103      	cbz	r3, 800c73e <_sbrk_r+0x1a>
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	bd38      	pop	{r3, r4, r5, pc}
 800c740:	20008e04 	.word	0x20008e04

0800c744 <viprintf>:
 800c744:	b513      	push	{r0, r1, r4, lr}
 800c746:	460b      	mov	r3, r1
 800c748:	4909      	ldr	r1, [pc, #36]	; (800c770 <viprintf+0x2c>)
 800c74a:	680c      	ldr	r4, [r1, #0]
 800c74c:	4602      	mov	r2, r0
 800c74e:	b144      	cbz	r4, 800c762 <viprintf+0x1e>
 800c750:	69a1      	ldr	r1, [r4, #24]
 800c752:	b931      	cbnz	r1, 800c762 <viprintf+0x1e>
 800c754:	e9cd 0300 	strd	r0, r3, [sp]
 800c758:	4620      	mov	r0, r4
 800c75a:	f000 f863 	bl	800c824 <__sinit>
 800c75e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c762:	68a1      	ldr	r1, [r4, #8]
 800c764:	4620      	mov	r0, r4
 800c766:	b002      	add	sp, #8
 800c768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c76c:	f000 b930 	b.w	800c9d0 <_vfiprintf_r>
 800c770:	20000030 	.word	0x20000030

0800c774 <std>:
 800c774:	2300      	movs	r3, #0
 800c776:	b510      	push	{r4, lr}
 800c778:	4604      	mov	r4, r0
 800c77a:	e9c0 3300 	strd	r3, r3, [r0]
 800c77e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c782:	6083      	str	r3, [r0, #8]
 800c784:	8181      	strh	r1, [r0, #12]
 800c786:	6643      	str	r3, [r0, #100]	; 0x64
 800c788:	81c2      	strh	r2, [r0, #14]
 800c78a:	6183      	str	r3, [r0, #24]
 800c78c:	4619      	mov	r1, r3
 800c78e:	2208      	movs	r2, #8
 800c790:	305c      	adds	r0, #92	; 0x5c
 800c792:	f7ff fedf 	bl	800c554 <memset>
 800c796:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <std+0x38>)
 800c798:	6263      	str	r3, [r4, #36]	; 0x24
 800c79a:	4b05      	ldr	r3, [pc, #20]	; (800c7b0 <std+0x3c>)
 800c79c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c79e:	4b05      	ldr	r3, [pc, #20]	; (800c7b4 <std+0x40>)
 800c7a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7a2:	4b05      	ldr	r3, [pc, #20]	; (800c7b8 <std+0x44>)
 800c7a4:	6224      	str	r4, [r4, #32]
 800c7a6:	6323      	str	r3, [r4, #48]	; 0x30
 800c7a8:	bd10      	pop	{r4, pc}
 800c7aa:	bf00      	nop
 800c7ac:	0800cf59 	.word	0x0800cf59
 800c7b0:	0800cf7b 	.word	0x0800cf7b
 800c7b4:	0800cfb3 	.word	0x0800cfb3
 800c7b8:	0800cfd7 	.word	0x0800cfd7

0800c7bc <_cleanup_r>:
 800c7bc:	4901      	ldr	r1, [pc, #4]	; (800c7c4 <_cleanup_r+0x8>)
 800c7be:	f000 b8af 	b.w	800c920 <_fwalk_reent>
 800c7c2:	bf00      	nop
 800c7c4:	0800d2b1 	.word	0x0800d2b1

0800c7c8 <__sfmoreglue>:
 800c7c8:	b570      	push	{r4, r5, r6, lr}
 800c7ca:	2268      	movs	r2, #104	; 0x68
 800c7cc:	1e4d      	subs	r5, r1, #1
 800c7ce:	4355      	muls	r5, r2
 800c7d0:	460e      	mov	r6, r1
 800c7d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7d6:	f7ff ff31 	bl	800c63c <_malloc_r>
 800c7da:	4604      	mov	r4, r0
 800c7dc:	b140      	cbz	r0, 800c7f0 <__sfmoreglue+0x28>
 800c7de:	2100      	movs	r1, #0
 800c7e0:	e9c0 1600 	strd	r1, r6, [r0]
 800c7e4:	300c      	adds	r0, #12
 800c7e6:	60a0      	str	r0, [r4, #8]
 800c7e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c7ec:	f7ff feb2 	bl	800c554 <memset>
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	bd70      	pop	{r4, r5, r6, pc}

0800c7f4 <__sfp_lock_acquire>:
 800c7f4:	4801      	ldr	r0, [pc, #4]	; (800c7fc <__sfp_lock_acquire+0x8>)
 800c7f6:	f000 b8b3 	b.w	800c960 <__retarget_lock_acquire_recursive>
 800c7fa:	bf00      	nop
 800c7fc:	20008e01 	.word	0x20008e01

0800c800 <__sfp_lock_release>:
 800c800:	4801      	ldr	r0, [pc, #4]	; (800c808 <__sfp_lock_release+0x8>)
 800c802:	f000 b8ae 	b.w	800c962 <__retarget_lock_release_recursive>
 800c806:	bf00      	nop
 800c808:	20008e01 	.word	0x20008e01

0800c80c <__sinit_lock_acquire>:
 800c80c:	4801      	ldr	r0, [pc, #4]	; (800c814 <__sinit_lock_acquire+0x8>)
 800c80e:	f000 b8a7 	b.w	800c960 <__retarget_lock_acquire_recursive>
 800c812:	bf00      	nop
 800c814:	20008e02 	.word	0x20008e02

0800c818 <__sinit_lock_release>:
 800c818:	4801      	ldr	r0, [pc, #4]	; (800c820 <__sinit_lock_release+0x8>)
 800c81a:	f000 b8a2 	b.w	800c962 <__retarget_lock_release_recursive>
 800c81e:	bf00      	nop
 800c820:	20008e02 	.word	0x20008e02

0800c824 <__sinit>:
 800c824:	b510      	push	{r4, lr}
 800c826:	4604      	mov	r4, r0
 800c828:	f7ff fff0 	bl	800c80c <__sinit_lock_acquire>
 800c82c:	69a3      	ldr	r3, [r4, #24]
 800c82e:	b11b      	cbz	r3, 800c838 <__sinit+0x14>
 800c830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c834:	f7ff bff0 	b.w	800c818 <__sinit_lock_release>
 800c838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c83c:	6523      	str	r3, [r4, #80]	; 0x50
 800c83e:	4b13      	ldr	r3, [pc, #76]	; (800c88c <__sinit+0x68>)
 800c840:	4a13      	ldr	r2, [pc, #76]	; (800c890 <__sinit+0x6c>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	62a2      	str	r2, [r4, #40]	; 0x28
 800c846:	42a3      	cmp	r3, r4
 800c848:	bf04      	itt	eq
 800c84a:	2301      	moveq	r3, #1
 800c84c:	61a3      	streq	r3, [r4, #24]
 800c84e:	4620      	mov	r0, r4
 800c850:	f000 f820 	bl	800c894 <__sfp>
 800c854:	6060      	str	r0, [r4, #4]
 800c856:	4620      	mov	r0, r4
 800c858:	f000 f81c 	bl	800c894 <__sfp>
 800c85c:	60a0      	str	r0, [r4, #8]
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 f818 	bl	800c894 <__sfp>
 800c864:	2200      	movs	r2, #0
 800c866:	60e0      	str	r0, [r4, #12]
 800c868:	2104      	movs	r1, #4
 800c86a:	6860      	ldr	r0, [r4, #4]
 800c86c:	f7ff ff82 	bl	800c774 <std>
 800c870:	68a0      	ldr	r0, [r4, #8]
 800c872:	2201      	movs	r2, #1
 800c874:	2109      	movs	r1, #9
 800c876:	f7ff ff7d 	bl	800c774 <std>
 800c87a:	68e0      	ldr	r0, [r4, #12]
 800c87c:	2202      	movs	r2, #2
 800c87e:	2112      	movs	r1, #18
 800c880:	f7ff ff78 	bl	800c774 <std>
 800c884:	2301      	movs	r3, #1
 800c886:	61a3      	str	r3, [r4, #24]
 800c888:	e7d2      	b.n	800c830 <__sinit+0xc>
 800c88a:	bf00      	nop
 800c88c:	0800d534 	.word	0x0800d534
 800c890:	0800c7bd 	.word	0x0800c7bd

0800c894 <__sfp>:
 800c894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c896:	4607      	mov	r7, r0
 800c898:	f7ff ffac 	bl	800c7f4 <__sfp_lock_acquire>
 800c89c:	4b1e      	ldr	r3, [pc, #120]	; (800c918 <__sfp+0x84>)
 800c89e:	681e      	ldr	r6, [r3, #0]
 800c8a0:	69b3      	ldr	r3, [r6, #24]
 800c8a2:	b913      	cbnz	r3, 800c8aa <__sfp+0x16>
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	f7ff ffbd 	bl	800c824 <__sinit>
 800c8aa:	3648      	adds	r6, #72	; 0x48
 800c8ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	d503      	bpl.n	800c8bc <__sfp+0x28>
 800c8b4:	6833      	ldr	r3, [r6, #0]
 800c8b6:	b30b      	cbz	r3, 800c8fc <__sfp+0x68>
 800c8b8:	6836      	ldr	r6, [r6, #0]
 800c8ba:	e7f7      	b.n	800c8ac <__sfp+0x18>
 800c8bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c8c0:	b9d5      	cbnz	r5, 800c8f8 <__sfp+0x64>
 800c8c2:	4b16      	ldr	r3, [pc, #88]	; (800c91c <__sfp+0x88>)
 800c8c4:	60e3      	str	r3, [r4, #12]
 800c8c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8ca:	6665      	str	r5, [r4, #100]	; 0x64
 800c8cc:	f000 f847 	bl	800c95e <__retarget_lock_init_recursive>
 800c8d0:	f7ff ff96 	bl	800c800 <__sfp_lock_release>
 800c8d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c8d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c8dc:	6025      	str	r5, [r4, #0]
 800c8de:	61a5      	str	r5, [r4, #24]
 800c8e0:	2208      	movs	r2, #8
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8e8:	f7ff fe34 	bl	800c554 <memset>
 800c8ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8f8:	3468      	adds	r4, #104	; 0x68
 800c8fa:	e7d9      	b.n	800c8b0 <__sfp+0x1c>
 800c8fc:	2104      	movs	r1, #4
 800c8fe:	4638      	mov	r0, r7
 800c900:	f7ff ff62 	bl	800c7c8 <__sfmoreglue>
 800c904:	4604      	mov	r4, r0
 800c906:	6030      	str	r0, [r6, #0]
 800c908:	2800      	cmp	r0, #0
 800c90a:	d1d5      	bne.n	800c8b8 <__sfp+0x24>
 800c90c:	f7ff ff78 	bl	800c800 <__sfp_lock_release>
 800c910:	230c      	movs	r3, #12
 800c912:	603b      	str	r3, [r7, #0]
 800c914:	e7ee      	b.n	800c8f4 <__sfp+0x60>
 800c916:	bf00      	nop
 800c918:	0800d534 	.word	0x0800d534
 800c91c:	ffff0001 	.word	0xffff0001

0800c920 <_fwalk_reent>:
 800c920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c924:	4606      	mov	r6, r0
 800c926:	4688      	mov	r8, r1
 800c928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c92c:	2700      	movs	r7, #0
 800c92e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c932:	f1b9 0901 	subs.w	r9, r9, #1
 800c936:	d505      	bpl.n	800c944 <_fwalk_reent+0x24>
 800c938:	6824      	ldr	r4, [r4, #0]
 800c93a:	2c00      	cmp	r4, #0
 800c93c:	d1f7      	bne.n	800c92e <_fwalk_reent+0xe>
 800c93e:	4638      	mov	r0, r7
 800c940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c944:	89ab      	ldrh	r3, [r5, #12]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d907      	bls.n	800c95a <_fwalk_reent+0x3a>
 800c94a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c94e:	3301      	adds	r3, #1
 800c950:	d003      	beq.n	800c95a <_fwalk_reent+0x3a>
 800c952:	4629      	mov	r1, r5
 800c954:	4630      	mov	r0, r6
 800c956:	47c0      	blx	r8
 800c958:	4307      	orrs	r7, r0
 800c95a:	3568      	adds	r5, #104	; 0x68
 800c95c:	e7e9      	b.n	800c932 <_fwalk_reent+0x12>

0800c95e <__retarget_lock_init_recursive>:
 800c95e:	4770      	bx	lr

0800c960 <__retarget_lock_acquire_recursive>:
 800c960:	4770      	bx	lr

0800c962 <__retarget_lock_release_recursive>:
 800c962:	4770      	bx	lr

0800c964 <__malloc_lock>:
 800c964:	4801      	ldr	r0, [pc, #4]	; (800c96c <__malloc_lock+0x8>)
 800c966:	f7ff bffb 	b.w	800c960 <__retarget_lock_acquire_recursive>
 800c96a:	bf00      	nop
 800c96c:	20008e00 	.word	0x20008e00

0800c970 <__malloc_unlock>:
 800c970:	4801      	ldr	r0, [pc, #4]	; (800c978 <__malloc_unlock+0x8>)
 800c972:	f7ff bff6 	b.w	800c962 <__retarget_lock_release_recursive>
 800c976:	bf00      	nop
 800c978:	20008e00 	.word	0x20008e00

0800c97c <__sfputc_r>:
 800c97c:	6893      	ldr	r3, [r2, #8]
 800c97e:	3b01      	subs	r3, #1
 800c980:	2b00      	cmp	r3, #0
 800c982:	b410      	push	{r4}
 800c984:	6093      	str	r3, [r2, #8]
 800c986:	da08      	bge.n	800c99a <__sfputc_r+0x1e>
 800c988:	6994      	ldr	r4, [r2, #24]
 800c98a:	42a3      	cmp	r3, r4
 800c98c:	db01      	blt.n	800c992 <__sfputc_r+0x16>
 800c98e:	290a      	cmp	r1, #10
 800c990:	d103      	bne.n	800c99a <__sfputc_r+0x1e>
 800c992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c996:	f000 bb23 	b.w	800cfe0 <__swbuf_r>
 800c99a:	6813      	ldr	r3, [r2, #0]
 800c99c:	1c58      	adds	r0, r3, #1
 800c99e:	6010      	str	r0, [r2, #0]
 800c9a0:	7019      	strb	r1, [r3, #0]
 800c9a2:	4608      	mov	r0, r1
 800c9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <__sfputs_r>:
 800c9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	460f      	mov	r7, r1
 800c9b0:	4614      	mov	r4, r2
 800c9b2:	18d5      	adds	r5, r2, r3
 800c9b4:	42ac      	cmp	r4, r5
 800c9b6:	d101      	bne.n	800c9bc <__sfputs_r+0x12>
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	e007      	b.n	800c9cc <__sfputs_r+0x22>
 800c9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9c0:	463a      	mov	r2, r7
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	f7ff ffda 	bl	800c97c <__sfputc_r>
 800c9c8:	1c43      	adds	r3, r0, #1
 800c9ca:	d1f3      	bne.n	800c9b4 <__sfputs_r+0xa>
 800c9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9d0 <_vfiprintf_r>:
 800c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	460d      	mov	r5, r1
 800c9d6:	b09d      	sub	sp, #116	; 0x74
 800c9d8:	4614      	mov	r4, r2
 800c9da:	4698      	mov	r8, r3
 800c9dc:	4606      	mov	r6, r0
 800c9de:	b118      	cbz	r0, 800c9e8 <_vfiprintf_r+0x18>
 800c9e0:	6983      	ldr	r3, [r0, #24]
 800c9e2:	b90b      	cbnz	r3, 800c9e8 <_vfiprintf_r+0x18>
 800c9e4:	f7ff ff1e 	bl	800c824 <__sinit>
 800c9e8:	4b89      	ldr	r3, [pc, #548]	; (800cc10 <_vfiprintf_r+0x240>)
 800c9ea:	429d      	cmp	r5, r3
 800c9ec:	d11b      	bne.n	800ca26 <_vfiprintf_r+0x56>
 800c9ee:	6875      	ldr	r5, [r6, #4]
 800c9f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9f2:	07d9      	lsls	r1, r3, #31
 800c9f4:	d405      	bmi.n	800ca02 <_vfiprintf_r+0x32>
 800c9f6:	89ab      	ldrh	r3, [r5, #12]
 800c9f8:	059a      	lsls	r2, r3, #22
 800c9fa:	d402      	bmi.n	800ca02 <_vfiprintf_r+0x32>
 800c9fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9fe:	f7ff ffaf 	bl	800c960 <__retarget_lock_acquire_recursive>
 800ca02:	89ab      	ldrh	r3, [r5, #12]
 800ca04:	071b      	lsls	r3, r3, #28
 800ca06:	d501      	bpl.n	800ca0c <_vfiprintf_r+0x3c>
 800ca08:	692b      	ldr	r3, [r5, #16]
 800ca0a:	b9eb      	cbnz	r3, 800ca48 <_vfiprintf_r+0x78>
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f000 fb4a 	bl	800d0a8 <__swsetup_r>
 800ca14:	b1c0      	cbz	r0, 800ca48 <_vfiprintf_r+0x78>
 800ca16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca18:	07dc      	lsls	r4, r3, #31
 800ca1a:	d50e      	bpl.n	800ca3a <_vfiprintf_r+0x6a>
 800ca1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca20:	b01d      	add	sp, #116	; 0x74
 800ca22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca26:	4b7b      	ldr	r3, [pc, #492]	; (800cc14 <_vfiprintf_r+0x244>)
 800ca28:	429d      	cmp	r5, r3
 800ca2a:	d101      	bne.n	800ca30 <_vfiprintf_r+0x60>
 800ca2c:	68b5      	ldr	r5, [r6, #8]
 800ca2e:	e7df      	b.n	800c9f0 <_vfiprintf_r+0x20>
 800ca30:	4b79      	ldr	r3, [pc, #484]	; (800cc18 <_vfiprintf_r+0x248>)
 800ca32:	429d      	cmp	r5, r3
 800ca34:	bf08      	it	eq
 800ca36:	68f5      	ldreq	r5, [r6, #12]
 800ca38:	e7da      	b.n	800c9f0 <_vfiprintf_r+0x20>
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	0598      	lsls	r0, r3, #22
 800ca3e:	d4ed      	bmi.n	800ca1c <_vfiprintf_r+0x4c>
 800ca40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca42:	f7ff ff8e 	bl	800c962 <__retarget_lock_release_recursive>
 800ca46:	e7e9      	b.n	800ca1c <_vfiprintf_r+0x4c>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca4c:	2320      	movs	r3, #32
 800ca4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca52:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca56:	2330      	movs	r3, #48	; 0x30
 800ca58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc1c <_vfiprintf_r+0x24c>
 800ca5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca60:	f04f 0901 	mov.w	r9, #1
 800ca64:	4623      	mov	r3, r4
 800ca66:	469a      	mov	sl, r3
 800ca68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca6c:	b10a      	cbz	r2, 800ca72 <_vfiprintf_r+0xa2>
 800ca6e:	2a25      	cmp	r2, #37	; 0x25
 800ca70:	d1f9      	bne.n	800ca66 <_vfiprintf_r+0x96>
 800ca72:	ebba 0b04 	subs.w	fp, sl, r4
 800ca76:	d00b      	beq.n	800ca90 <_vfiprintf_r+0xc0>
 800ca78:	465b      	mov	r3, fp
 800ca7a:	4622      	mov	r2, r4
 800ca7c:	4629      	mov	r1, r5
 800ca7e:	4630      	mov	r0, r6
 800ca80:	f7ff ff93 	bl	800c9aa <__sfputs_r>
 800ca84:	3001      	adds	r0, #1
 800ca86:	f000 80aa 	beq.w	800cbde <_vfiprintf_r+0x20e>
 800ca8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca8c:	445a      	add	r2, fp
 800ca8e:	9209      	str	r2, [sp, #36]	; 0x24
 800ca90:	f89a 3000 	ldrb.w	r3, [sl]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f000 80a2 	beq.w	800cbde <_vfiprintf_r+0x20e>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	f04f 32ff 	mov.w	r2, #4294967295
 800caa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caa4:	f10a 0a01 	add.w	sl, sl, #1
 800caa8:	9304      	str	r3, [sp, #16]
 800caaa:	9307      	str	r3, [sp, #28]
 800caac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cab0:	931a      	str	r3, [sp, #104]	; 0x68
 800cab2:	4654      	mov	r4, sl
 800cab4:	2205      	movs	r2, #5
 800cab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caba:	4858      	ldr	r0, [pc, #352]	; (800cc1c <_vfiprintf_r+0x24c>)
 800cabc:	f7f3 fb98 	bl	80001f0 <memchr>
 800cac0:	9a04      	ldr	r2, [sp, #16]
 800cac2:	b9d8      	cbnz	r0, 800cafc <_vfiprintf_r+0x12c>
 800cac4:	06d1      	lsls	r1, r2, #27
 800cac6:	bf44      	itt	mi
 800cac8:	2320      	movmi	r3, #32
 800caca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cace:	0713      	lsls	r3, r2, #28
 800cad0:	bf44      	itt	mi
 800cad2:	232b      	movmi	r3, #43	; 0x2b
 800cad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cad8:	f89a 3000 	ldrb.w	r3, [sl]
 800cadc:	2b2a      	cmp	r3, #42	; 0x2a
 800cade:	d015      	beq.n	800cb0c <_vfiprintf_r+0x13c>
 800cae0:	9a07      	ldr	r2, [sp, #28]
 800cae2:	4654      	mov	r4, sl
 800cae4:	2000      	movs	r0, #0
 800cae6:	f04f 0c0a 	mov.w	ip, #10
 800caea:	4621      	mov	r1, r4
 800caec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caf0:	3b30      	subs	r3, #48	; 0x30
 800caf2:	2b09      	cmp	r3, #9
 800caf4:	d94e      	bls.n	800cb94 <_vfiprintf_r+0x1c4>
 800caf6:	b1b0      	cbz	r0, 800cb26 <_vfiprintf_r+0x156>
 800caf8:	9207      	str	r2, [sp, #28]
 800cafa:	e014      	b.n	800cb26 <_vfiprintf_r+0x156>
 800cafc:	eba0 0308 	sub.w	r3, r0, r8
 800cb00:	fa09 f303 	lsl.w	r3, r9, r3
 800cb04:	4313      	orrs	r3, r2
 800cb06:	9304      	str	r3, [sp, #16]
 800cb08:	46a2      	mov	sl, r4
 800cb0a:	e7d2      	b.n	800cab2 <_vfiprintf_r+0xe2>
 800cb0c:	9b03      	ldr	r3, [sp, #12]
 800cb0e:	1d19      	adds	r1, r3, #4
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	9103      	str	r1, [sp, #12]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	bfbb      	ittet	lt
 800cb18:	425b      	neglt	r3, r3
 800cb1a:	f042 0202 	orrlt.w	r2, r2, #2
 800cb1e:	9307      	strge	r3, [sp, #28]
 800cb20:	9307      	strlt	r3, [sp, #28]
 800cb22:	bfb8      	it	lt
 800cb24:	9204      	strlt	r2, [sp, #16]
 800cb26:	7823      	ldrb	r3, [r4, #0]
 800cb28:	2b2e      	cmp	r3, #46	; 0x2e
 800cb2a:	d10c      	bne.n	800cb46 <_vfiprintf_r+0x176>
 800cb2c:	7863      	ldrb	r3, [r4, #1]
 800cb2e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb30:	d135      	bne.n	800cb9e <_vfiprintf_r+0x1ce>
 800cb32:	9b03      	ldr	r3, [sp, #12]
 800cb34:	1d1a      	adds	r2, r3, #4
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	9203      	str	r2, [sp, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	bfb8      	it	lt
 800cb3e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb42:	3402      	adds	r4, #2
 800cb44:	9305      	str	r3, [sp, #20]
 800cb46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc2c <_vfiprintf_r+0x25c>
 800cb4a:	7821      	ldrb	r1, [r4, #0]
 800cb4c:	2203      	movs	r2, #3
 800cb4e:	4650      	mov	r0, sl
 800cb50:	f7f3 fb4e 	bl	80001f0 <memchr>
 800cb54:	b140      	cbz	r0, 800cb68 <_vfiprintf_r+0x198>
 800cb56:	2340      	movs	r3, #64	; 0x40
 800cb58:	eba0 000a 	sub.w	r0, r0, sl
 800cb5c:	fa03 f000 	lsl.w	r0, r3, r0
 800cb60:	9b04      	ldr	r3, [sp, #16]
 800cb62:	4303      	orrs	r3, r0
 800cb64:	3401      	adds	r4, #1
 800cb66:	9304      	str	r3, [sp, #16]
 800cb68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb6c:	482c      	ldr	r0, [pc, #176]	; (800cc20 <_vfiprintf_r+0x250>)
 800cb6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb72:	2206      	movs	r2, #6
 800cb74:	f7f3 fb3c 	bl	80001f0 <memchr>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d03f      	beq.n	800cbfc <_vfiprintf_r+0x22c>
 800cb7c:	4b29      	ldr	r3, [pc, #164]	; (800cc24 <_vfiprintf_r+0x254>)
 800cb7e:	bb1b      	cbnz	r3, 800cbc8 <_vfiprintf_r+0x1f8>
 800cb80:	9b03      	ldr	r3, [sp, #12]
 800cb82:	3307      	adds	r3, #7
 800cb84:	f023 0307 	bic.w	r3, r3, #7
 800cb88:	3308      	adds	r3, #8
 800cb8a:	9303      	str	r3, [sp, #12]
 800cb8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb8e:	443b      	add	r3, r7
 800cb90:	9309      	str	r3, [sp, #36]	; 0x24
 800cb92:	e767      	b.n	800ca64 <_vfiprintf_r+0x94>
 800cb94:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb98:	460c      	mov	r4, r1
 800cb9a:	2001      	movs	r0, #1
 800cb9c:	e7a5      	b.n	800caea <_vfiprintf_r+0x11a>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	3401      	adds	r4, #1
 800cba2:	9305      	str	r3, [sp, #20]
 800cba4:	4619      	mov	r1, r3
 800cba6:	f04f 0c0a 	mov.w	ip, #10
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbb0:	3a30      	subs	r2, #48	; 0x30
 800cbb2:	2a09      	cmp	r2, #9
 800cbb4:	d903      	bls.n	800cbbe <_vfiprintf_r+0x1ee>
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d0c5      	beq.n	800cb46 <_vfiprintf_r+0x176>
 800cbba:	9105      	str	r1, [sp, #20]
 800cbbc:	e7c3      	b.n	800cb46 <_vfiprintf_r+0x176>
 800cbbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e7f0      	b.n	800cbaa <_vfiprintf_r+0x1da>
 800cbc8:	ab03      	add	r3, sp, #12
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	462a      	mov	r2, r5
 800cbce:	4b16      	ldr	r3, [pc, #88]	; (800cc28 <_vfiprintf_r+0x258>)
 800cbd0:	a904      	add	r1, sp, #16
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f3af 8000 	nop.w
 800cbd8:	4607      	mov	r7, r0
 800cbda:	1c78      	adds	r0, r7, #1
 800cbdc:	d1d6      	bne.n	800cb8c <_vfiprintf_r+0x1bc>
 800cbde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbe0:	07d9      	lsls	r1, r3, #31
 800cbe2:	d405      	bmi.n	800cbf0 <_vfiprintf_r+0x220>
 800cbe4:	89ab      	ldrh	r3, [r5, #12]
 800cbe6:	059a      	lsls	r2, r3, #22
 800cbe8:	d402      	bmi.n	800cbf0 <_vfiprintf_r+0x220>
 800cbea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbec:	f7ff feb9 	bl	800c962 <__retarget_lock_release_recursive>
 800cbf0:	89ab      	ldrh	r3, [r5, #12]
 800cbf2:	065b      	lsls	r3, r3, #25
 800cbf4:	f53f af12 	bmi.w	800ca1c <_vfiprintf_r+0x4c>
 800cbf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbfa:	e711      	b.n	800ca20 <_vfiprintf_r+0x50>
 800cbfc:	ab03      	add	r3, sp, #12
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	462a      	mov	r2, r5
 800cc02:	4b09      	ldr	r3, [pc, #36]	; (800cc28 <_vfiprintf_r+0x258>)
 800cc04:	a904      	add	r1, sp, #16
 800cc06:	4630      	mov	r0, r6
 800cc08:	f000 f880 	bl	800cd0c <_printf_i>
 800cc0c:	e7e4      	b.n	800cbd8 <_vfiprintf_r+0x208>
 800cc0e:	bf00      	nop
 800cc10:	0800d558 	.word	0x0800d558
 800cc14:	0800d578 	.word	0x0800d578
 800cc18:	0800d538 	.word	0x0800d538
 800cc1c:	0800d598 	.word	0x0800d598
 800cc20:	0800d5a2 	.word	0x0800d5a2
 800cc24:	00000000 	.word	0x00000000
 800cc28:	0800c9ab 	.word	0x0800c9ab
 800cc2c:	0800d59e 	.word	0x0800d59e

0800cc30 <_printf_common>:
 800cc30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc34:	4616      	mov	r6, r2
 800cc36:	4699      	mov	r9, r3
 800cc38:	688a      	ldr	r2, [r1, #8]
 800cc3a:	690b      	ldr	r3, [r1, #16]
 800cc3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc40:	4293      	cmp	r3, r2
 800cc42:	bfb8      	it	lt
 800cc44:	4613      	movlt	r3, r2
 800cc46:	6033      	str	r3, [r6, #0]
 800cc48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc4c:	4607      	mov	r7, r0
 800cc4e:	460c      	mov	r4, r1
 800cc50:	b10a      	cbz	r2, 800cc56 <_printf_common+0x26>
 800cc52:	3301      	adds	r3, #1
 800cc54:	6033      	str	r3, [r6, #0]
 800cc56:	6823      	ldr	r3, [r4, #0]
 800cc58:	0699      	lsls	r1, r3, #26
 800cc5a:	bf42      	ittt	mi
 800cc5c:	6833      	ldrmi	r3, [r6, #0]
 800cc5e:	3302      	addmi	r3, #2
 800cc60:	6033      	strmi	r3, [r6, #0]
 800cc62:	6825      	ldr	r5, [r4, #0]
 800cc64:	f015 0506 	ands.w	r5, r5, #6
 800cc68:	d106      	bne.n	800cc78 <_printf_common+0x48>
 800cc6a:	f104 0a19 	add.w	sl, r4, #25
 800cc6e:	68e3      	ldr	r3, [r4, #12]
 800cc70:	6832      	ldr	r2, [r6, #0]
 800cc72:	1a9b      	subs	r3, r3, r2
 800cc74:	42ab      	cmp	r3, r5
 800cc76:	dc26      	bgt.n	800ccc6 <_printf_common+0x96>
 800cc78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc7c:	1e13      	subs	r3, r2, #0
 800cc7e:	6822      	ldr	r2, [r4, #0]
 800cc80:	bf18      	it	ne
 800cc82:	2301      	movne	r3, #1
 800cc84:	0692      	lsls	r2, r2, #26
 800cc86:	d42b      	bmi.n	800cce0 <_printf_common+0xb0>
 800cc88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc8c:	4649      	mov	r1, r9
 800cc8e:	4638      	mov	r0, r7
 800cc90:	47c0      	blx	r8
 800cc92:	3001      	adds	r0, #1
 800cc94:	d01e      	beq.n	800ccd4 <_printf_common+0xa4>
 800cc96:	6823      	ldr	r3, [r4, #0]
 800cc98:	68e5      	ldr	r5, [r4, #12]
 800cc9a:	6832      	ldr	r2, [r6, #0]
 800cc9c:	f003 0306 	and.w	r3, r3, #6
 800cca0:	2b04      	cmp	r3, #4
 800cca2:	bf08      	it	eq
 800cca4:	1aad      	subeq	r5, r5, r2
 800cca6:	68a3      	ldr	r3, [r4, #8]
 800cca8:	6922      	ldr	r2, [r4, #16]
 800ccaa:	bf0c      	ite	eq
 800ccac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccb0:	2500      	movne	r5, #0
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	bfc4      	itt	gt
 800ccb6:	1a9b      	subgt	r3, r3, r2
 800ccb8:	18ed      	addgt	r5, r5, r3
 800ccba:	2600      	movs	r6, #0
 800ccbc:	341a      	adds	r4, #26
 800ccbe:	42b5      	cmp	r5, r6
 800ccc0:	d11a      	bne.n	800ccf8 <_printf_common+0xc8>
 800ccc2:	2000      	movs	r0, #0
 800ccc4:	e008      	b.n	800ccd8 <_printf_common+0xa8>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	4652      	mov	r2, sl
 800ccca:	4649      	mov	r1, r9
 800cccc:	4638      	mov	r0, r7
 800ccce:	47c0      	blx	r8
 800ccd0:	3001      	adds	r0, #1
 800ccd2:	d103      	bne.n	800ccdc <_printf_common+0xac>
 800ccd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccdc:	3501      	adds	r5, #1
 800ccde:	e7c6      	b.n	800cc6e <_printf_common+0x3e>
 800cce0:	18e1      	adds	r1, r4, r3
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	2030      	movs	r0, #48	; 0x30
 800cce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccea:	4422      	add	r2, r4
 800ccec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ccf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ccf4:	3302      	adds	r3, #2
 800ccf6:	e7c7      	b.n	800cc88 <_printf_common+0x58>
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	4622      	mov	r2, r4
 800ccfc:	4649      	mov	r1, r9
 800ccfe:	4638      	mov	r0, r7
 800cd00:	47c0      	blx	r8
 800cd02:	3001      	adds	r0, #1
 800cd04:	d0e6      	beq.n	800ccd4 <_printf_common+0xa4>
 800cd06:	3601      	adds	r6, #1
 800cd08:	e7d9      	b.n	800ccbe <_printf_common+0x8e>
	...

0800cd0c <_printf_i>:
 800cd0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd10:	7e0f      	ldrb	r7, [r1, #24]
 800cd12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd14:	2f78      	cmp	r7, #120	; 0x78
 800cd16:	4691      	mov	r9, r2
 800cd18:	4680      	mov	r8, r0
 800cd1a:	460c      	mov	r4, r1
 800cd1c:	469a      	mov	sl, r3
 800cd1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd22:	d807      	bhi.n	800cd34 <_printf_i+0x28>
 800cd24:	2f62      	cmp	r7, #98	; 0x62
 800cd26:	d80a      	bhi.n	800cd3e <_printf_i+0x32>
 800cd28:	2f00      	cmp	r7, #0
 800cd2a:	f000 80d8 	beq.w	800cede <_printf_i+0x1d2>
 800cd2e:	2f58      	cmp	r7, #88	; 0x58
 800cd30:	f000 80a3 	beq.w	800ce7a <_printf_i+0x16e>
 800cd34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd3c:	e03a      	b.n	800cdb4 <_printf_i+0xa8>
 800cd3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd42:	2b15      	cmp	r3, #21
 800cd44:	d8f6      	bhi.n	800cd34 <_printf_i+0x28>
 800cd46:	a101      	add	r1, pc, #4	; (adr r1, 800cd4c <_printf_i+0x40>)
 800cd48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd4c:	0800cda5 	.word	0x0800cda5
 800cd50:	0800cdb9 	.word	0x0800cdb9
 800cd54:	0800cd35 	.word	0x0800cd35
 800cd58:	0800cd35 	.word	0x0800cd35
 800cd5c:	0800cd35 	.word	0x0800cd35
 800cd60:	0800cd35 	.word	0x0800cd35
 800cd64:	0800cdb9 	.word	0x0800cdb9
 800cd68:	0800cd35 	.word	0x0800cd35
 800cd6c:	0800cd35 	.word	0x0800cd35
 800cd70:	0800cd35 	.word	0x0800cd35
 800cd74:	0800cd35 	.word	0x0800cd35
 800cd78:	0800cec5 	.word	0x0800cec5
 800cd7c:	0800cde9 	.word	0x0800cde9
 800cd80:	0800cea7 	.word	0x0800cea7
 800cd84:	0800cd35 	.word	0x0800cd35
 800cd88:	0800cd35 	.word	0x0800cd35
 800cd8c:	0800cee7 	.word	0x0800cee7
 800cd90:	0800cd35 	.word	0x0800cd35
 800cd94:	0800cde9 	.word	0x0800cde9
 800cd98:	0800cd35 	.word	0x0800cd35
 800cd9c:	0800cd35 	.word	0x0800cd35
 800cda0:	0800ceaf 	.word	0x0800ceaf
 800cda4:	682b      	ldr	r3, [r5, #0]
 800cda6:	1d1a      	adds	r2, r3, #4
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	602a      	str	r2, [r5, #0]
 800cdac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e0a3      	b.n	800cf00 <_printf_i+0x1f4>
 800cdb8:	6820      	ldr	r0, [r4, #0]
 800cdba:	6829      	ldr	r1, [r5, #0]
 800cdbc:	0606      	lsls	r6, r0, #24
 800cdbe:	f101 0304 	add.w	r3, r1, #4
 800cdc2:	d50a      	bpl.n	800cdda <_printf_i+0xce>
 800cdc4:	680e      	ldr	r6, [r1, #0]
 800cdc6:	602b      	str	r3, [r5, #0]
 800cdc8:	2e00      	cmp	r6, #0
 800cdca:	da03      	bge.n	800cdd4 <_printf_i+0xc8>
 800cdcc:	232d      	movs	r3, #45	; 0x2d
 800cdce:	4276      	negs	r6, r6
 800cdd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdd4:	485e      	ldr	r0, [pc, #376]	; (800cf50 <_printf_i+0x244>)
 800cdd6:	230a      	movs	r3, #10
 800cdd8:	e019      	b.n	800ce0e <_printf_i+0x102>
 800cdda:	680e      	ldr	r6, [r1, #0]
 800cddc:	602b      	str	r3, [r5, #0]
 800cdde:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cde2:	bf18      	it	ne
 800cde4:	b236      	sxthne	r6, r6
 800cde6:	e7ef      	b.n	800cdc8 <_printf_i+0xbc>
 800cde8:	682b      	ldr	r3, [r5, #0]
 800cdea:	6820      	ldr	r0, [r4, #0]
 800cdec:	1d19      	adds	r1, r3, #4
 800cdee:	6029      	str	r1, [r5, #0]
 800cdf0:	0601      	lsls	r1, r0, #24
 800cdf2:	d501      	bpl.n	800cdf8 <_printf_i+0xec>
 800cdf4:	681e      	ldr	r6, [r3, #0]
 800cdf6:	e002      	b.n	800cdfe <_printf_i+0xf2>
 800cdf8:	0646      	lsls	r6, r0, #25
 800cdfa:	d5fb      	bpl.n	800cdf4 <_printf_i+0xe8>
 800cdfc:	881e      	ldrh	r6, [r3, #0]
 800cdfe:	4854      	ldr	r0, [pc, #336]	; (800cf50 <_printf_i+0x244>)
 800ce00:	2f6f      	cmp	r7, #111	; 0x6f
 800ce02:	bf0c      	ite	eq
 800ce04:	2308      	moveq	r3, #8
 800ce06:	230a      	movne	r3, #10
 800ce08:	2100      	movs	r1, #0
 800ce0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce0e:	6865      	ldr	r5, [r4, #4]
 800ce10:	60a5      	str	r5, [r4, #8]
 800ce12:	2d00      	cmp	r5, #0
 800ce14:	bfa2      	ittt	ge
 800ce16:	6821      	ldrge	r1, [r4, #0]
 800ce18:	f021 0104 	bicge.w	r1, r1, #4
 800ce1c:	6021      	strge	r1, [r4, #0]
 800ce1e:	b90e      	cbnz	r6, 800ce24 <_printf_i+0x118>
 800ce20:	2d00      	cmp	r5, #0
 800ce22:	d04d      	beq.n	800cec0 <_printf_i+0x1b4>
 800ce24:	4615      	mov	r5, r2
 800ce26:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce2a:	fb03 6711 	mls	r7, r3, r1, r6
 800ce2e:	5dc7      	ldrb	r7, [r0, r7]
 800ce30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce34:	4637      	mov	r7, r6
 800ce36:	42bb      	cmp	r3, r7
 800ce38:	460e      	mov	r6, r1
 800ce3a:	d9f4      	bls.n	800ce26 <_printf_i+0x11a>
 800ce3c:	2b08      	cmp	r3, #8
 800ce3e:	d10b      	bne.n	800ce58 <_printf_i+0x14c>
 800ce40:	6823      	ldr	r3, [r4, #0]
 800ce42:	07de      	lsls	r6, r3, #31
 800ce44:	d508      	bpl.n	800ce58 <_printf_i+0x14c>
 800ce46:	6923      	ldr	r3, [r4, #16]
 800ce48:	6861      	ldr	r1, [r4, #4]
 800ce4a:	4299      	cmp	r1, r3
 800ce4c:	bfde      	ittt	le
 800ce4e:	2330      	movle	r3, #48	; 0x30
 800ce50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce54:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce58:	1b52      	subs	r2, r2, r5
 800ce5a:	6122      	str	r2, [r4, #16]
 800ce5c:	f8cd a000 	str.w	sl, [sp]
 800ce60:	464b      	mov	r3, r9
 800ce62:	aa03      	add	r2, sp, #12
 800ce64:	4621      	mov	r1, r4
 800ce66:	4640      	mov	r0, r8
 800ce68:	f7ff fee2 	bl	800cc30 <_printf_common>
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	d14c      	bne.n	800cf0a <_printf_i+0x1fe>
 800ce70:	f04f 30ff 	mov.w	r0, #4294967295
 800ce74:	b004      	add	sp, #16
 800ce76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce7a:	4835      	ldr	r0, [pc, #212]	; (800cf50 <_printf_i+0x244>)
 800ce7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ce80:	6829      	ldr	r1, [r5, #0]
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce88:	6029      	str	r1, [r5, #0]
 800ce8a:	061d      	lsls	r5, r3, #24
 800ce8c:	d514      	bpl.n	800ceb8 <_printf_i+0x1ac>
 800ce8e:	07df      	lsls	r7, r3, #31
 800ce90:	bf44      	itt	mi
 800ce92:	f043 0320 	orrmi.w	r3, r3, #32
 800ce96:	6023      	strmi	r3, [r4, #0]
 800ce98:	b91e      	cbnz	r6, 800cea2 <_printf_i+0x196>
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	f023 0320 	bic.w	r3, r3, #32
 800cea0:	6023      	str	r3, [r4, #0]
 800cea2:	2310      	movs	r3, #16
 800cea4:	e7b0      	b.n	800ce08 <_printf_i+0xfc>
 800cea6:	6823      	ldr	r3, [r4, #0]
 800cea8:	f043 0320 	orr.w	r3, r3, #32
 800ceac:	6023      	str	r3, [r4, #0]
 800ceae:	2378      	movs	r3, #120	; 0x78
 800ceb0:	4828      	ldr	r0, [pc, #160]	; (800cf54 <_printf_i+0x248>)
 800ceb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ceb6:	e7e3      	b.n	800ce80 <_printf_i+0x174>
 800ceb8:	0659      	lsls	r1, r3, #25
 800ceba:	bf48      	it	mi
 800cebc:	b2b6      	uxthmi	r6, r6
 800cebe:	e7e6      	b.n	800ce8e <_printf_i+0x182>
 800cec0:	4615      	mov	r5, r2
 800cec2:	e7bb      	b.n	800ce3c <_printf_i+0x130>
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	6826      	ldr	r6, [r4, #0]
 800cec8:	6961      	ldr	r1, [r4, #20]
 800ceca:	1d18      	adds	r0, r3, #4
 800cecc:	6028      	str	r0, [r5, #0]
 800cece:	0635      	lsls	r5, r6, #24
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	d501      	bpl.n	800ced8 <_printf_i+0x1cc>
 800ced4:	6019      	str	r1, [r3, #0]
 800ced6:	e002      	b.n	800cede <_printf_i+0x1d2>
 800ced8:	0670      	lsls	r0, r6, #25
 800ceda:	d5fb      	bpl.n	800ced4 <_printf_i+0x1c8>
 800cedc:	8019      	strh	r1, [r3, #0]
 800cede:	2300      	movs	r3, #0
 800cee0:	6123      	str	r3, [r4, #16]
 800cee2:	4615      	mov	r5, r2
 800cee4:	e7ba      	b.n	800ce5c <_printf_i+0x150>
 800cee6:	682b      	ldr	r3, [r5, #0]
 800cee8:	1d1a      	adds	r2, r3, #4
 800ceea:	602a      	str	r2, [r5, #0]
 800ceec:	681d      	ldr	r5, [r3, #0]
 800ceee:	6862      	ldr	r2, [r4, #4]
 800cef0:	2100      	movs	r1, #0
 800cef2:	4628      	mov	r0, r5
 800cef4:	f7f3 f97c 	bl	80001f0 <memchr>
 800cef8:	b108      	cbz	r0, 800cefe <_printf_i+0x1f2>
 800cefa:	1b40      	subs	r0, r0, r5
 800cefc:	6060      	str	r0, [r4, #4]
 800cefe:	6863      	ldr	r3, [r4, #4]
 800cf00:	6123      	str	r3, [r4, #16]
 800cf02:	2300      	movs	r3, #0
 800cf04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf08:	e7a8      	b.n	800ce5c <_printf_i+0x150>
 800cf0a:	6923      	ldr	r3, [r4, #16]
 800cf0c:	462a      	mov	r2, r5
 800cf0e:	4649      	mov	r1, r9
 800cf10:	4640      	mov	r0, r8
 800cf12:	47d0      	blx	sl
 800cf14:	3001      	adds	r0, #1
 800cf16:	d0ab      	beq.n	800ce70 <_printf_i+0x164>
 800cf18:	6823      	ldr	r3, [r4, #0]
 800cf1a:	079b      	lsls	r3, r3, #30
 800cf1c:	d413      	bmi.n	800cf46 <_printf_i+0x23a>
 800cf1e:	68e0      	ldr	r0, [r4, #12]
 800cf20:	9b03      	ldr	r3, [sp, #12]
 800cf22:	4298      	cmp	r0, r3
 800cf24:	bfb8      	it	lt
 800cf26:	4618      	movlt	r0, r3
 800cf28:	e7a4      	b.n	800ce74 <_printf_i+0x168>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	4632      	mov	r2, r6
 800cf2e:	4649      	mov	r1, r9
 800cf30:	4640      	mov	r0, r8
 800cf32:	47d0      	blx	sl
 800cf34:	3001      	adds	r0, #1
 800cf36:	d09b      	beq.n	800ce70 <_printf_i+0x164>
 800cf38:	3501      	adds	r5, #1
 800cf3a:	68e3      	ldr	r3, [r4, #12]
 800cf3c:	9903      	ldr	r1, [sp, #12]
 800cf3e:	1a5b      	subs	r3, r3, r1
 800cf40:	42ab      	cmp	r3, r5
 800cf42:	dcf2      	bgt.n	800cf2a <_printf_i+0x21e>
 800cf44:	e7eb      	b.n	800cf1e <_printf_i+0x212>
 800cf46:	2500      	movs	r5, #0
 800cf48:	f104 0619 	add.w	r6, r4, #25
 800cf4c:	e7f5      	b.n	800cf3a <_printf_i+0x22e>
 800cf4e:	bf00      	nop
 800cf50:	0800d5a9 	.word	0x0800d5a9
 800cf54:	0800d5ba 	.word	0x0800d5ba

0800cf58 <__sread>:
 800cf58:	b510      	push	{r4, lr}
 800cf5a:	460c      	mov	r4, r1
 800cf5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf60:	f000 fa5a 	bl	800d418 <_read_r>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	bfab      	itete	ge
 800cf68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf6a:	89a3      	ldrhlt	r3, [r4, #12]
 800cf6c:	181b      	addge	r3, r3, r0
 800cf6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf72:	bfac      	ite	ge
 800cf74:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf76:	81a3      	strhlt	r3, [r4, #12]
 800cf78:	bd10      	pop	{r4, pc}

0800cf7a <__swrite>:
 800cf7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7e:	461f      	mov	r7, r3
 800cf80:	898b      	ldrh	r3, [r1, #12]
 800cf82:	05db      	lsls	r3, r3, #23
 800cf84:	4605      	mov	r5, r0
 800cf86:	460c      	mov	r4, r1
 800cf88:	4616      	mov	r6, r2
 800cf8a:	d505      	bpl.n	800cf98 <__swrite+0x1e>
 800cf8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf90:	2302      	movs	r3, #2
 800cf92:	2200      	movs	r2, #0
 800cf94:	f000 f9c8 	bl	800d328 <_lseek_r>
 800cf98:	89a3      	ldrh	r3, [r4, #12]
 800cf9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfa2:	81a3      	strh	r3, [r4, #12]
 800cfa4:	4632      	mov	r2, r6
 800cfa6:	463b      	mov	r3, r7
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfae:	f000 b869 	b.w	800d084 <_write_r>

0800cfb2 <__sseek>:
 800cfb2:	b510      	push	{r4, lr}
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfba:	f000 f9b5 	bl	800d328 <_lseek_r>
 800cfbe:	1c43      	adds	r3, r0, #1
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	bf15      	itete	ne
 800cfc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfce:	81a3      	strheq	r3, [r4, #12]
 800cfd0:	bf18      	it	ne
 800cfd2:	81a3      	strhne	r3, [r4, #12]
 800cfd4:	bd10      	pop	{r4, pc}

0800cfd6 <__sclose>:
 800cfd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfda:	f000 b8d3 	b.w	800d184 <_close_r>
	...

0800cfe0 <__swbuf_r>:
 800cfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe2:	460e      	mov	r6, r1
 800cfe4:	4614      	mov	r4, r2
 800cfe6:	4605      	mov	r5, r0
 800cfe8:	b118      	cbz	r0, 800cff2 <__swbuf_r+0x12>
 800cfea:	6983      	ldr	r3, [r0, #24]
 800cfec:	b90b      	cbnz	r3, 800cff2 <__swbuf_r+0x12>
 800cfee:	f7ff fc19 	bl	800c824 <__sinit>
 800cff2:	4b21      	ldr	r3, [pc, #132]	; (800d078 <__swbuf_r+0x98>)
 800cff4:	429c      	cmp	r4, r3
 800cff6:	d12b      	bne.n	800d050 <__swbuf_r+0x70>
 800cff8:	686c      	ldr	r4, [r5, #4]
 800cffa:	69a3      	ldr	r3, [r4, #24]
 800cffc:	60a3      	str	r3, [r4, #8]
 800cffe:	89a3      	ldrh	r3, [r4, #12]
 800d000:	071a      	lsls	r2, r3, #28
 800d002:	d52f      	bpl.n	800d064 <__swbuf_r+0x84>
 800d004:	6923      	ldr	r3, [r4, #16]
 800d006:	b36b      	cbz	r3, 800d064 <__swbuf_r+0x84>
 800d008:	6923      	ldr	r3, [r4, #16]
 800d00a:	6820      	ldr	r0, [r4, #0]
 800d00c:	1ac0      	subs	r0, r0, r3
 800d00e:	6963      	ldr	r3, [r4, #20]
 800d010:	b2f6      	uxtb	r6, r6
 800d012:	4283      	cmp	r3, r0
 800d014:	4637      	mov	r7, r6
 800d016:	dc04      	bgt.n	800d022 <__swbuf_r+0x42>
 800d018:	4621      	mov	r1, r4
 800d01a:	4628      	mov	r0, r5
 800d01c:	f000 f948 	bl	800d2b0 <_fflush_r>
 800d020:	bb30      	cbnz	r0, 800d070 <__swbuf_r+0x90>
 800d022:	68a3      	ldr	r3, [r4, #8]
 800d024:	3b01      	subs	r3, #1
 800d026:	60a3      	str	r3, [r4, #8]
 800d028:	6823      	ldr	r3, [r4, #0]
 800d02a:	1c5a      	adds	r2, r3, #1
 800d02c:	6022      	str	r2, [r4, #0]
 800d02e:	701e      	strb	r6, [r3, #0]
 800d030:	6963      	ldr	r3, [r4, #20]
 800d032:	3001      	adds	r0, #1
 800d034:	4283      	cmp	r3, r0
 800d036:	d004      	beq.n	800d042 <__swbuf_r+0x62>
 800d038:	89a3      	ldrh	r3, [r4, #12]
 800d03a:	07db      	lsls	r3, r3, #31
 800d03c:	d506      	bpl.n	800d04c <__swbuf_r+0x6c>
 800d03e:	2e0a      	cmp	r6, #10
 800d040:	d104      	bne.n	800d04c <__swbuf_r+0x6c>
 800d042:	4621      	mov	r1, r4
 800d044:	4628      	mov	r0, r5
 800d046:	f000 f933 	bl	800d2b0 <_fflush_r>
 800d04a:	b988      	cbnz	r0, 800d070 <__swbuf_r+0x90>
 800d04c:	4638      	mov	r0, r7
 800d04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d050:	4b0a      	ldr	r3, [pc, #40]	; (800d07c <__swbuf_r+0x9c>)
 800d052:	429c      	cmp	r4, r3
 800d054:	d101      	bne.n	800d05a <__swbuf_r+0x7a>
 800d056:	68ac      	ldr	r4, [r5, #8]
 800d058:	e7cf      	b.n	800cffa <__swbuf_r+0x1a>
 800d05a:	4b09      	ldr	r3, [pc, #36]	; (800d080 <__swbuf_r+0xa0>)
 800d05c:	429c      	cmp	r4, r3
 800d05e:	bf08      	it	eq
 800d060:	68ec      	ldreq	r4, [r5, #12]
 800d062:	e7ca      	b.n	800cffa <__swbuf_r+0x1a>
 800d064:	4621      	mov	r1, r4
 800d066:	4628      	mov	r0, r5
 800d068:	f000 f81e 	bl	800d0a8 <__swsetup_r>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d0cb      	beq.n	800d008 <__swbuf_r+0x28>
 800d070:	f04f 37ff 	mov.w	r7, #4294967295
 800d074:	e7ea      	b.n	800d04c <__swbuf_r+0x6c>
 800d076:	bf00      	nop
 800d078:	0800d558 	.word	0x0800d558
 800d07c:	0800d578 	.word	0x0800d578
 800d080:	0800d538 	.word	0x0800d538

0800d084 <_write_r>:
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	4d07      	ldr	r5, [pc, #28]	; (800d0a4 <_write_r+0x20>)
 800d088:	4604      	mov	r4, r0
 800d08a:	4608      	mov	r0, r1
 800d08c:	4611      	mov	r1, r2
 800d08e:	2200      	movs	r2, #0
 800d090:	602a      	str	r2, [r5, #0]
 800d092:	461a      	mov	r2, r3
 800d094:	f7f4 fadf 	bl	8001656 <_write>
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	d102      	bne.n	800d0a2 <_write_r+0x1e>
 800d09c:	682b      	ldr	r3, [r5, #0]
 800d09e:	b103      	cbz	r3, 800d0a2 <_write_r+0x1e>
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	bd38      	pop	{r3, r4, r5, pc}
 800d0a4:	20008e04 	.word	0x20008e04

0800d0a8 <__swsetup_r>:
 800d0a8:	4b32      	ldr	r3, [pc, #200]	; (800d174 <__swsetup_r+0xcc>)
 800d0aa:	b570      	push	{r4, r5, r6, lr}
 800d0ac:	681d      	ldr	r5, [r3, #0]
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	460c      	mov	r4, r1
 800d0b2:	b125      	cbz	r5, 800d0be <__swsetup_r+0x16>
 800d0b4:	69ab      	ldr	r3, [r5, #24]
 800d0b6:	b913      	cbnz	r3, 800d0be <__swsetup_r+0x16>
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	f7ff fbb3 	bl	800c824 <__sinit>
 800d0be:	4b2e      	ldr	r3, [pc, #184]	; (800d178 <__swsetup_r+0xd0>)
 800d0c0:	429c      	cmp	r4, r3
 800d0c2:	d10f      	bne.n	800d0e4 <__swsetup_r+0x3c>
 800d0c4:	686c      	ldr	r4, [r5, #4]
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0cc:	0719      	lsls	r1, r3, #28
 800d0ce:	d42c      	bmi.n	800d12a <__swsetup_r+0x82>
 800d0d0:	06dd      	lsls	r5, r3, #27
 800d0d2:	d411      	bmi.n	800d0f8 <__swsetup_r+0x50>
 800d0d4:	2309      	movs	r3, #9
 800d0d6:	6033      	str	r3, [r6, #0]
 800d0d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0dc:	81a3      	strh	r3, [r4, #12]
 800d0de:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e2:	e03e      	b.n	800d162 <__swsetup_r+0xba>
 800d0e4:	4b25      	ldr	r3, [pc, #148]	; (800d17c <__swsetup_r+0xd4>)
 800d0e6:	429c      	cmp	r4, r3
 800d0e8:	d101      	bne.n	800d0ee <__swsetup_r+0x46>
 800d0ea:	68ac      	ldr	r4, [r5, #8]
 800d0ec:	e7eb      	b.n	800d0c6 <__swsetup_r+0x1e>
 800d0ee:	4b24      	ldr	r3, [pc, #144]	; (800d180 <__swsetup_r+0xd8>)
 800d0f0:	429c      	cmp	r4, r3
 800d0f2:	bf08      	it	eq
 800d0f4:	68ec      	ldreq	r4, [r5, #12]
 800d0f6:	e7e6      	b.n	800d0c6 <__swsetup_r+0x1e>
 800d0f8:	0758      	lsls	r0, r3, #29
 800d0fa:	d512      	bpl.n	800d122 <__swsetup_r+0x7a>
 800d0fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0fe:	b141      	cbz	r1, 800d112 <__swsetup_r+0x6a>
 800d100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d104:	4299      	cmp	r1, r3
 800d106:	d002      	beq.n	800d10e <__swsetup_r+0x66>
 800d108:	4630      	mov	r0, r6
 800d10a:	f7ff fa2b 	bl	800c564 <_free_r>
 800d10e:	2300      	movs	r3, #0
 800d110:	6363      	str	r3, [r4, #52]	; 0x34
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d118:	81a3      	strh	r3, [r4, #12]
 800d11a:	2300      	movs	r3, #0
 800d11c:	6063      	str	r3, [r4, #4]
 800d11e:	6923      	ldr	r3, [r4, #16]
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	89a3      	ldrh	r3, [r4, #12]
 800d124:	f043 0308 	orr.w	r3, r3, #8
 800d128:	81a3      	strh	r3, [r4, #12]
 800d12a:	6923      	ldr	r3, [r4, #16]
 800d12c:	b94b      	cbnz	r3, 800d142 <__swsetup_r+0x9a>
 800d12e:	89a3      	ldrh	r3, [r4, #12]
 800d130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d138:	d003      	beq.n	800d142 <__swsetup_r+0x9a>
 800d13a:	4621      	mov	r1, r4
 800d13c:	4630      	mov	r0, r6
 800d13e:	f000 f92b 	bl	800d398 <__smakebuf_r>
 800d142:	89a0      	ldrh	r0, [r4, #12]
 800d144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d148:	f010 0301 	ands.w	r3, r0, #1
 800d14c:	d00a      	beq.n	800d164 <__swsetup_r+0xbc>
 800d14e:	2300      	movs	r3, #0
 800d150:	60a3      	str	r3, [r4, #8]
 800d152:	6963      	ldr	r3, [r4, #20]
 800d154:	425b      	negs	r3, r3
 800d156:	61a3      	str	r3, [r4, #24]
 800d158:	6923      	ldr	r3, [r4, #16]
 800d15a:	b943      	cbnz	r3, 800d16e <__swsetup_r+0xc6>
 800d15c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d160:	d1ba      	bne.n	800d0d8 <__swsetup_r+0x30>
 800d162:	bd70      	pop	{r4, r5, r6, pc}
 800d164:	0781      	lsls	r1, r0, #30
 800d166:	bf58      	it	pl
 800d168:	6963      	ldrpl	r3, [r4, #20]
 800d16a:	60a3      	str	r3, [r4, #8]
 800d16c:	e7f4      	b.n	800d158 <__swsetup_r+0xb0>
 800d16e:	2000      	movs	r0, #0
 800d170:	e7f7      	b.n	800d162 <__swsetup_r+0xba>
 800d172:	bf00      	nop
 800d174:	20000030 	.word	0x20000030
 800d178:	0800d558 	.word	0x0800d558
 800d17c:	0800d578 	.word	0x0800d578
 800d180:	0800d538 	.word	0x0800d538

0800d184 <_close_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4d06      	ldr	r5, [pc, #24]	; (800d1a0 <_close_r+0x1c>)
 800d188:	2300      	movs	r3, #0
 800d18a:	4604      	mov	r4, r0
 800d18c:	4608      	mov	r0, r1
 800d18e:	602b      	str	r3, [r5, #0]
 800d190:	f7f4 fa7d 	bl	800168e <_close>
 800d194:	1c43      	adds	r3, r0, #1
 800d196:	d102      	bne.n	800d19e <_close_r+0x1a>
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	b103      	cbz	r3, 800d19e <_close_r+0x1a>
 800d19c:	6023      	str	r3, [r4, #0]
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	20008e04 	.word	0x20008e04

0800d1a4 <__sflush_r>:
 800d1a4:	898a      	ldrh	r2, [r1, #12]
 800d1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1aa:	4605      	mov	r5, r0
 800d1ac:	0710      	lsls	r0, r2, #28
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	d458      	bmi.n	800d264 <__sflush_r+0xc0>
 800d1b2:	684b      	ldr	r3, [r1, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	dc05      	bgt.n	800d1c4 <__sflush_r+0x20>
 800d1b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	dc02      	bgt.n	800d1c4 <__sflush_r+0x20>
 800d1be:	2000      	movs	r0, #0
 800d1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1c6:	2e00      	cmp	r6, #0
 800d1c8:	d0f9      	beq.n	800d1be <__sflush_r+0x1a>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1d0:	682f      	ldr	r7, [r5, #0]
 800d1d2:	602b      	str	r3, [r5, #0]
 800d1d4:	d032      	beq.n	800d23c <__sflush_r+0x98>
 800d1d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1d8:	89a3      	ldrh	r3, [r4, #12]
 800d1da:	075a      	lsls	r2, r3, #29
 800d1dc:	d505      	bpl.n	800d1ea <__sflush_r+0x46>
 800d1de:	6863      	ldr	r3, [r4, #4]
 800d1e0:	1ac0      	subs	r0, r0, r3
 800d1e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1e4:	b10b      	cbz	r3, 800d1ea <__sflush_r+0x46>
 800d1e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1e8:	1ac0      	subs	r0, r0, r3
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1f0:	6a21      	ldr	r1, [r4, #32]
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	47b0      	blx	r6
 800d1f6:	1c43      	adds	r3, r0, #1
 800d1f8:	89a3      	ldrh	r3, [r4, #12]
 800d1fa:	d106      	bne.n	800d20a <__sflush_r+0x66>
 800d1fc:	6829      	ldr	r1, [r5, #0]
 800d1fe:	291d      	cmp	r1, #29
 800d200:	d82c      	bhi.n	800d25c <__sflush_r+0xb8>
 800d202:	4a2a      	ldr	r2, [pc, #168]	; (800d2ac <__sflush_r+0x108>)
 800d204:	40ca      	lsrs	r2, r1
 800d206:	07d6      	lsls	r6, r2, #31
 800d208:	d528      	bpl.n	800d25c <__sflush_r+0xb8>
 800d20a:	2200      	movs	r2, #0
 800d20c:	6062      	str	r2, [r4, #4]
 800d20e:	04d9      	lsls	r1, r3, #19
 800d210:	6922      	ldr	r2, [r4, #16]
 800d212:	6022      	str	r2, [r4, #0]
 800d214:	d504      	bpl.n	800d220 <__sflush_r+0x7c>
 800d216:	1c42      	adds	r2, r0, #1
 800d218:	d101      	bne.n	800d21e <__sflush_r+0x7a>
 800d21a:	682b      	ldr	r3, [r5, #0]
 800d21c:	b903      	cbnz	r3, 800d220 <__sflush_r+0x7c>
 800d21e:	6560      	str	r0, [r4, #84]	; 0x54
 800d220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d222:	602f      	str	r7, [r5, #0]
 800d224:	2900      	cmp	r1, #0
 800d226:	d0ca      	beq.n	800d1be <__sflush_r+0x1a>
 800d228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d22c:	4299      	cmp	r1, r3
 800d22e:	d002      	beq.n	800d236 <__sflush_r+0x92>
 800d230:	4628      	mov	r0, r5
 800d232:	f7ff f997 	bl	800c564 <_free_r>
 800d236:	2000      	movs	r0, #0
 800d238:	6360      	str	r0, [r4, #52]	; 0x34
 800d23a:	e7c1      	b.n	800d1c0 <__sflush_r+0x1c>
 800d23c:	6a21      	ldr	r1, [r4, #32]
 800d23e:	2301      	movs	r3, #1
 800d240:	4628      	mov	r0, r5
 800d242:	47b0      	blx	r6
 800d244:	1c41      	adds	r1, r0, #1
 800d246:	d1c7      	bne.n	800d1d8 <__sflush_r+0x34>
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d0c4      	beq.n	800d1d8 <__sflush_r+0x34>
 800d24e:	2b1d      	cmp	r3, #29
 800d250:	d001      	beq.n	800d256 <__sflush_r+0xb2>
 800d252:	2b16      	cmp	r3, #22
 800d254:	d101      	bne.n	800d25a <__sflush_r+0xb6>
 800d256:	602f      	str	r7, [r5, #0]
 800d258:	e7b1      	b.n	800d1be <__sflush_r+0x1a>
 800d25a:	89a3      	ldrh	r3, [r4, #12]
 800d25c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d260:	81a3      	strh	r3, [r4, #12]
 800d262:	e7ad      	b.n	800d1c0 <__sflush_r+0x1c>
 800d264:	690f      	ldr	r7, [r1, #16]
 800d266:	2f00      	cmp	r7, #0
 800d268:	d0a9      	beq.n	800d1be <__sflush_r+0x1a>
 800d26a:	0793      	lsls	r3, r2, #30
 800d26c:	680e      	ldr	r6, [r1, #0]
 800d26e:	bf08      	it	eq
 800d270:	694b      	ldreq	r3, [r1, #20]
 800d272:	600f      	str	r7, [r1, #0]
 800d274:	bf18      	it	ne
 800d276:	2300      	movne	r3, #0
 800d278:	eba6 0807 	sub.w	r8, r6, r7
 800d27c:	608b      	str	r3, [r1, #8]
 800d27e:	f1b8 0f00 	cmp.w	r8, #0
 800d282:	dd9c      	ble.n	800d1be <__sflush_r+0x1a>
 800d284:	6a21      	ldr	r1, [r4, #32]
 800d286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d288:	4643      	mov	r3, r8
 800d28a:	463a      	mov	r2, r7
 800d28c:	4628      	mov	r0, r5
 800d28e:	47b0      	blx	r6
 800d290:	2800      	cmp	r0, #0
 800d292:	dc06      	bgt.n	800d2a2 <__sflush_r+0xfe>
 800d294:	89a3      	ldrh	r3, [r4, #12]
 800d296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d29a:	81a3      	strh	r3, [r4, #12]
 800d29c:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a0:	e78e      	b.n	800d1c0 <__sflush_r+0x1c>
 800d2a2:	4407      	add	r7, r0
 800d2a4:	eba8 0800 	sub.w	r8, r8, r0
 800d2a8:	e7e9      	b.n	800d27e <__sflush_r+0xda>
 800d2aa:	bf00      	nop
 800d2ac:	20400001 	.word	0x20400001

0800d2b0 <_fflush_r>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	690b      	ldr	r3, [r1, #16]
 800d2b4:	4605      	mov	r5, r0
 800d2b6:	460c      	mov	r4, r1
 800d2b8:	b913      	cbnz	r3, 800d2c0 <_fflush_r+0x10>
 800d2ba:	2500      	movs	r5, #0
 800d2bc:	4628      	mov	r0, r5
 800d2be:	bd38      	pop	{r3, r4, r5, pc}
 800d2c0:	b118      	cbz	r0, 800d2ca <_fflush_r+0x1a>
 800d2c2:	6983      	ldr	r3, [r0, #24]
 800d2c4:	b90b      	cbnz	r3, 800d2ca <_fflush_r+0x1a>
 800d2c6:	f7ff faad 	bl	800c824 <__sinit>
 800d2ca:	4b14      	ldr	r3, [pc, #80]	; (800d31c <_fflush_r+0x6c>)
 800d2cc:	429c      	cmp	r4, r3
 800d2ce:	d11b      	bne.n	800d308 <_fflush_r+0x58>
 800d2d0:	686c      	ldr	r4, [r5, #4]
 800d2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d0ef      	beq.n	800d2ba <_fflush_r+0xa>
 800d2da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d2dc:	07d0      	lsls	r0, r2, #31
 800d2de:	d404      	bmi.n	800d2ea <_fflush_r+0x3a>
 800d2e0:	0599      	lsls	r1, r3, #22
 800d2e2:	d402      	bmi.n	800d2ea <_fflush_r+0x3a>
 800d2e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2e6:	f7ff fb3b 	bl	800c960 <__retarget_lock_acquire_recursive>
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	f7ff ff59 	bl	800d1a4 <__sflush_r>
 800d2f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2f4:	07da      	lsls	r2, r3, #31
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	d4e0      	bmi.n	800d2bc <_fflush_r+0xc>
 800d2fa:	89a3      	ldrh	r3, [r4, #12]
 800d2fc:	059b      	lsls	r3, r3, #22
 800d2fe:	d4dd      	bmi.n	800d2bc <_fflush_r+0xc>
 800d300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d302:	f7ff fb2e 	bl	800c962 <__retarget_lock_release_recursive>
 800d306:	e7d9      	b.n	800d2bc <_fflush_r+0xc>
 800d308:	4b05      	ldr	r3, [pc, #20]	; (800d320 <_fflush_r+0x70>)
 800d30a:	429c      	cmp	r4, r3
 800d30c:	d101      	bne.n	800d312 <_fflush_r+0x62>
 800d30e:	68ac      	ldr	r4, [r5, #8]
 800d310:	e7df      	b.n	800d2d2 <_fflush_r+0x22>
 800d312:	4b04      	ldr	r3, [pc, #16]	; (800d324 <_fflush_r+0x74>)
 800d314:	429c      	cmp	r4, r3
 800d316:	bf08      	it	eq
 800d318:	68ec      	ldreq	r4, [r5, #12]
 800d31a:	e7da      	b.n	800d2d2 <_fflush_r+0x22>
 800d31c:	0800d558 	.word	0x0800d558
 800d320:	0800d578 	.word	0x0800d578
 800d324:	0800d538 	.word	0x0800d538

0800d328 <_lseek_r>:
 800d328:	b538      	push	{r3, r4, r5, lr}
 800d32a:	4d07      	ldr	r5, [pc, #28]	; (800d348 <_lseek_r+0x20>)
 800d32c:	4604      	mov	r4, r0
 800d32e:	4608      	mov	r0, r1
 800d330:	4611      	mov	r1, r2
 800d332:	2200      	movs	r2, #0
 800d334:	602a      	str	r2, [r5, #0]
 800d336:	461a      	mov	r2, r3
 800d338:	f7f4 f9d0 	bl	80016dc <_lseek>
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	d102      	bne.n	800d346 <_lseek_r+0x1e>
 800d340:	682b      	ldr	r3, [r5, #0]
 800d342:	b103      	cbz	r3, 800d346 <_lseek_r+0x1e>
 800d344:	6023      	str	r3, [r4, #0]
 800d346:	bd38      	pop	{r3, r4, r5, pc}
 800d348:	20008e04 	.word	0x20008e04

0800d34c <__swhatbuf_r>:
 800d34c:	b570      	push	{r4, r5, r6, lr}
 800d34e:	460e      	mov	r6, r1
 800d350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d354:	2900      	cmp	r1, #0
 800d356:	b096      	sub	sp, #88	; 0x58
 800d358:	4614      	mov	r4, r2
 800d35a:	461d      	mov	r5, r3
 800d35c:	da08      	bge.n	800d370 <__swhatbuf_r+0x24>
 800d35e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d362:	2200      	movs	r2, #0
 800d364:	602a      	str	r2, [r5, #0]
 800d366:	061a      	lsls	r2, r3, #24
 800d368:	d410      	bmi.n	800d38c <__swhatbuf_r+0x40>
 800d36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d36e:	e00e      	b.n	800d38e <__swhatbuf_r+0x42>
 800d370:	466a      	mov	r2, sp
 800d372:	f000 f863 	bl	800d43c <_fstat_r>
 800d376:	2800      	cmp	r0, #0
 800d378:	dbf1      	blt.n	800d35e <__swhatbuf_r+0x12>
 800d37a:	9a01      	ldr	r2, [sp, #4]
 800d37c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d380:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d384:	425a      	negs	r2, r3
 800d386:	415a      	adcs	r2, r3
 800d388:	602a      	str	r2, [r5, #0]
 800d38a:	e7ee      	b.n	800d36a <__swhatbuf_r+0x1e>
 800d38c:	2340      	movs	r3, #64	; 0x40
 800d38e:	2000      	movs	r0, #0
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	b016      	add	sp, #88	; 0x58
 800d394:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d398 <__smakebuf_r>:
 800d398:	898b      	ldrh	r3, [r1, #12]
 800d39a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d39c:	079d      	lsls	r5, r3, #30
 800d39e:	4606      	mov	r6, r0
 800d3a0:	460c      	mov	r4, r1
 800d3a2:	d507      	bpl.n	800d3b4 <__smakebuf_r+0x1c>
 800d3a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	6123      	str	r3, [r4, #16]
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	6163      	str	r3, [r4, #20]
 800d3b0:	b002      	add	sp, #8
 800d3b2:	bd70      	pop	{r4, r5, r6, pc}
 800d3b4:	ab01      	add	r3, sp, #4
 800d3b6:	466a      	mov	r2, sp
 800d3b8:	f7ff ffc8 	bl	800d34c <__swhatbuf_r>
 800d3bc:	9900      	ldr	r1, [sp, #0]
 800d3be:	4605      	mov	r5, r0
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f7ff f93b 	bl	800c63c <_malloc_r>
 800d3c6:	b948      	cbnz	r0, 800d3dc <__smakebuf_r+0x44>
 800d3c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3cc:	059a      	lsls	r2, r3, #22
 800d3ce:	d4ef      	bmi.n	800d3b0 <__smakebuf_r+0x18>
 800d3d0:	f023 0303 	bic.w	r3, r3, #3
 800d3d4:	f043 0302 	orr.w	r3, r3, #2
 800d3d8:	81a3      	strh	r3, [r4, #12]
 800d3da:	e7e3      	b.n	800d3a4 <__smakebuf_r+0xc>
 800d3dc:	4b0d      	ldr	r3, [pc, #52]	; (800d414 <__smakebuf_r+0x7c>)
 800d3de:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	6020      	str	r0, [r4, #0]
 800d3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3e8:	81a3      	strh	r3, [r4, #12]
 800d3ea:	9b00      	ldr	r3, [sp, #0]
 800d3ec:	6163      	str	r3, [r4, #20]
 800d3ee:	9b01      	ldr	r3, [sp, #4]
 800d3f0:	6120      	str	r0, [r4, #16]
 800d3f2:	b15b      	cbz	r3, 800d40c <__smakebuf_r+0x74>
 800d3f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	f000 f831 	bl	800d460 <_isatty_r>
 800d3fe:	b128      	cbz	r0, 800d40c <__smakebuf_r+0x74>
 800d400:	89a3      	ldrh	r3, [r4, #12]
 800d402:	f023 0303 	bic.w	r3, r3, #3
 800d406:	f043 0301 	orr.w	r3, r3, #1
 800d40a:	81a3      	strh	r3, [r4, #12]
 800d40c:	89a0      	ldrh	r0, [r4, #12]
 800d40e:	4305      	orrs	r5, r0
 800d410:	81a5      	strh	r5, [r4, #12]
 800d412:	e7cd      	b.n	800d3b0 <__smakebuf_r+0x18>
 800d414:	0800c7bd 	.word	0x0800c7bd

0800d418 <_read_r>:
 800d418:	b538      	push	{r3, r4, r5, lr}
 800d41a:	4d07      	ldr	r5, [pc, #28]	; (800d438 <_read_r+0x20>)
 800d41c:	4604      	mov	r4, r0
 800d41e:	4608      	mov	r0, r1
 800d420:	4611      	mov	r1, r2
 800d422:	2200      	movs	r2, #0
 800d424:	602a      	str	r2, [r5, #0]
 800d426:	461a      	mov	r2, r3
 800d428:	f7f4 f8f8 	bl	800161c <_read>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_read_r+0x1e>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	b103      	cbz	r3, 800d436 <_read_r+0x1e>
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	20008e04 	.word	0x20008e04

0800d43c <_fstat_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4d07      	ldr	r5, [pc, #28]	; (800d45c <_fstat_r+0x20>)
 800d440:	2300      	movs	r3, #0
 800d442:	4604      	mov	r4, r0
 800d444:	4608      	mov	r0, r1
 800d446:	4611      	mov	r1, r2
 800d448:	602b      	str	r3, [r5, #0]
 800d44a:	f7f4 f92c 	bl	80016a6 <_fstat>
 800d44e:	1c43      	adds	r3, r0, #1
 800d450:	d102      	bne.n	800d458 <_fstat_r+0x1c>
 800d452:	682b      	ldr	r3, [r5, #0]
 800d454:	b103      	cbz	r3, 800d458 <_fstat_r+0x1c>
 800d456:	6023      	str	r3, [r4, #0]
 800d458:	bd38      	pop	{r3, r4, r5, pc}
 800d45a:	bf00      	nop
 800d45c:	20008e04 	.word	0x20008e04

0800d460 <_isatty_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d06      	ldr	r5, [pc, #24]	; (800d47c <_isatty_r+0x1c>)
 800d464:	2300      	movs	r3, #0
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	602b      	str	r3, [r5, #0]
 800d46c:	f7f4 f92b 	bl	80016c6 <_isatty>
 800d470:	1c43      	adds	r3, r0, #1
 800d472:	d102      	bne.n	800d47a <_isatty_r+0x1a>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	b103      	cbz	r3, 800d47a <_isatty_r+0x1a>
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	bd38      	pop	{r3, r4, r5, pc}
 800d47c:	20008e04 	.word	0x20008e04

0800d480 <_init>:
 800d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d482:	bf00      	nop
 800d484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d486:	bc08      	pop	{r3}
 800d488:	469e      	mov	lr, r3
 800d48a:	4770      	bx	lr

0800d48c <_fini>:
 800d48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48e:	bf00      	nop
 800d490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d492:	bc08      	pop	{r3}
 800d494:	469e      	mov	lr, r3
 800d496:	4770      	bx	lr
